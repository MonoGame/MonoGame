<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="T:Microsoft.Xna.Framework.BoundingBox">
      <summary>Defines an axis-aligned box-shaped 3D volume.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Creates an instance of BoundingBox.</summary>
      <param name="min">The minimum point the BoundingBox includes.</param>
      <param name="max">The maximum point the BoundingBox includes.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Tests whether the BoundingBox contains another BoundingBox.</summary>
      <param name="box">The BoundingBox to test for overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Tests whether the BoundingBox contains a BoundingBox.</summary>
      <param name="box">The BoundingBox to test for overlap.</param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Tests whether the BoundingBox contains a BoundingFrustum.</summary>
      <param name="frustum">The BoundingFrustum to test for overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Tests whether the BoundingBox contains a BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to test for overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Tests whether the BoundingBox contains a BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to test for overlap.</param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.Vector3)">
      <summary>Tests whether the BoundingBox contains a point.</summary>
      <param name="point">The point to test for overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Tests whether the BoundingBox contains a point.</summary>
      <param name="point">The point to test for overlap.</param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingBox.CornerCount">
      <summary>Specifies the total number of corners (8) in the BoundingBox.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateFromPoints(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector3})">
      <summary>Creates the smallest BoundingBox that will contain a group of points.</summary>
      <param name="points">A list of points the BoundingBox should contain.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateFromSphere(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Creates the smallest BoundingBox that will contain the specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to contain.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateFromSphere(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>Creates the smallest BoundingBox that will contain the specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to contain.</param>
      <param name="result">[OutAttribute] The created BoundingBox.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateMerged(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.BoundingBox)">
      <summary>Creates the smallest BoundingBox that contains the two specified BoundingBox instances.</summary>
      <param name="original">One of the BoundingBoxs to contain.</param>
      <param name="additional">One of the BoundingBoxs to contain.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateMerged(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>Creates the smallest BoundingBox that contains the two specified BoundingBox instances.</summary>
      <param name="original">One of the BoundingBox instances to contain.</param>
      <param name="additional">One of the BoundingBox instances to contain.</param>
      <param name="result">[OutAttribute] The created BoundingBox.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Equals(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Determines whether two instances of BoundingBox are equal.</summary>
      <param name="other">The BoundingBox to compare with the current BoundingBox.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Equals(System.Object)">
      <summary>Determines whether two instances of BoundingBox are equal.</summary>
      <param name="obj">The Object to compare with the current BoundingBox.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.GetCorners">
      <summary>Gets an array of points that make up the corners of the BoundingBox.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.GetCorners(Microsoft.Xna.Framework.Vector3[])">
      <summary>Gets the array of points that make up the corners of the BoundingBox.</summary>
      <param name="corners">An existing array of at least 8 Vector3 points where the corners of the BoundingBox are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the current BoundingBox intersects another BoundingBox.</summary>
      <param name="box">The BoundingBox to check for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Boolean@)">
      <summary>Checks whether the current BoundingBox intersects another BoundingBox.</summary>
      <param name="box">The BoundingBox to check for intersection with.</param>
      <param name="result">[OutAttribute] true if the BoundingBox instances intersect; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the current BoundingBox intersects a BoundingFrustum.</summary>
      <param name="frustum">The BoundingFrustum to check for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current BoundingBox intersects a BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Boolean@)">
      <summary>Checks whether the current BoundingBox intersects a BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
      <param name="result">[OutAttribute] true if the BoundingBox and BoundingSphere intersect; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Plane)">
      <summary>Checks whether the current BoundingBox intersects a Plane.</summary>
      <param name="plane">The Plane to check for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
      <summary>Checks whether the current BoundingBox intersects a Plane.</summary>
      <param name="plane">The Plane to check for intersection with.</param>
      <param name="result">[OutAttribute] An enumeration indicating whether the BoundingBox intersects the Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Ray)">
      <summary>Checks whether the current BoundingBox intersects a Ray.</summary>
      <param name="ray">The Ray to check for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Ray@,System.Nullable{System.Single}@)">
      <summary>Checks whether the current BoundingBox intersects a Ray.</summary>
      <param name="ray">The Ray to check for intersection with.</param>
      <param name="result">[OutAttribute] Distance at which the ray intersects the BoundingBox, or null if there is no intersection.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingBox.Max">
      <summary>The maximum point the BoundingBox contains.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingBox.Min">
      <summary>The minimum point the BoundingBox contains.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.op_Equality(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.BoundingBox)">
      <summary>Determines whether two instances of BoundingBox are equal.</summary>
      <param name="a">BoundingBox to compare.</param>
      <param name="b">BoundingBox to compare.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.op_Inequality(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.BoundingBox)">
      <summary>Determines whether two instances of BoundingBox are not equal.</summary>
      <param name="a">The object to the left of the inequality operator.</param>
      <param name="b">The object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.ToString">
      <summary>Returns a String that represents the current BoundingBox.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.BoundingFrustum">
      <summary>Defines a frustum and helps determine whether forms intersect with it.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.#ctor(Microsoft.Xna.Framework.Matrix)">
      <summary>Creates a new instance of BoundingFrustum.</summary>
      <param name="value">Combined matrix that usually takes view × projection matrix.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Bottom">
      <summary>Gets the bottom plane of the BoundingFrustum.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the current BoundingFrustum contains the specified BoundingBox.</summary>
      <param name="box">The BoundingBox to check against the current BoundingFrustum.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Checks whether the current BoundingFrustum contains the specified BoundingBox.</summary>
      <param name="box">The BoundingBox to test for overlap.</param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the current BoundingFrustum contains the specified BoundingFrustum.</summary>
      <param name="frustum">The BoundingFrustum to check against the current BoundingFrustum.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current BoundingFrustum contains the specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check against the current BoundingFrustum.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Checks whether the current BoundingFrustum contains the specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to test for overlap.</param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.Vector3)">
      <summary>Checks whether the current BoundingFrustum contains the specified point.</summary>
      <param name="point">The point to check against the current BoundingFrustum.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Checks whether the current BoundingFrustum contains the specified point.</summary>
      <param name="point">The point to test for overlap.</param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingFrustum.CornerCount">
      <summary>Specifies the total number of corners (8) in the BoundingFrustum.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Equals(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Determines whether the specified BoundingFrustum is equal to the current BoundingFrustum.</summary>
      <param name="other">The BoundingFrustum to compare with the current BoundingFrustum.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to the BoundingFrustum.</summary>
      <param name="obj">The Object to compare with the current BoundingFrustum.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Far">
      <summary>Gets the far plane of the BoundingFrustum.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.GetCorners">
      <summary>Gets an array of points that make up the corners of the BoundingFrustum.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.GetCorners(Microsoft.Xna.Framework.Vector3[])">
      <summary>Gets an array of points that make up the corners of the BoundingFrustum.</summary>
      <param name="corners">An existing array of at least 8 Vector3 points where the corners of the BoundingFrustum are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the current BoundingFrustum intersects the specified BoundingBox.</summary>
      <param name="box">The BoundingBox to check for intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Boolean@)">
      <summary>Checks whether the current BoundingFrustum intersects a BoundingBox.</summary>
      <param name="box">The BoundingBox to check for intersection with.</param>
      <param name="result">[OutAttribute] true if the BoundingFrustum and BoundingBox intersect; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the current BoundingFrustum intersects the specified BoundingFrustum.</summary>
      <param name="frustum">The BoundingFrustum to check for intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current BoundingFrustum intersects the specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Boolean@)">
      <summary>Checks whether the current BoundingFrustum intersects a BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
      <param name="result">[OutAttribute] true if the BoundingFrustum and BoundingSphere intersect; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Plane)">
      <summary>Checks whether the current BoundingFrustum intersects the specified Plane.</summary>
      <param name="plane">The Plane to check for intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
      <summary>Checks whether the current BoundingFrustum intersects a Plane.</summary>
      <param name="plane">The Plane to check for intersection with.</param>
      <param name="result">[OutAttribute] An enumeration indicating whether the BoundingFrustum intersects the Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Ray)">
      <summary>Checks whether the current BoundingFrustum intersects the specified Ray.</summary>
      <param name="ray">The Ray to check for intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Ray@,System.Nullable{System.Single}@)">
      <summary>Checks whether the current BoundingFrustum intersects a Ray.</summary>
      <param name="ray">The Ray to check for intersection with.</param>
      <param name="result">[OutAttribute] Distance at which the ray intersects the BoundingFrustum or null if there is no intersection.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Left">
      <summary>Gets the left plane of the BoundingFrustum.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Matrix">
      <summary>Gets or sets the Matrix that describes this bounding frustum.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Near">
      <summary>Gets the near plane of the BoundingFrustum.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.op_Equality(Microsoft.Xna.Framework.BoundingFrustum,Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Determines whether two instances of BoundingFrustum are equal.</summary>
      <param name="a">The BoundingFrustum to the left of the equality operator.</param>
      <param name="b">The BoundingFrustum to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.op_Inequality(Microsoft.Xna.Framework.BoundingFrustum,Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Determines whether two instances of BoundingFrustum are not equal.</summary>
      <param name="a">The BoundingFrustum to the left of the inequality operator.</param>
      <param name="b">The BoundingFrustum to the right of the inequality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Right">
      <summary>Gets the right plane of the BoundingFrustum.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Top">
      <summary>Gets the top plane of the BoundingFrustum.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.ToString">
      <summary>Returns a String that represents the current BoundingFrustum.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.BoundingSphere">
      <summary>Defines a sphere.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Creates a new instance of BoundingSphere.</summary>
      <param name="center">Center point of the sphere.</param>
      <param name="radius">Radius of the sphere.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingSphere.Center">
      <summary>The center point of the sphere.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the current BoundingSphere contains the specified BoundingBox.</summary>
      <param name="box">The BoundingBox to check against the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Checks whether the current BoundingSphere contains the specified BoundingBox.</summary>
      <param name="box">The BoundingBox to test for overlap.</param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the current BoundingSphere contains the specified BoundingFrustum.</summary>
      <param name="frustum">The BoundingFrustum to check against the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current BoundingSphere contains the specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check against the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Checks whether the current BoundingSphere contains the specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to test for overlap.</param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.Vector3)">
      <summary>Checks whether the current BoundingSphere contains the specified point.</summary>
      <param name="point">The point to check against the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Checks whether the current BoundingSphere contains the specified point.</summary>
      <param name="point">The point to test for overlap.</param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromBoundingBox(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Creates the smallest BoundingSphere that can contain a specified BoundingBox.</summary>
      <param name="box">The BoundingBox to create the BoundingSphere from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromBoundingBox(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.BoundingSphere@)">
      <summary>Creates the smallest BoundingSphere that can contain a specified BoundingBox.</summary>
      <param name="box">The BoundingBox to create the BoundingSphere from.</param>
      <param name="result">[OutAttribute] The created BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromFrustum(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Creates the smallest BoundingSphere that can contain a specified BoundingFrustum.</summary>
      <param name="frustum">The BoundingFrustum to create the BoundingSphere with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromPoints(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector3})">
      <summary>Creates a BoundingSphere that can contain a specified list of points.</summary>
      <param name="points">List of points the BoundingSphere must contain.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateMerged(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Creates a BoundingSphere that contains the two specified BoundingSphere instances.</summary>
      <param name="original">BoundingSphere to be merged.</param>
      <param name="additional">BoundingSphere to be merged.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateMerged(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.BoundingSphere@)">
      <summary>Creates a BoundingSphere that contains the two specified BoundingSphere instances.</summary>
      <param name="original">BoundingSphere to be merged.</param>
      <param name="additional">BoundingSphere to be merged.</param>
      <param name="result">[OutAttribute] The created BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Equals(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Determines whether the specified BoundingSphere is equal to the current BoundingSphere.</summary>
      <param name="other">The BoundingSphere to compare with the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to the BoundingSphere.</summary>
      <param name="obj">The Object to compare with the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the current BoundingSphere intersects with a specified BoundingBox.</summary>
      <param name="box">The BoundingBox to check for intersection with the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Boolean@)">
      <summary>Checks whether the current BoundingSphere intersects a BoundingBox.</summary>
      <param name="box">The BoundingBox to check for intersection with.</param>
      <param name="result">[OutAttribute] true if the BoundingSphere and BoundingBox intersect; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the current BoundingSphere intersects with a specified BoundingFrustum.</summary>
      <param name="frustum">The BoundingFrustum to check for intersection with the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current BoundingSphere intersects with a specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Boolean@)">
      <summary>Checks whether the current BoundingSphere intersects another BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
      <param name="result">[OutAttribute] true if the BoundingSphere instances intersect; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Plane)">
      <summary>Checks whether the current BoundingSphere intersects with a specified Plane.</summary>
      <param name="plane">The Plane to check for intersection with the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
      <summary>Checks whether the current BoundingSphere intersects a Plane.</summary>
      <param name="plane">The Plane to check for intersection with.</param>
      <param name="result">[OutAttribute] An enumeration indicating whether the BoundingSphere intersects the Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Ray)">
      <summary>Checks whether the current BoundingSphere intersects with a specified Ray.</summary>
      <param name="ray">The Ray to check for intersection with the current BoundingSphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Ray@,System.Nullable{System.Single}@)">
      <summary>Checks whether the current BoundingSphere intersects a Ray.</summary>
      <param name="ray">The Ray to check for intersection with.</param>
      <param name="result">[OutAttribute] Distance at which the ray intersects the BoundingSphere or null if there is no intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.op_Equality(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Determines whether two instances of BoundingSphere are equal.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.op_Inequality(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Determines whether two instances of BoundingSphere are not equal.</summary>
      <param name="a">The BoundingSphere to the left of the inequality operator.</param>
      <param name="b">The BoundingSphere to the right of the inequality operator.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingSphere.Radius">
      <summary>The radius of the sphere.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.ToString">
      <summary>Returns a String that represents the current BoundingSphere.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Transform(Microsoft.Xna.Framework.Matrix)">
      <summary>Translates and scales the BoundingSphere using a given Matrix.</summary>
      <param name="matrix">A transformation matrix that might include translation, rotation, or uniform scaling. Note that BoundingSphere.Transform will not return correct results if there are non-uniform scaling, shears, or other unusual transforms in this transformation matrix. This is because there is no way to shear or non-uniformly scale a sphere. Such an operation would cause the sphere to lose its shape as a sphere.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Transform(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.BoundingSphere@)">
      <summary>Translates and scales the BoundingSphere using a given Matrix.</summary>
      <param name="matrix">A transformation matrix that might include translation, rotation, or uniform scaling. Note that BoundingSphere.Transform will not return correct results if there are non-uniform scaling, shears, or other unusual transforms in this transformation matrix. This is because there is no way to shear or non-uniformly scale a sphere. Such an operation would cause the sphere to lose its shape as a sphere.</param>
      <param name="result">[OutAttribute] The transformed BoundingSphere.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Color">
      <summary>Represents a four-component color using red, green, blue, and alpha data.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Color.#ctor(Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a new instance of the class.</summary>
      <param name="vector">A three-component color.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Color.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Creates a new instance of the class.</summary>
      <param name="vector">A four-component color.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Color.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Creates a new instance of the class.</summary>
      <param name="r">Red component.</param>
      <param name="g">Green component.</param>
      <param name="b">Blue component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a new instance of the class.</summary>
      <param name="r">Red component.</param>
      <param name="g">Green component.</param>
      <param name="b">Blue component.</param>
      <param name="a">Alpha component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Color.#ctor(System.Single,System.Single,System.Single)">
      <summary>Creates a new instance of the class.</summary>
      <param name="r">Red component.</param>
      <param name="g">Green component.</param>
      <param name="b">Blue component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a new instance of the class.</summary>
      <param name="r">Red component.</param>
      <param name="g">Green component.</param>
      <param name="b">Blue component.</param>
      <param name="a">Alpha component.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.A">
      <summary>Gets or sets the alpha component value.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.AliceBlue">
      <summary>Gets a system-defined color with the value R:240 G:248 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.AntiqueWhite">
      <summary>Gets a system-defined color with the value R:250 G:235 B:215 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Aqua">
      <summary>Gets a system-defined color with the value R:0 G:255 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Aquamarine">
      <summary>Gets a system-defined color with the value R:127 G:255 B:212 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Azure">
      <summary>Gets a system-defined color with the value R:240 G:255 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.B">
      <summary>Gets or sets the blue component value of this Color.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Beige">
      <summary>Gets a system-defined color with the value R:245 G:245 B:220 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Bisque">
      <summary>Gets a system-defined color with the value R:255 G:228 B:196 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Black">
      <summary>Gets a system-defined color with the value R:0 G:0 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.BlanchedAlmond">
      <summary>Gets a system-defined color with the value R:255 G:235 B:205 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Blue">
      <summary>Gets a system-defined color with the value R:0 G:0 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.BlueViolet">
      <summary>Gets a system-defined color with the value R:138 G:43 B:226 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Brown">
      <summary>Gets a system-defined color with the value R:165 G:42 B:42 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.BurlyWood">
      <summary>Gets a system-defined color with the value R:222 G:184 B:135 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.CadetBlue">
      <summary>Gets a system-defined color with the value R:95 G:158 B:160 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Chartreuse">
      <summary>Gets a system-defined color with the value R:127 G:255 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Chocolate">
      <summary>Gets a system-defined color with the value R:210 G:105 B:30 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Coral">
      <summary>Gets a system-defined color with the value R:255 G:127 B:80 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.CornflowerBlue">
      <summary>Gets a system-defined color with the value R:100 G:149 B:237 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Cornsilk">
      <summary>Gets a system-defined color with the value R:255 G:248 B:220 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Crimson">
      <summary>Gets a system-defined color with the value R:220 G:20 B:60 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Cyan">
      <summary>Gets a system-defined color with the value R:0 G:255 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.DarkBlue">
      <summary>Gets a system-defined color with the value R:0 G:0 B:139 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.DarkCyan">
      <summary>Gets a system-defined color with the value R:0 G:139 B:139 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.DarkGoldenrod">
      <summary>Gets a system-defined color with the value R:184 G:134 B:11 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.DarkGray">
      <summary>Gets a system-defined color with the value R:169 G:169 B:169 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.DarkGreen">
      <summary>Gets a system-defined color with the value R:0 G:100 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.DarkKhaki">
      <summary>Gets a system-defined color with the value R:189 G:183 B:107 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.DarkMagenta">
      <summary>Gets a system-defined color with the value R:139 G:0 B:139 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.DarkOliveGreen">
      <summary>Gets a system-defined color with the value R:85 G:107 B:47 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.DarkOrange">
      <summary>Gets a system-defined color with the value R:255 G:140 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.DarkOrchid">
      <summary>Gets a system-defined color with the value R:153 G:50 B:204 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.DarkRed">
      <summary>Gets a system-defined color with the value R:139 G:0 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.DarkSalmon">
      <summary>Gets a system-defined color with the value R:233 G:150 B:122 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.DarkSeaGreen">
      <summary>Gets a system-defined color with the value R:143 G:188 B:139 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.DarkSlateBlue">
      <summary>Gets a system-defined color with the value R:72 G:61 B:139 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.DarkSlateGray">
      <summary>Gets a system-defined color with the value R:47 G:79 B:79 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.DarkTurquoise">
      <summary>Gets a system-defined color with the value R:0 G:206 B:209 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.DarkViolet">
      <summary>Gets a system-defined color with the value R:148 G:0 B:211 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.DeepPink">
      <summary>Gets a system-defined color with the value R:255 G:20 B:147 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.DeepSkyBlue">
      <summary>Gets a system-defined color with the value R:0 G:191 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.DimGray">
      <summary>Gets a system-defined color with the value R:105 G:105 B:105 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.DodgerBlue">
      <summary>Gets a system-defined color with the value R:30 G:144 B:255 A:255.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Color.Equals(Microsoft.Xna.Framework.Color)">
      <summary>Test a color to see if it is equal to the color in this instance.</summary>
      <param name="other">A four-component color.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Color.Equals(System.Object)">
      <summary>Test an instance of a color object to see if it is equal to this object.</summary>
      <param name="obj">A color object.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Firebrick">
      <summary>Gets a system-defined color with the value R:178 G:34 B:34 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.FloralWhite">
      <summary>Gets a system-defined color with the value R:255 G:250 B:240 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.ForestGreen">
      <summary>Gets a system-defined color with the value R:34 G:139 B:34 A:255.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Color.FromNonPremultiplied(Microsoft.Xna.Framework.Vector4)">
      <summary>Convert a non premultipled color into color data that contains alpha.</summary>
      <param name="vector">A four-component color.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Color.FromNonPremultiplied(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Converts a non-premultipled alpha color to a color that contains premultiplied alpha.</summary>
      <param name="r">Red component.</param>
      <param name="g">Green component.</param>
      <param name="b">Blue component.</param>
      <param name="a">Alpha component.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Fuchsia">
      <summary>Gets a system-defined color with the value R:255 G:0 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.G">
      <summary>Gets or sets the green component value of this Color.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Gainsboro">
      <summary>Gets a system-defined color with the value R:220 G:220 B:220 A:255.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Color.GetHashCode">
      <summary>Serves as a hash function for a particular type.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.GhostWhite">
      <summary>Gets a system-defined color with the value R:248 G:248 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Gold">
      <summary>Gets a system-defined color with the value R:255 G:215 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Goldenrod">
      <summary>Gets a system-defined color with the value R:218 G:165 B:32 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Gray">
      <summary>Gets a system-defined color with the value R:128 G:128 B:128 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Green">
      <summary>Gets a system-defined color with the value R:0 G:128 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.GreenYellow">
      <summary>Gets a system-defined color with the value R:173 G:255 B:47 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Honeydew">
      <summary>Gets a system-defined color with the value R:240 G:255 B:240 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.HotPink">
      <summary>Gets a system-defined color with the value R:255 G:105 B:180 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.IndianRed">
      <summary>Gets a system-defined color with the value R:205 G:92 B:92 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Indigo">
      <summary>Gets a system-defined color with the value R:75 G:0 B:130 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Ivory">
      <summary>Gets a system-defined color with the value R:255 G:255 B:240 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Khaki">
      <summary>Gets a system-defined color with the value R:240 G:230 B:140 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Lavender">
      <summary>Gets a system-defined color with the value R:230 G:230 B:250 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.LavenderBlush">
      <summary>Gets a system-defined color with the value R:255 G:240 B:245 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.LawnGreen">
      <summary>Gets a system-defined color with the value R:124 G:252 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.LemonChiffon">
      <summary>Gets a system-defined color with the value R:255 G:250 B:205 A:255.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Single)">
      <summary>Linearly interpolate a color.</summary>
      <param name="value1">A four-component color.</param>
      <param name="value2">A four-component color.</param>
      <param name="amount">Interpolation factor.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.LightBlue">
      <summary>Gets a system-defined color with the value R:173 G:216 B:230 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.LightCoral">
      <summary>Gets a system-defined color with the value R:240 G:128 B:128 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.LightCyan">
      <summary>Gets a system-defined color with the value R:224 G:255 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.LightGoldenrodYellow">
      <summary>Gets a system-defined color with the value R:250 G:250 B:210 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.LightGray">
      <summary>Gets a system-defined color with the value R:211 G:211 B:211 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.LightGreen">
      <summary>Gets a system-defined color with the value R:144 G:238 B:144 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.LightPink">
      <summary>Gets a system-defined color with the value R:255 G:182 B:193 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.LightSalmon">
      <summary>Gets a system-defined color with the value R:255 G:160 B:122 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.LightSeaGreen">
      <summary>Gets a system-defined color with the value R:32 G:178 B:170 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.LightSkyBlue">
      <summary>Gets a system-defined color with the value R:135 G:206 B:250 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.LightSlateGray">
      <summary>Gets a system-defined color with the value R:119 G:136 B:153 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.LightSteelBlue">
      <summary>Gets a system-defined color with the value R:176 G:196 B:222 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.LightYellow">
      <summary>Gets a system-defined color with the value R:255 G:255 B:224 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Lime">
      <summary>Gets a system-defined color with the value R:0 G:255 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.LimeGreen">
      <summary>Gets a system-defined color with the value R:50 G:205 B:50 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Linen">
      <summary>Gets a system-defined color with the value R:250 G:240 B:230 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Magenta">
      <summary>Gets a system-defined color with the value R:255 G:0 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Maroon">
      <summary>Gets a system-defined color with the value R:128 G:0 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.MediumAquamarine">
      <summary>Gets a system-defined color with the value R:102 G:205 B:170 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.MediumBlue">
      <summary>Gets a system-defined color with the value R:0 G:0 B:205 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.MediumOrchid">
      <summary>Gets a system-defined color with the value R:186 G:85 B:211 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.MediumPurple">
      <summary>Gets a system-defined color with the value R:147 G:112 B:219 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.MediumSeaGreen">
      <summary>Gets a system-defined color with the value R:60 G:179 B:113 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.MediumSlateBlue">
      <summary>Gets a system-defined color with the value R:123 G:104 B:238 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.MediumSpringGreen">
      <summary>Gets a system-defined color with the value R:0 G:250 B:154 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.MediumTurquoise">
      <summary>Gets a system-defined color with the value R:72 G:209 B:204 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.MediumVioletRed">
      <summary>Gets a system-defined color with the value R:199 G:21 B:133 A:255.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Color.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Pack a four-component color from a vector format into the format of a color object.</summary>
      <param name="vector">A four-component color.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.MidnightBlue">
      <summary>Gets a system-defined color with the value R:25 G:25 B:112 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.MintCream">
      <summary>Gets a system-defined color with the value R:245 G:255 B:250 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.MistyRose">
      <summary>Gets a system-defined color with the value R:255 G:228 B:225 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Moccasin">
      <summary>Gets a system-defined color with the value R:255 G:228 B:181 A:255.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Color.Multiply(Microsoft.Xna.Framework.Color,System.Single)">
      <summary>Multiply each color component by the scale factor.</summary>
      <param name="value">The source, four-component color.</param>
      <param name="scale">The scale factor.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.NavajoWhite">
      <summary>Gets a system-defined color with the value R:255 G:222 B:173 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Navy">
      <summary>Gets a system-defined color R:0 G:0 B:128 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.OldLace">
      <summary>Gets a system-defined color with the value R:253 G:245 B:230 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Olive">
      <summary>Gets a system-defined color with the value R:128 G:128 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.OliveDrab">
      <summary>Gets a system-defined color with the value R:107 G:142 B:35 A:255.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Color.op_Equality(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
      <summary>Equality operator.</summary>
      <param name="a">A four-component color.</param>
      <param name="b">A four-component color.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Color.op_Inequality(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
      <summary>Equality operator for Testing two color objects to see if they are equal.</summary>
      <param name="a">A four-component color.</param>
      <param name="b">A four-component color.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Color.op_Multiply(Microsoft.Xna.Framework.Color,System.Single)">
      <summary>Multiply operator.</summary>
      <param name="value">A four-component color</param>
      <param name="scale">Scale factor.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Orange">
      <summary>Gets a system-defined color with the value R:255 G:165 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.OrangeRed">
      <summary>Gets a system-defined color with the value R:255 G:69 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Orchid">
      <summary>Gets a system-defined color with the value R:218 G:112 B:214 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.PackedValue">
      <summary>Gets the current color as a packed value.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.PaleGoldenrod">
      <summary>Gets a system-defined color with the value R:238 G:232 B:170 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.PaleGreen">
      <summary>Gets a system-defined color with the value R:152 G:251 B:152 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.PaleTurquoise">
      <summary>Gets a system-defined color with the value R:175 G:238 B:238 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.PaleVioletRed">
      <summary>Gets a system-defined color with the value R:219 G:112 B:147 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.PapayaWhip">
      <summary>Gets a system-defined color with the value R:255 G:239 B:213 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.PeachPuff">
      <summary>Gets a system-defined color with the value R:255 G:218 B:185 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Peru">
      <summary>Gets a system-defined color with the value R:205 G:133 B:63 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Pink">
      <summary>Gets a system-defined color with the value R:255 G:192 B:203 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Plum">
      <summary>Gets a system-defined color with the value R:221 G:160 B:221 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.PowderBlue">
      <summary>Gets a system-defined color with the value R:176 G:224 B:230 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Purple">
      <summary>Gets a system-defined color with the value R:128 G:0 B:128 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.R">
      <summary>Gets or sets the red component value of this Color.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Red">
      <summary>Gets a system-defined color with the value R:255 G:0 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.RosyBrown">
      <summary>Gets a system-defined color with the value R:188 G:143 B:143 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.RoyalBlue">
      <summary>Gets a system-defined color with the value R:65 G:105 B:225 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.SaddleBrown">
      <summary>Gets a system-defined color with the value R:139 G:69 B:19 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Salmon">
      <summary>Gets a system-defined color with the value R:250 G:128 B:114 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.SandyBrown">
      <summary>Gets a system-defined color with the value R:244 G:164 B:96 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.SeaGreen">
      <summary>Gets a system-defined color with the value R:46 G:139 B:87 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.SeaShell">
      <summary>Gets a system-defined color with the value R:255 G:245 B:238 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Sienna">
      <summary>Gets a system-defined color with the value R:160 G:82 B:45 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Silver">
      <summary>Gets a system-defined color with the value R:192 G:192 B:192 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.SkyBlue">
      <summary>Gets a system-defined color with the value R:135 G:206 B:235 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.SlateBlue">
      <summary>Gets a system-defined color with the value R:106 G:90 B:205 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.SlateGray">
      <summary>Gets a system-defined color with the value R:112 G:128 B:144 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Snow">
      <summary>Gets a system-defined color with the value R:255 G:250 B:250 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.SpringGreen">
      <summary>Gets a system-defined color with the value R:0 G:255 B:127 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.SteelBlue">
      <summary>Gets a system-defined color with the value R:70 G:130 B:180 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Tan">
      <summary>Gets a system-defined color with the value R:210 G:180 B:140 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Teal">
      <summary>Gets a system-defined color with the value R:0 G:128 B:128 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Thistle">
      <summary>Gets a system-defined color with the value R:216 G:191 B:216 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Tomato">
      <summary>Gets a system-defined color with the value R:255 G:99 B:71 A:255.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Color.ToString">
      <summary>Gets a string representation of this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Color.ToVector3">
      <summary>Gets a three-component vector representation for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Color.ToVector4">
      <summary>Gets a four-component vector representation for this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Transparent">
      <summary>Gets a system-defined color with the value R:0 G:0 B:0 A:0.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Turquoise">
      <summary>Gets a system-defined color with the value R:64 G:224 B:208 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Violet">
      <summary>Gets a system-defined color with the value R:238 G:130 B:238 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Wheat">
      <summary>Gets a system-defined color with the value R:245 G:222 B:179 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.White">
      <summary>Gets a system-defined color with the value R:255 G:255 B:255 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.WhiteSmoke">
      <summary>Gets a system-defined color with the value R:245 G:245 B:245 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.Yellow">
      <summary>Gets a system-defined color with the value R:255 G:255 B:0 A:255.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Color.YellowGreen">
      <summary>Gets a system-defined color with the value R:154 G:205 B:50 A:255.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.ContainmentType">
      <summary>Indicates the extent to which bounding volumes intersect or contain one another.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.ContainmentType.Contains">
      <summary>Indicates that one bounding volume completely contains the other.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.ContainmentType.Disjoint">
      <summary>Indicates there is no overlap between the bounding volumes.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.ContainmentType.Intersects">
      <summary>Indicates that the bounding volumes partially overlap.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Curve">
      <summary>Stores an arbitrary collection of 2D CurveKey points, and provides methods for evaluating features of the curve they define.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.#ctor">
      <summary>Initializes a new instance of Curve.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.Clone">
      <summary>Creates a copy of the Curve.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangent(System.Int32,Microsoft.Xna.Framework.CurveTangent)">
      <summary>Computes both the TangentIn and the TangentOut for a CurveKey specified by its index.</summary>
      <param name="keyIndex">The index of the CurveKey for which to compute tangents (in the Keys collection of the Curve).</param>
      <param name="tangentType">The type of tangents to compute (one of the types specified in the CurveTangent enumeration).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangent(System.Int32,Microsoft.Xna.Framework.CurveTangent,Microsoft.Xna.Framework.CurveTangent)">
      <summary>Computes a specified type of TangentIn and a specified type of TangentOut for a given CurveKey.</summary>
      <param name="keyIndex">The index of the CurveKey for which to compute tangents (in the Keys collection of the Curve).</param>
      <param name="tangentInType">The type of TangentIn to compute (one of the types specified in the CurveTangent enumeration).</param>
      <param name="tangentOutType">The type of TangentOut to compute (one of the types specified in the CurveTangent enumeration).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangents(Microsoft.Xna.Framework.CurveTangent)">
      <summary>Computes all tangents for all CurveKeys in this Curve, using a specified tangent type for both TangentIn and TangentOut.</summary>
      <param name="tangentType">The type of TangentOut and TangentIn to compute (one of the types specified in the CurveTangent enumeration).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangents(Microsoft.Xna.Framework.CurveTangent,Microsoft.Xna.Framework.CurveTangent)">
      <summary>Computes all tangents for all CurveKeys in this Curve, using different tangent types for TangentOut and TangentIn.</summary>
      <param name="tangentInType">The type of TangentIn to compute (one of the types specified in the CurveTangent enumeration).</param>
      <param name="tangentOutType">The type of TangentOut to compute (one of the types specified in the CurveTangent enumeration).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.Evaluate(System.Single)">
      <summary>Finds the value at a position on the Curve.</summary>
      <param name="position">The position on the Curve.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Curve.IsConstant">
      <summary>Gets a value indicating whether the curve is constant.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Curve.Keys">
      <summary>The points that make up the curve.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Curve.PostLoop">
      <summary>Specifies how to handle weighting values that are greater than the last control point in the curve.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Curve.PreLoop">
      <summary>Specifies how to handle weighting values that are less than the first control point in the curve.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveContinuity">
      <summary>Defines the continuity of CurveKeys on a Curve.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveContinuity.Smooth">
      <summary>Interpolation can be used between this CurveKey and the next.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveContinuity.Step">
      <summary>Interpolation cannot be used between this CurveKey and the next. Specifying a position between the two points returns this point.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveKey">
      <summary>Represents a point in a multi-point curve.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of CurveKey.</summary>
      <param name="position">Position in the curve.</param>
      <param name="value">Value of the control point.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of CurveKey.</summary>
      <param name="position">Position in the curve.</param>
      <param name="value">Value of the control point.</param>
      <param name="tangentIn">Tangent approaching point from the previous point in the curve.</param>
      <param name="tangentOut">Tangent leaving point toward next point in the curve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.CurveContinuity)">
      <summary>Initializes a new instance of CurveKey.</summary>
      <param name="position">Position in the curve.</param>
      <param name="value">Value of the control point.</param>
      <param name="tangentIn">Tangent approaching point from the previous point in the curve.</param>
      <param name="tangentOut">Tangent leaving point toward next point in the curve.</param>
      <param name="continuity">Enum indicating whether the curve is discrete or continuous.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.Clone">
      <summary>Creates a copy of the CurveKey.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.CompareTo(Microsoft.Xna.Framework.CurveKey)">
      <summary>Compares this instance to another CurveKey and returns an indication of their relative values.</summary>
      <param name="other">CurveKey to compare to.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.Continuity">
      <summary>Describes whether the segment between this point and the next point in the curve is discrete or continuous.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.Equals(Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines whether the specified Object is equal to the CurveKey.</summary>
      <param name="other">The Object to compare with the current CurveKey.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.op_Equality(Microsoft.Xna.Framework.CurveKey,Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines whether two CurveKey instances are equal.</summary>
      <param name="a">CurveKey on the left of the equal sign.</param>
      <param name="b">CurveKey on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.op_Inequality(Microsoft.Xna.Framework.CurveKey,Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines whether two CurveKey instances are not equal.</summary>
      <param name="a">CurveKey on the left of the equal sign.</param>
      <param name="b">CurveKey on the right of the equal sign.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.Position">
      <summary>Position of the CurveKey in the curve.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.TangentIn">
      <summary>Describes the tangent when approaching this point from the previous point in the curve.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.TangentOut">
      <summary>Describes the tangent when leaving this point to the next point in the curve.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.Value">
      <summary>Describes the value of this point.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveKeyCollection">
      <summary>Contains the CurveKeys making up a Curve.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.#ctor">
      <summary>Initializes a new instance of CurveKeyCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Add(Microsoft.Xna.Framework.CurveKey)">
      <summary>Adds a CurveKey to the CurveKeyCollection.</summary>
      <param name="item">The CurveKey to add.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Clear">
      <summary>Removes all CurveKeys from the CurveKeyCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Clone">
      <summary>Creates a copy of the CurveKeyCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Contains(Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines whether the CurveKeyCollection contains a specific CurveKey.</summary>
      <param name="item">true if the CurveKey is found in the CurveKeyCollection; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.CopyTo(Microsoft.Xna.Framework.CurveKey[],System.Int32)">
      <summary>Copies the CurveKeys of the CurveKeyCollection to an array, starting at the array index provided.</summary>
      <param name="array">The destination of the CurveKeys copied from CurveKeyCollection. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in the array to start copying from.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKeyCollection.Count">
      <summary>Gets the number of elements contained in the CurveKeyCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the CurveKeyCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.IndexOf(Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines the index of a CurveKey in the CurveKeyCollection.</summary>
      <param name="item">CurveKey to locate in the CurveKeyCollection.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKeyCollection.IsReadOnly">
      <summary>Returns a value indicating whether the CurveKeyCollection is read-only.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKeyCollection.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The array index of the element.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Remove(Microsoft.Xna.Framework.CurveKey)">
      <summary>Removes the first occurrence of a specific CurveKey from the CurveKeyCollection.</summary>
      <param name="item">The CurveKey to remove from the CurveKeyCollection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.RemoveAt(System.Int32)">
      <summary>Removes the CurveKey at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the CurveKeyCollection.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveLoopType">
      <summary>Defines how the value of a Curve will be determined for positions before the first point on the Curve or after the last point on the Curve.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveLoopType.Constant">
      <summary>The Curve will evaluate to its first key for positions before the first point in the Curve and to the last key for positions after the last point.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveLoopType.Cycle">
      <summary>Positions specified past the ends of the curve will wrap around to the opposite side of the Curve.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveLoopType.CycleOffset">
      <summary>Positions specified past the ends of the curve will wrap around to the opposite side of the Curve. The value will be offset by the difference between the values of the first and last CurveKey multiplied by the number of times the position wraps around. If the position is before the first point in the Curve, the difference will be subtracted from its value; otherwise, the difference will be added.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveLoopType.Linear">
      <summary>Linear interpolation will be performed to determine the value.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveLoopType.Oscillate">
      <summary>Positions specified past the ends of the Curve act as an offset from the same side of the Curve toward the opposite side.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveTangent">
      <summary>Specifies different tangent types to be calculated for CurveKey points in a Curve.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveTangent.Flat">
      <summary>A Flat tangent always has a value equal to zero.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveTangent.Linear">
      <summary>A Linear tangent at a CurveKey is equal to the difference between its Value and the Value of the preceding or succeeding CurveKey. For example, in Curve MyCurve, where i is greater than zero and (i + 1) is less than the total number of CurveKeys in MyCurve, the linear TangentIn of MyCurve.Keys[i] is equal to: ( MyCurve.Keys[i].Value - MyCurve.Keys[i - 1].Value ) Similarly, the linear TangentOut is equal to: ( MyCurve.Keys[i + 1].Value - MyCurve.Keys[i].Value.)</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveTangent.Smooth">
      <summary>A Smooth tangent smooths the inflection between a TangentIn and TangentOut by taking into account the values of both neighbors of the CurveKey. The smooth TangentIn of MyCurve.Keys[i] is equal to: ( ( MyCurve.Keys[i + 1].Value - MyCurve.Keys[i - 1].Value ) * ( ( MyCurve.Keys[i].Position - MyCurve.Keys[i - 1].Position ) / ( MyCurve.Keys[i + 1].Position - MyCurve.Keys[i-1].Position ) ) ) Similarly, the smooth TangentOut is equal to: ( ( MyCurve.Keys[i + 1].Value - MyCurve.Keys[i - 1].Value ) * ( ( MyCurve.Keys[i + 1].Position - MyCurve.Keys[i].Position ) / ( MyCurve.Keys[i + 1].Position - MyCurve.Keys[i - 1].Position ) ) )</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.DisplayOrientation">
      <summary>Defines the display orientation.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.DisplayOrientation.Default">
      <summary>The default display orientation.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.DisplayOrientation.LandscapeLeft">
      <summary>The display is rotated counterclockwise 90 degrees into a landscape orientation, where the width is greater than the height.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.DisplayOrientation.LandscapeRight">
      <summary>The display is rotated clockwise 90 degrees into a landscape orientation, where the width is greater than the height.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.DisplayOrientation.Portrait">
      <summary>The orientation is a portrait, where the height is greater than the width.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.FrameworkDispatcher">
      <summary>Processes XNA Framework event messages.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.FrameworkDispatcher.Update">
      <summary>Updates the status of various framework components (such as power state and media), and raises related events.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GameTimer">
      <summary>Manages a timer which updates a game by firing actions at specific times.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameTimer.#ctor">
      <summary>Creates a new GameTimer.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameTimer.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GameTimer.Draw">
      <summary>An action that is fired once per frame to tell a game to draw itself.</summary>
      <param name="" />
    </member>
    <member name="P:Microsoft.Xna.Framework.GameTimer.DrawOrder">
      <summary>Gets or sets the sort order of draw actions for this instance.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GameTimer.FrameAction">
      <summary>An action that is fired to allow a game to do a per-frame update.</summary>
      <param name="" />
    </member>
    <member name="P:Microsoft.Xna.Framework.GameTimer.FrameActionOrder">
      <summary>Gets or sets the sort order of frame actions for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameTimer.ResetElapsedTime">
      <summary>Resets the game timing state for all GameTimers.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameTimer.Start">
      <summary>Starts the GameTimer instance so it will begin firing actions.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameTimer.Stop">
      <summary>Stops the GameTimer instance from firing actions.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameTimer.SuppressFrame">
      <summary>Supresses all remaining FrameAction, Update and Draw events from firing this frame for all GameTimers.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GameTimer.Update">
      <summary>An action fired at an update interval as specified by the UpdateInterval property.</summary>
      <param name="" />
    </member>
    <member name="P:Microsoft.Xna.Framework.GameTimer.UpdateInterval">
      <summary>Gets or sets the update interval for the action.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameTimer.UpdateOrder">
      <summary>Gets or sets the sort order of update actions for this instance.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.GameTimerEventArgs">
      <summary>A snapshot of the game timing state based on game time and not real time.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameTimerEventArgs.#ctor">
      <summary>Constructs an instance of GameTimerEventArgs.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameTimerEventArgs.#ctor(System.TimeSpan,System.TimeSpan)">
      <summary>Constructs an instance of GameTimerEventArgs using the totalTime and elapsedTime values.</summary>
      <param name="totalTime">Total time since the start of the game.</param>
      <param name="elapsedTime">Time since the last update.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameTimerEventArgs.ElapsedTime">
      <summary>Gets the amount of elapsed time.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameTimerEventArgs.TotalTime">
      <summary>Gets the amount of total time since the start of the game.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.MathHelper">
      <summary>Contains commonly used precalculated values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Returns the Cartesian coordinate for one axis of a point that is defined by a given triangle and two normalized barycentric (areal) coordinates.</summary>
      <param name="value1">The coordinate on one axis of vertex 1 of the defining triangle.</param>
      <param name="value2">The coordinate on the same axis of vertex 2 of the defining triangle.</param>
      <param name="value3">The coordinate on the same axis of vertex 3 of the defining triangle.</param>
      <param name="amount1">The normalized barycentric (areal) coordinate b2, equal to the weighting factor for vertex 2, the coordinate of which is specified in value2.</param>
      <param name="amount2">The normalized barycentric (areal) coordinate b3, equal to the weighting factor for vertex 3, the coordinate of which is specified in value3.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Clamp(System.Single,System.Single,System.Single)">
      <summary>Restricts a value to be within a specified range. Reference page contains links to related code samples.</summary>
      <param name="value">The value to clamp.</param>
      <param name="min">The minimum value. If value is less than min, min will be returned.</param>
      <param name="max">The maximum value. If value is greater than max, max will be returned.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Distance(System.Single,System.Single)">
      <summary>Calculates the absolute value of the difference of two values.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.E">
      <summary>Represents the mathematical constant e.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position.</param>
      <param name="tangent1">Source tangent.</param>
      <param name="value2">Source position.</param>
      <param name="tangent2">Source tangent.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Lerp(System.Single,System.Single,System.Single)">
      <summary>Linearly interpolates between two values.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.Log10E">
      <summary>Represents the log base ten of e.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.Log2E">
      <summary>Represents the log base two of e.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Max(System.Single,System.Single)">
      <summary>Returns the greater of two values.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Min(System.Single,System.Single)">
      <summary>Returns the lesser of two values.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.Pi">
      <summary>Represents the value of pi.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.PiOver2">
      <summary>Represents the value of pi divided by two.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.PiOver4">
      <summary>Represents the value of pi divided by four.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.SmoothStep(System.Single,System.Single,System.Single)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.ToDegrees(System.Single)">
      <summary>Converts radians to degrees.</summary>
      <param name="radians">The angle in radians.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.ToRadians(System.Single)">
      <summary>Converts degrees to radians.</summary>
      <param name="degrees">The angle in degrees.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.TwoPi">
      <summary>Represents the value of pi times two.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.WrapAngle(System.Single)">
      <summary>Reduces a given angle to a value between π and -π.</summary>
      <param name="angle">The angle to reduce, in radians.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Matrix">
      <summary>Defines a matrix.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of Matrix.</summary>
      <param name="m11">Value to initialize m11 to.</param>
      <param name="m12">Value to initialize m12 to.</param>
      <param name="m13">Value to initialize m13 to.</param>
      <param name="m14">Value to initialize m14 to.</param>
      <param name="m21">Value to initialize m21 to.</param>
      <param name="m22">Value to initialize m22 to.</param>
      <param name="m23">Value to initialize m23 to.</param>
      <param name="m24">Value to initialize m24 to.</param>
      <param name="m31">Value to initialize m31 to.</param>
      <param name="m32">Value to initialize m32 to.</param>
      <param name="m33">Value to initialize m33 to.</param>
      <param name="m34">Value to initialize m34 to.</param>
      <param name="m41">Value to initialize m41 to.</param>
      <param name="m42">Value to initialize m42 to.</param>
      <param name="m43">Value to initialize m43 to.</param>
      <param name="m44">Value to initialize m44 to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Add(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Adds a matrix to another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Add(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Adds a matrix to another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <param name="result">[OutAttribute] Resulting matrix.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Backward">
      <summary>Gets and sets the backward vector of the Matrix.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateBillboard(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Nullable{Microsoft.Xna.Framework.Vector3})">
      <summary>Creates a spherical billboard that rotates around a specified object position.</summary>
      <param name="objectPosition">Position of the object the billboard will rotate around.</param>
      <param name="cameraPosition">Position of the camera.</param>
      <param name="cameraUpVector">The up vector of the camera.</param>
      <param name="cameraForwardVector">Optional forward vector of the camera.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateBillboard(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Nullable{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a spherical billboard that rotates around a specified object position.</summary>
      <param name="objectPosition">Position of the object the billboard will rotate around.</param>
      <param name="cameraPosition">Position of the camera.</param>
      <param name="cameraUpVector">The up vector of the camera.</param>
      <param name="cameraForwardVector">Optional forward vector of the camera.</param>
      <param name="result">[OutAttribute] The created billboard matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateConstrainedBillboard(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Nullable{Microsoft.Xna.Framework.Vector3},System.Nullable{Microsoft.Xna.Framework.Vector3})">
      <summary>Creates a cylindrical billboard that rotates around a specified axis.</summary>
      <param name="objectPosition">Position of the object the billboard will rotate around.</param>
      <param name="cameraPosition">Position of the camera.</param>
      <param name="rotateAxis">Axis to rotate the billboard around.</param>
      <param name="cameraForwardVector">Optional forward vector of the camera.</param>
      <param name="objectForwardVector">Optional forward vector of the object.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateConstrainedBillboard(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Nullable{Microsoft.Xna.Framework.Vector3},System.Nullable{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a cylindrical billboard that rotates around a specified axis.</summary>
      <param name="objectPosition">Position of the object the billboard will rotate around.</param>
      <param name="cameraPosition">Position of the camera.</param>
      <param name="rotateAxis">Axis to rotate the billboard around.</param>
      <param name="cameraForwardVector">Optional forward vector of the camera.</param>
      <param name="objectForwardVector">Optional forward vector of the object.</param>
      <param name="result">[OutAttribute] The created billboard matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Creates a new Matrix that rotates around an arbitrary vector.</summary>
      <param name="axis">The axis to rotate around.</param>
      <param name="angle">The angle to rotate around the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a new Matrix that rotates around an arbitrary vector.</summary>
      <param name="axis">The axis to rotate around.</param>
      <param name="angle">The angle to rotate around the vector.</param>
      <param name="result">[OutAttribute] The created Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromQuaternion(Microsoft.Xna.Framework.Quaternion)">
      <summary>Creates a rotation Matrix from a Quaternion.</summary>
      <param name="quaternion">Quaternion to create the Matrix from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromQuaternion(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a rotation Matrix from a Quaternion.</summary>
      <param name="quaternion">Quaternion to create the Matrix from.</param>
      <param name="result">[OutAttribute] The created Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Creates a new rotation matrix from a specified yaw, pitch, and roll.</summary>
      <param name="yaw">Angle of rotation, in radians, around the y-axis.</param>
      <param name="pitch">Angle of rotation, in radians, around the x-axis.</param>
      <param name="roll">Angle of rotation, in radians, around the z-axis.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Fills in a rotation matrix from a specified yaw, pitch, and roll.</summary>
      <param name="yaw">Angle of rotation, in radians, around the y-axis.</param>
      <param name="pitch">Angle of rotation, in radians, around the x-axis.</param>
      <param name="roll">Angle of rotation, in radians, around the z-axis.</param>
      <param name="result">[OutAttribute] An existing matrix filled in to represent the specified yaw, pitch, and roll.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateLookAt(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a view matrix.</summary>
      <param name="cameraPosition">The position of the camera.</param>
      <param name="cameraTarget">The target towards which the camera is pointing.</param>
      <param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateLookAt(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a view matrix.</summary>
      <param name="cameraPosition">The position of the camera.</param>
      <param name="cameraTarget">The target towards which the camera is pointing.</param>
      <param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param>
      <param name="result">[OutAttribute] The created view matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds an orthogonal projection matrix.</summary>
      <param name="width">Width of the view volume.</param>
      <param name="height">Height of the view volume.</param>
      <param name="zNearPlane">Minimum z-value of the view volume.</param>
      <param name="zFarPlane">Maximum z-value of the view volume.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Builds an orthogonal projection matrix.</summary>
      <param name="width">Width of the view volume.</param>
      <param name="height">Height of the view volume.</param>
      <param name="zNearPlane">Minimum z-value of the view volume.</param>
      <param name="zFarPlane">Maximum z-value of the view volume.</param>
      <param name="result">[OutAttribute] The projection matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a customized, orthogonal projection matrix.</summary>
      <param name="left">Minimum x-value of the view volume.</param>
      <param name="right">Maximum x-value of the view volume.</param>
      <param name="bottom">Minimum y-value of the view volume.</param>
      <param name="top">Maximum y-value of the view volume.</param>
      <param name="zNearPlane">Minimum z-value of the view volume.</param>
      <param name="zFarPlane">Maximum z-value of the view volume.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Builds a customized, orthogonal projection matrix.</summary>
      <param name="left">Minimum x-value of the view volume.</param>
      <param name="right">Maximum x-value of the view volume.</param>
      <param name="bottom">Minimum y-value of the view volume.</param>
      <param name="top">Maximum y-value of the view volume.</param>
      <param name="zNearPlane">Minimum z-value of the view volume.</param>
      <param name="zFarPlane">Maximum z-value of the view volume.</param>
      <param name="result">[OutAttribute] The projection matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a perspective projection matrix and returns the result by value.</summary>
      <param name="width">Width of the view volume at the near view plane.</param>
      <param name="height">Height of the view volume at the near view plane.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to the far view plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Builds a perspective projection matrix and returns the result by reference.</summary>
      <param name="width">Width of the view volume at the near view plane.</param>
      <param name="height">Height of the view volume at the near view plane.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to the far view plane.</param>
      <param name="result">[OutAttribute] The projection matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a perspective projection matrix based on a field of view and returns by value.</summary>
      <param name="fieldOfView">Field of view in the y direction, in radians.</param>
      <param name="aspectRatio">Aspect ratio, defined as view space width divided by height. To match the aspect ratio of the viewport, the property AspectRatio.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to the far view plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Builds a perspective projection matrix based on a field of view and returns by reference.</summary>
      <param name="fieldOfView">Field of view in the y direction, in radians.</param>
      <param name="aspectRatio">Aspect ratio, defined as view space width divided by height. To match the aspect ratio of the viewport, the property AspectRatio.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to the far view plane.</param>
      <param name="result">[OutAttribute] The perspective projection matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a customized, perspective projection matrix.</summary>
      <param name="left">Minimum x-value of the view volume at the near view plane.</param>
      <param name="right">Maximum x-value of the view volume at the near view plane.</param>
      <param name="bottom">Minimum y-value of the view volume at the near view plane.</param>
      <param name="top">Maximum y-value of the view volume at the near view plane.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to of the far view plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Builds a customized, perspective projection matrix.</summary>
      <param name="left">Minimum x-value of the view volume at the near view plane.</param>
      <param name="right">Maximum x-value of the view volume at the near view plane.</param>
      <param name="bottom">Minimum y-value of the view volume at the near view plane.</param>
      <param name="top">Maximum y-value of the view volume at the near view plane.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to of the far view plane.</param>
      <param name="result">[OutAttribute] The created projection matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateReflection(Microsoft.Xna.Framework.Plane)">
      <summary>Creates a Matrix that reflects the coordinate system about a specified Plane.</summary>
      <param name="value">The Plane about which to create a reflection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateReflection(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Fills in an existing Matrix so that it reflects the coordinate system about a specified Plane.</summary>
      <param name="value">The Plane about which to create a reflection.</param>
      <param name="result">[OutAttribute] A Matrix that creates the reflection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationX(System.Single)">
      <summary>Returns a matrix that can be used to rotate a set of vertices around the x-axis.</summary>
      <param name="radians">The amount, in radians, in which to rotate around the x-axis. Note that you can use ToRadians to convert degrees to radians.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationX(System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Populates data into a user-specified matrix that can be used to rotate a set of vertices around the x-axis.</summary>
      <param name="radians">The amount, in radians, in which to rotate around the x-axis. Note that you can use ToRadians to convert degrees to radians.</param>
      <param name="result">[OutAttribute] The matrix in which to place the calculated data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationY(System.Single)">
      <summary>Returns a matrix that can be used to rotate a set of vertices around the y-axis.</summary>
      <param name="radians">The amount, in radians, in which to rotate around the y-axis. Note that you can use ToRadians to convert degrees to radians.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationY(System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Populates data into a user-specified matrix that can be used to rotate a set of vertices around the y-axis.</summary>
      <param name="radians">The amount, in radians, in which to rotate around the y-axis. Note that you can use ToRadians to convert degrees to radians.</param>
      <param name="result">[OutAttribute] The matrix in which to place the calculated data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationZ(System.Single)">
      <summary>Returns a matrix that can be used to rotate a set of vertices around the z-axis.</summary>
      <param name="radians">The amount, in radians, in which to rotate around the z-axis. Note that you can use ToRadians to convert degrees to radians.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationZ(System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Populates data into a user-specified matrix that can be used to rotate a set of vertices around the z-axis.</summary>
      <param name="radians">The amount, in radians, in which to rotate around the z-axis. Note that you can use ToRadians to convert degrees to radians.</param>
      <param name="result">[OutAttribute] The rotation matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a scaling Matrix.</summary>
      <param name="scales">Amounts to scale by on the x, y, and z axes.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a scaling Matrix.</summary>
      <param name="scales">Amounts to scale by on the x, y, and z axes.</param>
      <param name="result">[OutAttribute] The created scaling Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single)">
      <summary>Creates a scaling Matrix.</summary>
      <param name="scale">Amount to scale by.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a scaling Matrix.</summary>
      <param name="scale">Value to scale by.</param>
      <param name="result">[OutAttribute] The created scaling Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single,System.Single,System.Single)">
      <summary>Creates a scaling Matrix.</summary>
      <param name="xScale">Value to scale by on the x-axis.</param>
      <param name="yScale">Value to scale by on the y-axis.</param>
      <param name="zScale">Value to scale by on the z-axis.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a scaling Matrix.</summary>
      <param name="xScale">Value to scale by on the x-axis.</param>
      <param name="yScale">Value to scale by on the y-axis.</param>
      <param name="zScale">Value to scale by on the z-axis.</param>
      <param name="result">[OutAttribute] The created scaling Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateShadow(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Plane)">
      <summary>Creates a Matrix that flattens geometry into a specified Plane as if casting a shadow from a specified light source.</summary>
      <param name="lightDirection">A Vector3 specifying the direction from which the light that will cast the shadow is coming.</param>
      <param name="plane">The Plane onto which the new matrix should flatten geometry so as to cast a shadow.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateShadow(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Fills in a Matrix to flatten geometry into a specified Plane as if casting a shadow from a specified light source.</summary>
      <param name="lightDirection">A Vector3 specifying the direction from which the light that will cast the shadow is coming.</param>
      <param name="plane">The Plane onto which the new matrix should flatten geometry so as to cast a shadow.</param>
      <param name="result">[OutAttribute] A Matrix that can be used to flatten geometry onto the specified plane from the specified direction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a translation Matrix.</summary>
      <param name="position">Amounts to translate by on the x, y, and z axes.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a translation Matrix.</summary>
      <param name="position">Amounts to translate by on the x, y, and z axes.</param>
      <param name="result">[OutAttribute] The created translation Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(System.Single,System.Single,System.Single)">
      <summary>Creates a translation Matrix.</summary>
      <param name="xPosition">Value to translate by on the x-axis.</param>
      <param name="yPosition">Value to translate by on the y-axis.</param>
      <param name="zPosition">Value to translate by on the z-axis.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a translation Matrix.</summary>
      <param name="xPosition">Value to translate by on the x-axis.</param>
      <param name="yPosition">Value to translate by on the y-axis.</param>
      <param name="zPosition">Value to translate by on the z-axis.</param>
      <param name="result">[OutAttribute] The created translation Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateWorld(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a world matrix with the specified parameters.</summary>
      <param name="position">Position of the object. This value is used in translation operations.</param>
      <param name="forward">Forward direction of the object.</param>
      <param name="up">Upward direction of the object; usually [0, 1, 0].</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateWorld(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a world matrix with the specified parameters.</summary>
      <param name="position">Position of the object. This value is used in translation operations.</param>
      <param name="forward">Forward direction of the object.</param>
      <param name="up">Upward direction of the object; usually [0, 1, 0].</param>
      <param name="result">[OutAttribute] The created world matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Decompose(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Extracts the scalar, translation, and rotation components from a 3D scale/rotate/translate (SRT) Matrix.  Reference page contains code sample.</summary>
      <param name="scale">[OutAttribute] The scalar component of the transform matrix, expressed as a Vector3.</param>
      <param name="rotation">[OutAttribute] The rotation component of the transform matrix, expressed as a Quaternion.</param>
      <param name="translation">[OutAttribute] The translation component of the transform matrix, expressed as a Vector3.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Determinant">
      <summary>Calculates the determinant of the matrix.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Divides the components of a matrix by the corresponding components of another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Divides the components of a matrix by a scalar.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="divider">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Divides the components of a matrix by the corresponding components of another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">The divisor.</param>
      <param name="result">[OutAttribute] Result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix@,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Divides the components of a matrix by a scalar.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="divider">The divisor.</param>
      <param name="result">[OutAttribute] Result of the division.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Down">
      <summary>Gets and sets the down vector of the Matrix.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Equals(Microsoft.Xna.Framework.Matrix)">
      <summary>Determines whether the specified Object is equal to the Matrix.</summary>
      <param name="other">The Object to compare with the current Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Forward">
      <summary>Gets and sets the forward vector of the Matrix.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.GetHashCode">
      <summary>Gets the hash code of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Identity">
      <summary>Returns an instance of the identity matrix.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Invert(Microsoft.Xna.Framework.Matrix)">
      <summary>Calculates the inverse of a matrix.</summary>
      <param name="matrix">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Invert(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Calculates the inverse of a matrix.</summary>
      <param name="matrix">The source matrix.</param>
      <param name="result">[OutAttribute] The inverse of matrix. The same matrix can be used for both arguments.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Left">
      <summary>Gets and sets the left vector of the Matrix.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Lerp(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Linearly interpolates between the corresponding values of two matrices.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <param name="amount">Interpolation value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Lerp(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Linearly interpolates between the corresponding values of two matrices.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <param name="amount">Interpolation value.</param>
      <param name="result">[OutAttribute] Resulting matrix.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M11">
      <summary>Value at row 1 column 1 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M12">
      <summary>Value at row 1 column 2 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M13">
      <summary>Value at row 1 column 3 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M14">
      <summary>Value at row 1 column 4 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M21">
      <summary>Value at row 2 column 1 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M22">
      <summary>Value at row 2 column 2 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M23">
      <summary>Value at row 2 column 3 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M24">
      <summary>Value at row 2 column 4 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M31">
      <summary>Value at row 3 column 1 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M32">
      <summary>Value at row 3 column 2 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M33">
      <summary>Value at row 3 column 3 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M34">
      <summary>Value at row 3 column 4 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M41">
      <summary>Value at row 4 column 1 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M42">
      <summary>Value at row 4 column 2 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M43">
      <summary>Value at row 4 column 3 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M44">
      <summary>Value at row 4 column 4 of the matrix.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Multiplies a matrix by another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Multiplies a matrix by a scalar value.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Multiplies a matrix by another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <param name="result">[OutAttribute] Result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix@,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Multiplies a matrix by a scalar value.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="scaleFactor">Scalar value.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Negate(Microsoft.Xna.Framework.Matrix)">
      <summary>Negates individual elements of a matrix.</summary>
      <param name="matrix">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Negate(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Negates individual elements of a matrix.</summary>
      <param name="matrix">Source matrix.</param>
      <param name="result">[OutAttribute] Negated matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Addition(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Adds a matrix to another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Division(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Divides the components of a matrix by the corresponding components of another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Division(Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Divides the components of a matrix by a scalar.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="divider">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Equality(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Compares a matrix for equality with another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Inequality(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Tests a matrix for inequality with another matrix.</summary>
      <param name="matrix1">The matrix on the left of the equal sign.</param>
      <param name="matrix2">The matrix on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Multiply(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Multiplies a matrix by another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Multiply(Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Multiplies a matrix by a scalar value.</summary>
      <param name="matrix">Source matrix.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Multiply(System.Single,Microsoft.Xna.Framework.Matrix)">
      <summary>Multiplies a matrix by a scalar value.</summary>
      <param name="scaleFactor">Scalar value.</param>
      <param name="matrix">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Subtraction(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Subtracts matrices.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_UnaryNegation(Microsoft.Xna.Framework.Matrix)">
      <summary>Negates individual elements of a matrix.</summary>
      <param name="matrix1">Source matrix.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Right">
      <summary>Gets and sets the right vector of the Matrix.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Subtract(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Subtracts matrices.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Subtract(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Subtracts matrices.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <param name="result">[OutAttribute] Result of the subtraction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.ToString">
      <summary>Retrieves a string representation of the current object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Transform(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a Matrix by applying a Quaternion rotation.</summary>
      <param name="value">The Matrix to transform.</param>
      <param name="rotation">The rotation to apply, expressed as a Quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Transform(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Transforms a Matrix by applying a Quaternion rotation.</summary>
      <param name="value">The Matrix to transform.</param>
      <param name="rotation">The rotation to apply, expressed as a Quaternion.</param>
      <param name="result">[OutAttribute] An existing Matrix filled in with the result of the transform.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Translation">
      <summary>Gets and sets the translation vector of the Matrix.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Transpose(Microsoft.Xna.Framework.Matrix)">
      <summary>Transposes the rows and columns of a matrix.</summary>
      <param name="matrix">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Transpose(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Transposes the rows and columns of a matrix.</summary>
      <param name="matrix">Source matrix.</param>
      <param name="result">[OutAttribute] Transposed matrix.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Up">
      <summary>Gets and sets the up vector of the Matrix.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Plane">
      <summary>Defines a plane.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a new instance of Plane.</summary>
      <param name="point1">One point of a triangle defining the Plane.</param>
      <param name="point2">One point of a triangle defining the Plane.</param>
      <param name="point3">One point of a triangle defining the Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Creates a new instance of Plane.</summary>
      <param name="normal">The normal vector to the Plane.</param>
      <param name="d">The Plane's distance along its normal from the origin.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Creates a new instance of Plane.</summary>
      <param name="value">Vector4 with X, Y, and Z components defining the normal of the Plane. The W component defines the distance of the Plane along the normal from the origin.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a new instance of Plane.</summary>
      <param name="a">X component of the normal defining the Plane.</param>
      <param name="b">Y component of the normal defining the Plane.</param>
      <param name="c">Z component of the normal defining the Plane.</param>
      <param name="d">Distance of the Plane along its normal from the origin.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Plane.D">
      <summary>The distance of the Plane along its normal from the origin.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Dot(Microsoft.Xna.Framework.Vector4)">
      <summary>Calculates the dot product of a specified Vector4 and this Plane.</summary>
      <param name="value">The Vector4 to multiply this Plane by.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Dot(Microsoft.Xna.Framework.Vector4@,System.Single@)">
      <summary>Calculates the dot product of a specified Vector4 and this Plane.</summary>
      <param name="value">The Vector4 to multiply this Plane by.</param>
      <param name="result">[OutAttribute] The dot product of the specified Vector4 and this Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.DotCoordinate(Microsoft.Xna.Framework.Vector3)">
      <summary>Returns the dot product of a specified Vector3 and the Normal vector of this Plane plus the distance (D) value of the Plane.</summary>
      <param name="value">The Vector3 to multiply by.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.DotCoordinate(Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>Returns the dot product of a specified Vector3 and the Normal vector of this Plane plus the distance (D) value of the Plane.</summary>
      <param name="value">The Vector3 to multiply by.</param>
      <param name="result">[OutAttribute] The resulting value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.DotNormal(Microsoft.Xna.Framework.Vector3)">
      <summary>Returns the dot product of a specified Vector3 and the Normal vector of this Plane.</summary>
      <param name="value">The Vector3 to multiply by.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.DotNormal(Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>Returns the dot product of a specified Vector3 and the Normal vector of this Plane.</summary>
      <param name="value">The Vector3 to multiply by.</param>
      <param name="result">[OutAttribute] The resulting dot product.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Equals(Microsoft.Xna.Framework.Plane)">
      <summary>Determines whether the specified Plane is equal to the Plane.</summary>
      <param name="other">The Plane to compare with the current Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to the Plane.</summary>
      <param name="obj">The Object to compare with the current Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the current Plane intersects a specified BoundingBox.</summary>
      <param name="box">The BoundingBox to test for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
      <summary>Checks whether the current Plane intersects a BoundingBox.</summary>
      <param name="box">The BoundingBox to check for intersection with.</param>
      <param name="result">[OutAttribute] An enumeration indicating whether the Plane intersects the BoundingBox.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the current Plane intersects a specified BoundingFrustum.</summary>
      <param name="frustum">The BoundingFrustum to check for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current Plane intersects a specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
      <summary>Checks whether the current Plane intersects a BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
      <param name="result">[OutAttribute] An enumeration indicating whether the Plane intersects the BoundingSphere.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Plane.Normal">
      <summary>The normal vector of the Plane.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Normalize">
      <summary>Changes the coefficients of the Normal vector of this Plane to make it of unit length.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Normalize(Microsoft.Xna.Framework.Plane)">
      <summary>Changes the coefficients of the Normal vector of a Plane to make it of unit length.</summary>
      <param name="value">The Plane to normalize.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Normalize(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Plane@)">
      <summary>Changes the coefficients of the Normal vector of a Plane to make it of unit length.</summary>
      <param name="value">The Plane to normalize.</param>
      <param name="result">[OutAttribute] An existing plane Plane filled in with a normalized version of the specified plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.op_Equality(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Plane)">
      <summary>Determines whether two instances of Plane are equal.</summary>
      <param name="lhs">The object to the left of the equality operator.</param>
      <param name="rhs">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.op_Inequality(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Plane)">
      <summary>Determines whether two instances of Plane are not equal.</summary>
      <param name="lhs">The object to the left of the inequality operator.</param>
      <param name="rhs">The object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.ToString">
      <summary>Returns a String that represents the current Plane.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a normalized Plane by a Matrix.</summary>
      <param name="plane">The normalized Plane to transform. This Plane must already be normalized, so that its Normal vector is of unit length, before this method is called.</param>
      <param name="matrix">The transform Matrix to apply to the Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a normalized Plane by a Quaternion rotation.</summary>
      <param name="plane">The normalized Plane to transform. This Plane must already be normalized, so that its Normal vector is of unit length, before this method is called.</param>
      <param name="rotation">The Quaternion rotation to apply to the Plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Plane@)">
      <summary>Transforms a normalized Plane by a Matrix.</summary>
      <param name="plane">The normalized Plane to transform. This Plane must already be normalized, so that its Normal vector is of unit length, before this method is called.</param>
      <param name="matrix">The transform Matrix to apply to the Plane.</param>
      <param name="result">[OutAttribute] An existing Plane filled in with the results of applying the transform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Plane@)">
      <summary>Transforms a normalized Plane by a Quaternion rotation.</summary>
      <param name="plane">The normalized Plane to transform. This Plane must already be normalized, so that its Normal vector is of unit length, before this method is called.</param>
      <param name="rotation">The Quaternion rotation to apply to the Plane.</param>
      <param name="result">[OutAttribute] An existing Plane filled in with the results of applying the rotation.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.PlaneIntersectionType">
      <summary>Describes the intersection between a plane and a bounding volume.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.PlaneIntersectionType.Back">
      <summary>There is no intersection, and the bounding volume is in the negative half-space of the Plane.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.PlaneIntersectionType.Front">
      <summary>There is no intersection, and the bounding volume is in the positive half-space of the Plane.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.PlaneIntersectionType.Intersecting">
      <summary>The Plane is intersected.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.PlayerIndex">
      <summary>Specifies the game controller associated with a player.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.PlayerIndex.Four">
      <summary>The fourth controller.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.PlayerIndex.One">
      <summary>The first controller.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.PlayerIndex.Three">
      <summary>The third controller.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.PlayerIndex.Two">
      <summary>The second controller.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Point">
      <summary>Defines a point in 2D space.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of Point.</summary>
      <param name="x">The x-coordinate of the Point.</param>
      <param name="y">The y-coordinate of the Point.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.Equals(Microsoft.Xna.Framework.Point)">
      <summary>Determines whether two Point instances are equal.</summary>
      <param name="other">The Point to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.Equals(System.Object)">
      <summary>Determines whether two Point instances are equal.</summary>
      <param name="obj">The object to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.op_Equality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
      <summary>Determines whether two Point instances are equal.</summary>
      <param name="a">Point on the left side of the equal sign.</param>
      <param name="b">Point on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.op_Inequality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
      <summary>Determines whether two Point instances are not equal.</summary>
      <param name="a">The Point on the left side of the equal sign.</param>
      <param name="b">The Point on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.ToString">
      <summary>Returns a String that represents the current Point.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Point.X">
      <summary>Specifies the x-coordinate of the Point.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Point.Y">
      <summary>Specifies the y-coordinate of the Point.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Point.Zero">
      <summary>Returns the point (0,0).</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Quaternion">
      <summary>Defines a four-dimensional vector (x,y,z,w), which is used to efficiently rotate an object about the (x, y, z) vector by the angle theta, where w = cos(theta/2).</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Initializes a new instance of Quaternion.</summary>
      <param name="vectorPart">The vector component of the quaternion.</param>
      <param name="scalarPart">The rotation component of the quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of Quaternion.</summary>
      <param name="x">The x-value of the quaternion.</param>
      <param name="y">The y-value of the quaternion.</param>
      <param name="z">The z-value of the quaternion.</param>
      <param name="w">The w-value of the quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Add(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Adds two Quaternions.</summary>
      <param name="quaternion1">Quaternion to add.</param>
      <param name="quaternion2">Quaternion to add.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Add(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Adds two Quaternions.</summary>
      <param name="quaternion1">Quaternion to add.</param>
      <param name="quaternion2">Quaternion to add.</param>
      <param name="result">[OutAttribute] Result of adding the Quaternions.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Concatenate(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Concatenates two Quaternions; the result represents the value1 rotation followed by the value2 rotation.</summary>
      <param name="value1">The first Quaternion rotation in the series.</param>
      <param name="value2">The second Quaternion rotation in the series.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Concatenate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Concatenates two Quaternions; the result represents the value1 rotation followed by the value2 rotation.</summary>
      <param name="value1">The first Quaternion rotation in the series.</param>
      <param name="value2">The second Quaternion rotation in the series.</param>
      <param name="result">[OutAttribute] The Quaternion rotation representing the concatenation of value1 followed by value2.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Conjugate">
      <summary>Transforms this Quaternion into its conjugate.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Conjugate(Microsoft.Xna.Framework.Quaternion)">
      <summary>Returns the conjugate of a specified Quaternion.</summary>
      <param name="value">The Quaternion of which to return the conjugate.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Conjugate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Returns the conjugate of a specified Quaternion.</summary>
      <param name="value">The Quaternion of which to return the conjugate.</param>
      <param name="result">[OutAttribute] An existing Quaternion filled in to be the conjugate of the specified one.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Creates a Quaternion from a vector and an angle to rotate about the vector.</summary>
      <param name="axis">The vector to rotate around.</param>
      <param name="angle">The angle to rotate around the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Creates a Quaternion from a vector and an angle to rotate about the vector.</summary>
      <param name="axis">The vector to rotate around.</param>
      <param name="angle">The angle to rotate around the vector.</param>
      <param name="result">[OutAttribute] The created Quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix)">
      <summary>Creates a Quaternion from a rotation Matrix.</summary>
      <param name="matrix">The rotation Matrix to create the Quaternion from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Creates a Quaternion from a rotation Matrix.</summary>
      <param name="matrix">The rotation Matrix to create the Quaternion from.</param>
      <param name="result">[OutAttribute] The created Quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Creates a new Quaternion from specified yaw, pitch, and roll angles.</summary>
      <param name="yaw">The yaw angle, in radians, around the y-axis.</param>
      <param name="pitch">The pitch angle, in radians, around the x-axis.</param>
      <param name="roll">The roll angle, in radians, around the z-axis.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Creates a new Quaternion from specified yaw, pitch, and roll angles.</summary>
      <param name="yaw">The yaw angle, in radians, around the y-axis.</param>
      <param name="pitch">The pitch angle, in radians, around the x-axis.</param>
      <param name="roll">The roll angle, in radians, around the z-axis.</param>
      <param name="result">[OutAttribute] An existing Quaternion filled in to express the specified yaw, pitch, and roll angles.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Divide(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Divides a Quaternion by another Quaternion.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Divide(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Divides a Quaternion by another Quaternion.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">The divisor.</param>
      <param name="result">[OutAttribute] Result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Dot(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Calculates the dot product of two Quaternions.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">Source Quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Dot(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single@)">
      <summary>Calculates the dot product of two Quaternions.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">Source Quaternion.</param>
      <param name="result">[OutAttribute] Dot product of the Quaternions.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Equals(Microsoft.Xna.Framework.Quaternion)">
      <summary>Determines whether the specified Object is equal to the Quaternion.</summary>
      <param name="other">The Quaternion to compare with the current Quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to make the comparison with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.GetHashCode">
      <summary>Get the hash code of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Quaternion.Identity">
      <summary>Returns a Quaternion representing no rotation.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Inverse(Microsoft.Xna.Framework.Quaternion)">
      <summary>Returns the inverse of a Quaternion.</summary>
      <param name="quaternion">Source Quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Inverse(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Returns the inverse of a Quaternion.</summary>
      <param name="quaternion">Source Quaternion.</param>
      <param name="result">[OutAttribute] The inverse of the Quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Length">
      <summary>Calculates the length of a Quaternion.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.LengthSquared">
      <summary>Calculates the length squared of a Quaternion.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Lerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>Linearly interpolates between two quaternions.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <param name="amount">Value indicating how far to interpolate between the quaternions.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Lerp(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Linearly interpolates between two quaternions.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <param name="amount">Value indicating how far to interpolate between the quaternions.</param>
      <param name="result">[OutAttribute] The resulting quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Multiplies two quaternions.</summary>
      <param name="quaternion1">The quaternion on the left of the multiplication.</param>
      <param name="quaternion2">The quaternion on the right of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>Multiplies a quaternion by a scalar value.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Multiplies two quaternions.</summary>
      <param name="quaternion1">The quaternion on the left of the multiplication.</param>
      <param name="quaternion2">The quaternion on the right of the multiplication.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Multiplies a quaternion by a scalar value.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="scaleFactor">Scalar value.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Negate(Microsoft.Xna.Framework.Quaternion)">
      <summary>Flips the sign of each component of the quaternion.</summary>
      <param name="quaternion">Source quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Negate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Flips the sign of each component of the quaternion.</summary>
      <param name="quaternion">Source quaternion.</param>
      <param name="result">[OutAttribute] Negated quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Normalize">
      <summary>Divides each component of the quaternion by the length of the quaternion.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Normalize(Microsoft.Xna.Framework.Quaternion)">
      <summary>Divides each component of the quaternion by the length of the quaternion.</summary>
      <param name="quaternion">Source quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Normalize(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Divides each component of the quaternion by the length of the quaternion.</summary>
      <param name="quaternion">Source quaternion.</param>
      <param name="result">[OutAttribute] Normalized quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Addition(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Adds two Quaternions.</summary>
      <param name="quaternion1">Quaternion to add.</param>
      <param name="quaternion2">Quaternion to add.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Division(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Divides a Quaternion by another Quaternion.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Equality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Compares two Quaternions for equality.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">Source Quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Inequality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Compare two Quaternions for inequality.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">Source Quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Multiplies two quaternions.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>Multiplies a quaternion by a scalar value.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Subtraction(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Subtracts a quaternion from another quaternion.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_UnaryNegation(Microsoft.Xna.Framework.Quaternion)">
      <summary>Flips the sign of each component of the quaternion.</summary>
      <param name="quaternion">Source quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Slerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>Interpolates between two quaternions, using spherical linear interpolation.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <param name="amount">Value that indicates how far to interpolate between the quaternions.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Slerp(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Interpolates between two quaternions, using spherical linear interpolation.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <param name="amount">Value that indicates how far to interpolate between the quaternions.</param>
      <param name="result">[OutAttribute] Result of the interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Subtract(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Subtracts a quaternion from another quaternion.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Subtract(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Subtracts a quaternion from another quaternion.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <param name="result">[OutAttribute] Result of the subtraction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.ToString">
      <summary>Retireves a string representation of the current object.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Quaternion.W">
      <summary>Specifies the rotation component of the quaternion.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Quaternion.X">
      <summary>Specifies the x-value of the vector component of the quaternion.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Quaternion.Y">
      <summary>Specifies the y-value of the vector component of the quaternion.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Quaternion.Z">
      <summary>Specifies the z-value of the vector component of the quaternion.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Ray">
      <summary>Defines a ray.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a new instance of Ray.</summary>
      <param name="position">The starting point of the Ray.</param>
      <param name="direction">Unit vector describing the direction of the Ray.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Ray.Direction">
      <summary>Unit vector specifying the direction the Ray is pointing.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Equals(Microsoft.Xna.Framework.Ray)">
      <summary>Determines whether the specified Ray is equal to the current Ray.</summary>
      <param name="other">The Ray to compare with the current Ray.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Equals(System.Object)">
      <summary>Determines whether two instances of Ray are equal.</summary>
      <param name="obj">The Object to compare with the current Ray.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the Ray intersects a specified BoundingBox.</summary>
      <param name="box">The BoundingBox to check for intersection with the Ray.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Nullable{System.Single}@)">
      <summary>Checks whether the current Ray intersects a BoundingBox.</summary>
      <param name="box">The BoundingBox to check for intersection with.</param>
      <param name="result">[OutAttribute] Distance at which the ray intersects the BoundingBox or null if there is no intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the Ray intersects a specified BoundingFrustum.</summary>
      <param name="frustum">The BoundingFrustum to check for intersection with the Ray.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the Ray intersects a specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with the Ray.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Nullable{System.Single}@)">
      <summary>Checks whether the current Ray intersects a BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
      <param name="result">[OutAttribute] Distance at which the ray intersects the BoundingSphere or null if there is no intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.Plane)">
      <summary>Determines whether this Ray intersects a specified Plane.</summary>
      <param name="plane">The Plane with which to calculate this Ray's intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.Plane@,System.Nullable{System.Single}@)">
      <summary>Determines whether this Ray intersects a specified Plane.</summary>
      <param name="plane">The Plane with which to calculate this Ray's intersection.</param>
      <param name="result">[OutAttribute] The distance at which this Ray intersects the specified Plane, or null if there is no intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.op_Equality(Microsoft.Xna.Framework.Ray,Microsoft.Xna.Framework.Ray)">
      <summary>Determines whether two instances of Ray are equal.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.op_Inequality(Microsoft.Xna.Framework.Ray,Microsoft.Xna.Framework.Ray)">
      <summary>Determines whether two instances of Ray are not equal.</summary>
      <param name="a">The object to the left of the inequality operator.</param>
      <param name="b">The object to the right of the inequality operator.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Ray.Position">
      <summary>Specifies the starting point of the Ray.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.ToString">
      <summary>Returns a String that represents the current Ray.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Rectangle">
      <summary>Defines a rectangle.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of Rectangle.</summary>
      <param name="x">The x-coordinate of the rectangle.</param>
      <param name="y">The y-coordinate of the rectangle.</param>
      <param name="width">Width of the rectangle.</param>
      <param name="height">Height of the rectangle.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Bottom">
      <summary>Returns the y-coordinate of the bottom of the rectangle.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Center">
      <summary>Gets the Point that specifies the center of the rectangle.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Point)">
      <summary>Determines whether this Rectangle contains a specified Point.</summary>
      <param name="value">The Point to evaluate.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Point@,System.Boolean@)">
      <summary>Determines whether this Rectangle contains a specified Point.</summary>
      <param name="value">The Point to evaluate.</param>
      <param name="result">[OutAttribute] true if the specified Point is contained within this Rectangle; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Rectangle)">
      <summary>Determines whether this Rectangle entirely contains a specified Rectangle.</summary>
      <param name="value">The Rectangle to evaluate.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Rectangle@,System.Boolean@)">
      <summary>Determines whether this Rectangle entirely contains a specified Rectangle.</summary>
      <param name="value">The Rectangle to evaluate.</param>
      <param name="result">[OutAttribute] On exit, is true if this Rectangle entirely contains the specified Rectangle, or false if not.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(System.Int32,System.Int32)">
      <summary>Determines whether this Rectangle contains a specified point represented by its x- and y-coordinates.</summary>
      <param name="x">The x-coordinate of the specified point.</param>
      <param name="y">The y-coordinate of the specified point.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Empty">
      <summary>Returns a Rectangle with all of its values set to zero.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Equals(Microsoft.Xna.Framework.Rectangle)">
      <summary>Determines whether the specified Object is equal to the Rectangle.</summary>
      <param name="other">The Object to compare with the current Rectangle.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to make the comparison with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Rectangle.Height">
      <summary>Specifies the height of the rectangle.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Inflate(System.Int32,System.Int32)">
      <summary>Pushes the edges of the Rectangle out by the horizontal and vertical values specified.</summary>
      <param name="horizontalAmount">Value to push the sides out by.</param>
      <param name="verticalAmount">Value to push the top and bottom out by.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Intersect(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
      <summary>Creates a Rectangle defining the area where one rectangle overlaps with another rectangle.</summary>
      <param name="value1">The first Rectangle to compare.</param>
      <param name="value2">The second Rectangle to compare.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Intersect(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@)">
      <summary>Creates a Rectangle defining the area where one rectangle overlaps with another rectangle.</summary>
      <param name="value1">The first Rectangle to compare.</param>
      <param name="value2">The second Rectangle to compare.</param>
      <param name="result">[OutAttribute] The area where the two first parameters overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Intersects(Microsoft.Xna.Framework.Rectangle)">
      <summary>Determines whether a specified Rectangle intersects with this Rectangle.</summary>
      <param name="value">The Rectangle to evaluate.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Intersects(Microsoft.Xna.Framework.Rectangle@,System.Boolean@)">
      <summary>Determines whether a specified Rectangle intersects with this Rectangle.</summary>
      <param name="value">The Rectangle to evaluate</param>
      <param name="result">[OutAttribute] true if the specified Rectangle intersects with this one; false otherwise.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.IsEmpty">
      <summary>Gets a value that indicates whether the Rectangle is empty.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Left">
      <summary>Returns the x-coordinate of the left side of the rectangle.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Location">
      <summary>Gets or sets the upper-left value of the Rectangle.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Offset(Microsoft.Xna.Framework.Point)">
      <summary>Changes the position of the Rectangle.</summary>
      <param name="amount">The values to adjust the position of the Rectangle by.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Offset(System.Int32,System.Int32)">
      <summary>Changes the position of the Rectangle.</summary>
      <param name="offsetX">Change in the x-position.</param>
      <param name="offsetY">Change in the y-position.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.op_Equality(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
      <summary>Compares two rectangles for equality.</summary>
      <param name="a">Source rectangle.</param>
      <param name="b">Source rectangle.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.op_Inequality(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
      <summary>Compares two rectangles for inequality.</summary>
      <param name="a">Source rectangle.</param>
      <param name="b">Source rectangle.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Right">
      <summary>Returns the x-coordinate of the right side of the rectangle.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Top">
      <summary>Returns the y-coordinate of the top of the rectangle.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.ToString">
      <summary>Retrieves a string representation of the current object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Union(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
      <summary>Creates a new Rectangle that exactly contains two other rectangles.</summary>
      <param name="value1">The first Rectangle to contain.</param>
      <param name="value2">The second Rectangle to contain.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Union(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@)">
      <summary>Creates a new Rectangle that exactly contains two other rectangles.</summary>
      <param name="value1">The first Rectangle to contain.</param>
      <param name="value2">The second Rectangle to contain.</param>
      <param name="result">[OutAttribute] The Rectangle that must be the union of the first two rectangles.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Rectangle.Width">
      <summary>Specifies the width of the rectangle.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Rectangle.X">
      <summary>Specifies the x-coordinate of the rectangle.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Rectangle.Y">
      <summary>Specifies the y-coordinate of the rectangle.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.TitleContainer">
      <summary>Provides file stream access to the title's default storage location.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.TitleContainer.OpenStream(System.String)">
      <summary>Returns a stream to an existing file in the default title storage location.</summary>
      <param name="name">The name of the file to open.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Vector2">
      <summary>Defines a vector with two components.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.#ctor(System.Single)">
      <summary>Creates a new instance of Vector2.</summary>
      <param name="value">Value to initialize both components to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of Vector2.</summary>
      <param name="x">Initial value for the x-component of the vector.</param>
      <param name="y">Initial value for the y-component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Add(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Add(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] Sum of the source vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Barycentric(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
      <summary>Returns a Vector2 containing the 2D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 2D triangle.</summary>
      <param name="value1">A Vector2 containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A Vector2 containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A Vector2 containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Barycentric(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Returns a Vector2 containing the 2D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 2D triangle.</summary>
      <param name="value1">A Vector2 containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A Vector2 containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A Vector2 containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
      <param name="result">[OutAttribute] The 2D Cartesian coordinates of the specified point are placed in this Vector2 on exit.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.CatmullRom(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.CatmullRom(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">[OutAttribute] A vector that is the result of the Catmull-Rom interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Clamp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Clamp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <param name="result">[OutAttribute] The clamped value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Distance(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Calculates the distance between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Distance(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)">
      <summary>Calculates the distance between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The distance between the vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.DistanceSquared(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Calculates the distance between two vectors squared.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.DistanceSquared(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)">
      <summary>Calculates the distance between two vectors squared.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The distance between the vectors squared.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">The divisor.</param>
      <param name="result">[OutAttribute] The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
      <param name="result">[OutAttribute] The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Calculates the dot product of two vectors. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)">
      <summary>Calculates the dot product of two vectors and writes the result to a user-specified variable. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The dot product of the two vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Equals(Microsoft.Xna.Framework.Vector2)">
      <summary>Determines whether the specified Object is equal to the Vector2.</summary>
      <param name="other">The Object to compare with the current Vector2.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to make the comparison with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.GetHashCode">
      <summary>Gets the hash code of the vector object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Hermite(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Hermite(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">[OutAttribute] The result of the Hermite spline interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Length">
      <summary>Calculates the length of the vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.LengthSquared">
      <summary>Calculates the length of the vector squared.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Performs a linear interpolation between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Performs a linear interpolation between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
      <param name="result">[OutAttribute] The result of the interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Max(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Max(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The maximized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Min(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Min(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The minimized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Negate(Microsoft.Xna.Framework.Vector2)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Negate(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
      <param name="result">[OutAttribute] Vector pointing in the opposite direction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Normalize">
      <summary>Turns the current vector into a unit vector. The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Normalize(Microsoft.Xna.Framework.Vector2)">
      <summary>Creates a unit vector from the specified vector. The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
      <param name="value">Source Vector2.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Normalize(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Creates a unit vector from the specified vector, writing the result to a user-specified variable. The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
      <param name="value">Source vector.</param>
      <param name="result">[OutAttribute] Normalized vector.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector2.One">
      <summary>Returns a Vector2 with both of its components set to one.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Division(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Division(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Equality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Tests vectors for equality.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Inequality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Tests vectors for inequality.</summary>
      <param name="value1">Vector to compare.</param>
      <param name="value2">Vector to compare.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Multiply(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector2)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="scaleFactor">Scalar value.</param>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Microsoft.Xna.Framework.Vector2)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Reflect(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Determines the reflect vector of the given vector and normal.</summary>
      <param name="vector">Source vector.</param>
      <param name="normal">Normal of vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Reflect(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Determines the reflect vector of the given vector and normal.</summary>
      <param name="vector">Source vector.</param>
      <param name="normal">Normal of vector.</param>
      <param name="result">[OutAttribute] The created reflect vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.SmoothStep(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.SmoothStep(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
      <param name="result">[OutAttribute] The interpolated value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Subtract(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Subtract(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The result of the subtraction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.ToString">
      <summary>Retrieves a string representation of the current object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms the vector (x, y, 0, 1) by the specified matrix.</summary>
      <param name="position">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a single Vector2, or the vector normal (x, y, 0, 0), by a specified Quaternion rotation.</summary>
      <param name="value">The vector to rotate.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Transforms a Vector2 by the given Matrix.</summary>
      <param name="position">The source Vector2.</param>
      <param name="matrix">The transformation Matrix.</param>
      <param name="result">[OutAttribute] The Vector2 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Transforms a Vector2, or the vector normal (x, y, 0, 0), by a specified Quaternion rotation.</summary>
      <param name="value">The vector to rotate.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="result">[OutAttribute] An existing Vector2 filled in with the result of the rotation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[])">
      <summary>Transforms an array of Vector2s by a specified Matrix.</summary>
      <param name="sourceArray">The array of Vector2s to transform.</param>
      <param name="matrix">The transform Matrix to apply.</param>
      <param name="destinationArray">An existing array into which the transformed Vector2s are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2[])">
      <summary>Transforms an array of Vector2s by a specified Quaternion.</summary>
      <param name="sourceArray">The array of Vector2s to transform.</param>
      <param name="rotation">The transform Matrix to use.</param>
      <param name="destinationArray">An existing array into which the transformed Vector2s are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)">
      <summary>Transforms a specified range in an array of Vector2s by a specified Matrix and places the results in a specified range in a destination array.</summary>
      <param name="sourceArray">The source array.</param>
      <param name="sourceIndex">The index of the first Vector2 to transform in the source array.</param>
      <param name="matrix">The Matrix to transform by.</param>
      <param name="destinationArray">The destination array into which the resulting Vector2s will be written.</param>
      <param name="destinationIndex">The index of the position in the destination array where the first result Vector2 should be written.</param>
      <param name="length">The number of Vector2s to be transformed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)">
      <summary>Transforms a specified range in an array of Vector2s by a specified Quaternion and places the results in a specified range in a destination array.</summary>
      <param name="sourceArray">The source array.</param>
      <param name="sourceIndex">The index of the first Vector2 to transform in the source array.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="destinationArray">The destination array into which the resulting Vector2s are written.</param>
      <param name="destinationIndex">The index of the position in the destination array where the first result Vector2 should be written.</param>
      <param name="length">The number of Vector2s to be transformed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a 2D vector normal by a matrix.</summary>
      <param name="normal">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Transforms a vector normal by a matrix.</summary>
      <param name="normal">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
      <param name="result">[OutAttribute] The Vector2 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[])">
      <summary>Transforms an array of Vector2 vector normals by a specified Matrix.</summary>
      <param name="sourceArray">The array of vector normals to transform.</param>
      <param name="matrix">The transform Matrix to apply.</param>
      <param name="destinationArray">An existing array into which the transformed vector normals are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)">
      <summary>Transforms a specified range in an array of Vector2 vector normals by a specified Matrix and places the results in a specified range in a destination array.</summary>
      <param name="sourceArray">The source array.</param>
      <param name="sourceIndex">The index of the first Vector2 to transform in the source array.</param>
      <param name="matrix">The Matrix to apply.</param>
      <param name="destinationArray">The destination array into which the resulting Vector2s are written.</param>
      <param name="destinationIndex">The index of the position in the destination array where the first result Vector2 should be written.</param>
      <param name="length">The number of vector normals to be transformed.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector2.UnitX">
      <summary>Returns the unit vector for the x-axis.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector2.UnitY">
      <summary>Returns the unit vector for the y-axis.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector2.X">
      <summary>Gets or sets the x-component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector2.Y">
      <summary>Gets or sets the y-component of the vector.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector2.Zero">
      <summary>Returns a Vector2 with all of its components set to zero.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Vector3">
      <summary>Defines a vector with three components.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.#ctor(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Initializes a new instance of Vector3.</summary>
      <param name="value">A vector containing the values to initialize x and y components with.</param>
      <param name="z">Initial value for the z-component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.#ctor(System.Single)">
      <summary>Creates a new instance of Vector3.</summary>
      <param name="value">Value to initialize each component to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of Vector3.</summary>
      <param name="x">Initial value for the x-component of the vector.</param>
      <param name="y">Initial value for the y-component of the vector.</param>
      <param name="z">Initial value for the z-component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Add(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Add(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] Sum of the source vectors.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Backward">
      <summary>Returns a unit Vector3 designating backward in a right-handed coordinate system (0, 0, 1).</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Barycentric(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
      <summary>Returns a Vector3 containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.</summary>
      <param name="value1">A Vector3 containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A Vector3 containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A Vector3 containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Barycentric(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Returns a Vector3 containing the 3D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 3D triangle.</summary>
      <param name="value1">A Vector3 containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A Vector3 containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A Vector3 containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
      <param name="result">[OutAttribute] The 3D Cartesian coordinates of the specified point are placed in this Vector3 on exit.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.CatmullRom(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.CatmullRom(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">[OutAttribute] A vector that is the result of the Catmull-Rom interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Clamp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Clamp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <param name="result">[OutAttribute] The clamped value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Cross(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Calculates the cross product of two vectors.</summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Cross(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Calculates the cross product of two vectors.</summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
      <param name="result">[OutAttribute] The cross product of the vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Distance(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Calculates the distance between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Distance(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>Calculates the distance between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The distance between the vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.DistanceSquared(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Calculates the distance between two vectors squared.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.DistanceSquared(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>Calculates the distance between two vectors squared.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The distance between the two vectors squared.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">The divisor.</param>
      <param name="result">[OutAttribute] The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">The divisor.</param>
      <param name="result">[OutAttribute] The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Dot(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Calculates the dot product of two vectors. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.</summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Dot(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>Calculates the dot product of two vectors and writes the result to a user-specified variable. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.</summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
      <param name="result">[OutAttribute] The dot product of the two vectors.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Down">
      <summary>Returns a unit Vector3 designating down (0, −1, 0).</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Equals(Microsoft.Xna.Framework.Vector3)">
      <summary>Determines whether the specified Object is equal to the Vector3.</summary>
      <param name="other">The Vector3 to compare with the current Vector3.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to make the comparison with.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Forward">
      <summary>Returns a unit Vector3 designating forward in a right-handed coordinate system(0, 0, −1).</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.GetHashCode">
      <summary>Gets the hash code of the vector object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Hermite(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Hermite(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">[OutAttribute] The result of the Hermite spline interpolation.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Left">
      <summary>Returns a unit Vector3 designating left (−1, 0, 0).</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Length">
      <summary>Calculates the length of the vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.LengthSquared">
      <summary>Calculates the length of the vector squared.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Performs a linear interpolation between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Performs a linear interpolation between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
      <param name="result">[OutAttribute] The result of the interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Max(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Max(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The maximized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Min(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Min(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The minimized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Negate(Microsoft.Xna.Framework.Vector3)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Negate(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
      <param name="result">[OutAttribute] Vector pointing in the opposite direction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Normalize">
      <summary>Turns the current vector into a unit vector. The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a unit vector from the specified vector. The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
      <param name="value">The source Vector3.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Creates a unit vector from the specified vector, writing the result to a user-specified variable. The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
      <param name="value">Source vector.</param>
      <param name="result">[OutAttribute] The normalized vector.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.One">
      <summary>Returns a Vector3 with ones in all of its components.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Addition(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Division(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Division(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value">Source vector.</param>
      <param name="divider">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Equality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Tests vectors for equality.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Inequality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Tests vectors for inequality.</summary>
      <param name="value1">Vector to compare.</param>
      <param name="value2">Vector to compare.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Multiply(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector3)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="scaleFactor">Scalar value.</param>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Subtraction(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_UnaryNegation(Microsoft.Xna.Framework.Vector3)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Reflect(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Returns the reflection of a vector off a surface that has the specified normal.  Reference page contains code sample.</summary>
      <param name="vector">Source vector.</param>
      <param name="normal">Normal of the surface.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Reflect(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Returns the reflection of a vector off a surface that has the specified normal.  Reference page contains code sample.</summary>
      <param name="vector">Source vector.</param>
      <param name="normal">Normal of the surface.</param>
      <param name="result">[OutAttribute] The reflected vector.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Right">
      <summary>Returns a unit Vector3 pointing to the right (1, 0, 0).</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.SmoothStep(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.SmoothStep(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Weighting value.</param>
      <param name="result">[OutAttribute] The interpolated value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Subtract(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Subtract(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The result of the subtraction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.ToString">
      <summary>Retrieves a string representation of the current object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a 3D vector by the given matrix.</summary>
      <param name="position">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a Vector3 by a specified Quaternion rotation.</summary>
      <param name="value">The Vector3 to rotate.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Transforms a Vector3 by the given Matrix.</summary>
      <param name="position">The source Vector3.</param>
      <param name="matrix">The transformation Matrix.</param>
      <param name="result">[OutAttribute] The transformed vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Transforms a Vector3 by a specified Quaternion rotation.</summary>
      <param name="value">The Vector3 to rotate.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="result">[OutAttribute] An existing Vector3 filled in with the results of the rotation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[])">
      <summary>Transforms a source array of Vector3s by a specified Matrix and writes the results to an existing destination array.</summary>
      <param name="sourceArray">The source array.</param>
      <param name="matrix">The transform Matrix to apply.</param>
      <param name="destinationArray">An existing destination array into which the transformed Vector3s are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3[])">
      <summary>Transforms a source array of Vector3s by a specified Quaternion rotation and writes the results to an existing destination array.</summary>
      <param name="sourceArray">The source array.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="destinationArray">An existing destination array into which the transformed Vector3s are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)">
      <summary>Applies a specified transform Matrix to a specified range of an array of Vector3s and writes the results into a specified range of a destination array.</summary>
      <param name="sourceArray">The source array.</param>
      <param name="sourceIndex">The index in the source array at which to start.</param>
      <param name="matrix">The transform Matrix to apply.</param>
      <param name="destinationArray">The existing destination array.</param>
      <param name="destinationIndex">The index in the destination array at which to start.</param>
      <param name="length">The number of Vector3s to transform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)">
      <summary>Applies a specified Quaternion rotation to a specified range of an array of Vector3s and writes the results into a specified range of a destination array.</summary>
      <param name="sourceArray">The source array.</param>
      <param name="sourceIndex">The index in the source array at which to start.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="destinationArray">The existing destination array.</param>
      <param name="destinationIndex">The index in the destination array at which to start.</param>
      <param name="length">The number of Vector3s to transform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a 3D vector normal by a matrix.</summary>
      <param name="normal">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Transforms a vector normal by a matrix.</summary>
      <param name="normal">The source vector.</param>
      <param name="matrix">The transformation Matrix.</param>
      <param name="result">[OutAttribute] The Vector3 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[])">
      <summary>Transforms an array of 3D vector normals by a specified Matrix.</summary>
      <param name="sourceArray">The array of Vector3 normals to transform.</param>
      <param name="matrix">The transform matrix to apply.</param>
      <param name="destinationArray">An existing Vector3 array into which the results of the transforms are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)">
      <summary>Transforms a specified range in an array of 3D vector normals by a specified Matrix and writes the results to a specified range in a destination array.</summary>
      <param name="sourceArray">The source array of Vector3 normals.</param>
      <param name="sourceIndex">The starting index in the source array.</param>
      <param name="matrix">The transform Matrix to apply.</param>
      <param name="destinationArray">The destination Vector3 array.</param>
      <param name="destinationIndex">The starting index in the destination array.</param>
      <param name="length">The number of vectors to transform.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.UnitX">
      <summary>Returns the x unit Vector3 (1, 0, 0).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.UnitY">
      <summary>Returns the y unit Vector3 (0, 1, 0).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.UnitZ">
      <summary>Returns the z unit Vector3 (0, 0, 1).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Up">
      <summary>Returns a unit vector designating up (0, 1, 0).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector3.X">
      <summary>Gets or sets the x-component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector3.Y">
      <summary>Gets or sets the y-component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector3.Z">
      <summary>Gets or sets the z-component of the vector.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Zero">
      <summary>Returns a Vector3 with all of its components set to zero.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Vector4">
      <summary>Defines a vector with four components.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
      <summary>Initializes a new instance of Vector4.</summary>
      <param name="value">A vector containing the values to initialize x and y components with.</param>
      <param name="z">Initial value for the z-component of the vector.</param>
      <param name="w">Initial value for the w-component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Initializes a new instance of Vector4.</summary>
      <param name="value">A vector containing the values to initialize x, y, and z components with.</param>
      <param name="w">Initial value for the w-component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(System.Single)">
      <summary>Creates a new instance of Vector4.</summary>
      <param name="value">Value to initialize each component to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of Vector4.</summary>
      <param name="x">Initial value for the x-component of the vector.</param>
      <param name="y">Initial value for the y-component of the vector.</param>
      <param name="z">Initial value for the z-component of the vector.</param>
      <param name="w">Initial value for the w-component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Add(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Add(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] Sum of the source vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Barycentric(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single,System.Single)">
      <summary>Returns a Vector4 containing the 4D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 4D triangle.</summary>
      <param name="value1">A Vector4 containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A Vector4 containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A Vector4 containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Barycentric(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Returns a Vector4 containing the 4D Cartesian coordinates of a point specified in Barycentric (areal) coordinates relative to a 4D triangle.</summary>
      <param name="value1">A Vector4 containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A Vector4 containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A Vector4 containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
      <param name="result">[OutAttribute] The 4D Cartesian coordinates of the specified point are placed in this Vector4 on exit.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.CatmullRom(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.CatmullRom(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">[OutAttribute] A vector that is the result of the Catmull-Rom interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Clamp(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Clamp(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <param name="result">[OutAttribute] The clamped value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Distance(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Calculates the distance between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Distance(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single@)">
      <summary>Calculates the distance between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The distance between the vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.DistanceSquared(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Calculates the distance between two vectors squared.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.DistanceSquared(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single@)">
      <summary>Calculates the distance between two vectors squared.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The distance between the two vectors squared.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">The divisor.</param>
      <param name="result">[OutAttribute] The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
      <param name="result">[OutAttribute] The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Dot(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Calculates the dot product of two vectors.</summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Dot(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single@)">
      <summary>Calculates the dot product of two vectors.</summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
      <param name="result">[OutAttribute] The dot product of the two vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Equals(Microsoft.Xna.Framework.Vector4)">
      <summary>Determines whether the specified Object is equal to the Vector4.</summary>
      <param name="other">The Vector4 to compare with the current Vector4.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.GetHashCode">
      <summary>Gets the hash code of this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Hermite(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Hermite(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">[OutAttribute] The result of the Hermite spline interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Length">
      <summary>Calculates the length of the vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.LengthSquared">
      <summary>Calculates the length of the vector squared.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Lerp(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Performs a linear interpolation between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Lerp(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Performs a linear interpolation between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
      <param name="result">[OutAttribute] The result of the interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Max(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Max(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The maximized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Min(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Min(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The minimized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Multiplies a vector by a scalar.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Negate(Microsoft.Xna.Framework.Vector4)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Negate(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
      <param name="result">[OutAttribute] Vector pointing in the opposite direction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Normalize">
      <summary>Turns the current vector into a unit vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Normalize(Microsoft.Xna.Framework.Vector4)">
      <summary>Creates a unit vector from the specified vector.</summary>
      <param name="vector">The source Vector4.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Normalize(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Returns a normalized version of the specified vector.</summary>
      <param name="vector">Source vector.</param>
      <param name="result">[OutAttribute] The normalized vector.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.One">
      <summary>Returns a Vector4 with all of its components set to one.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Addition(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Division(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Division(Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Equality(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Tests vectors for equality.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Inequality(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Tests vectors for inequality.</summary>
      <param name="value1">Vector to compare.</param>
      <param name="value2">Vector to compare.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Multiply(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Multiply(Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Multiplies a vector by a scalar.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector4)">
      <summary>Multiplies a vector by a scalar.</summary>
      <param name="scaleFactor">Scalar value.</param>
      <param name="value1">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Subtraction(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_UnaryNegation(Microsoft.Xna.Framework.Vector4)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.SmoothStep(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.SmoothStep(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">[OutAttribute] The interpolated value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Subtract(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Subtract(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The result of the subtraction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.ToString">
      <summary>Retrieves a string representation of the current object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a Vector2 by the given Matrix.</summary>
      <param name="position">The source Vector2.</param>
      <param name="matrix">The transformation Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a Vector2 by a specified Quaternion into a Vector4.</summary>
      <param name="value">The Vector2 to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Transforms a Vector2 by the given Matrix.</summary>
      <param name="position">The source Vector2.</param>
      <param name="matrix">The transformation Matrix.</param>
      <param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Transforms a Vector2 by a specified Quaternion into a Vector4.</summary>
      <param name="value">The Vector2 to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a Vector3 by the given Matrix.</summary>
      <param name="position">The source Vector3.</param>
      <param name="matrix">The transformation Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a Vector3 by a specified Quaternion into a Vector4.</summary>
      <param name="value">The Vector3 to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Transforms a Vector3 by the given Matrix.</summary>
      <param name="position">The source Vector3.</param>
      <param name="matrix">The transformation Matrix.</param>
      <param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Transforms a Vector3 by a specified Quaternion into a Vector4.</summary>
      <param name="value">The Vector3 to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a Vector4 by the specified Matrix.</summary>
      <param name="vector">The source Vector4.</param>
      <param name="matrix">The transformation Matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a Vector4 by a specified Quaternion.</summary>
      <param name="value">The Vector4 to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Transforms a Vector4 by the given Matrix.</summary>
      <param name="vector">The source Vector4.</param>
      <param name="matrix">The transformation Matrix.</param>
      <param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Transforms a Vector4 by a specified Quaternion.</summary>
      <param name="value">The Vector4 to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4[])">
      <summary>Transforms an array of Vector4s by a specified Matrix.</summary>
      <param name="sourceArray">The array of Vector4s to transform.</param>
      <param name="matrix">The transform Matrix to apply.</param>
      <param name="destinationArray">The existing destination array into which the transformed Vector4s are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4[])">
      <summary>Transforms an array of Vector4s by a specified Quaternion.</summary>
      <param name="sourceArray">The array of Vector4s to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="destinationArray">The existing destination array into which the transformed Vector4s are written.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4[],System.Int32,System.Int32)">
      <summary>Transforms a specified range in an array of Vector4s by a specified Matrix into a specified range in a destination array.</summary>
      <param name="sourceArray">The array of Vector4s containing the range to transform.</param>
      <param name="sourceIndex">The index in the source array of the first Vector4 to transform.</param>
      <param name="matrix">The transform Matrix to apply.</param>
      <param name="destinationArray">The existing destination array of Vector4s into which to write the results.</param>
      <param name="destinationIndex">The index in the destination array of the first result Vector4 to write.</param>
      <param name="length">The number of Vector4s to transform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4[],System.Int32,System.Int32)">
      <summary>Transforms a specified range in an array of Vector4s by a specified Quaternion into a specified range in a destination array.</summary>
      <param name="sourceArray">The array of Vector4s containing the range to transform.</param>
      <param name="sourceIndex">The index in the source array of the first Vector4 to transform.</param>
      <param name="rotation">The Quaternion rotation to apply.</param>
      <param name="destinationArray">The existing destination array of Vector4s into which to write the results.</param>
      <param name="destinationIndex">The index in the destination array of the first result Vector4 to write.</param>
      <param name="length">The number of Vector4s to transform.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.UnitW">
      <summary>Returns the Vector4 (0, 0, 0, 1).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.UnitX">
      <summary>Returns the Vector4 (1, 0, 0, 0).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.UnitY">
      <summary>Returns the Vector4 (0, 1, 0, 0).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.UnitZ">
      <summary>Returns the Vector4 (0, 0, 1, 0).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector4.W">
      <summary>Gets or sets the w-component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector4.X">
      <summary>Gets or sets the x-component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector4.Y">
      <summary>Gets or sets the y-component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector4.Z">
      <summary>Gets or sets the z-component of the vector.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.Zero">
      <summary>Returns a Vector4 with all of its components set to zero.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.AudioChannels">
      <summary>Defines the number of channels in the audio data.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Audio.AudioChannels.Mono">
      <summary>Indicates audio data is contained in one channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Audio.AudioChannels.Stereo">
      <summary>Indicates audio data contains two channels.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.AudioEmitter">
      <summary> Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEmitter.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioEmitter.DopplerScale">
      <summary>Gets or sets a scalar applied to the level of Doppler effect calculated between this and any AudioListener.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioEmitter.Forward">
      <summary>Gets or sets the forward orientation vector for this emitter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioEmitter.Position">
      <summary>Gets or sets the position of this emitter. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioEmitter.Up">
      <summary>Gets or sets the upward orientation vector for this emitter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioEmitter.Velocity">
      <summary>Gets or sets the velocity vector of this emitter.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.AudioListener">
      <summary> Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioListener.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioListener.Forward">
      <summary>Gets or sets the forward orientation vector for this listener.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioListener.Position">
      <summary>Gets or sets the position of this listener. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioListener.Up">
      <summary>Gets or sets the upward orientation vector for this listener.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioListener.Velocity">
      <summary>Gets or sets the velocity vector of this listener.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance">
      <summary>Provides properties, methods, and events for play back of the audio buffer.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.#ctor(System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)">
      <summary>Initializes a new instance of this class, which creates a dynamic sound effect based on the specified sample rate and audio channel.</summary>
      <param name="sampleRate">Sample rate, in Hertz (Hz), of audio content.</param>
      <param name="channels">Number of channels in the audio data.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.BufferNeeded">
      <summary>Event that occurs when the number of audio capture buffers awaiting playback is less than or equal to two.</summary>
      <param name="" />
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.GetSampleDuration(System.Int32)">
      <summary>Returns the sample duration based on the specified size of the audio buffer.</summary>
      <param name="sizeInBytes">Size, in bytes, of the audio data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.GetSampleSizeInBytes(System.TimeSpan)">
      <summary>Returns the size of the audio buffer required to contain audio samples based on the specified duration.</summary>
      <param name="duration">TimeSpan object that contains the duration of the audio sample.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.IsLooped">
      <summary>Indicates whether the audio playback of the DynamicSoundEffectInstance object is looped.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.PendingBufferCount">
      <summary>Returns the number of audio buffers in the queue awaiting playback.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Play">
      <summary>Begins or resumes audio playback.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.SubmitBuffer(System.Byte[])">
      <summary>Submits an audio buffer for playback. Playback starts at the beginning, and the buffer is played in its entirety. Reference page contains links to related conceptual articles.</summary>
      <param name="buffer">Buffer that contains the audio data. The audio format must be PCM wave data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.SubmitBuffer(System.Byte[],System.Int32,System.Int32)">
      <summary>Submits an audio buffer for playback. Playback begins at the specifed offset, and the byte count determines the size of the sample played. Reference page contains links to related conceptual articles.</summary>
      <param name="buffer">Buffer that contains the audio data. The audio format must be PCM wave data.</param>
      <param name="offset">Offset, in bytes, to the starting position of the data.</param>
      <param name="count">Amount, in bytes, of data sent.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.InstancePlayLimitException">
      <summary>The exception that is thrown when there is an attempt to play more than the platform specific maximum SoundEffectInstance sounds concurrently. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InstancePlayLimitException.#ctor">
      <summary>Initializes a new instance of the InstancePlayLimitException class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InstancePlayLimitException.#ctor(System.String)">
      <summary>Initializes a new instance of the InstancePlayLimitException class with a specified error message.</summary>
      <param name="message">A String that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InstancePlayLimitException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the InstancePlayLimitException class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">Error message that explains the reason for the exception.</param>
      <param name="inner">Exception that is the cause of the current exception. If innerException is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.Microphone">
      <summary>Provides properties, methods, and fields and events for capturing audio data with microphones.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Microphone.All">
      <summary>Returns the collection of all currently-available microphones.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Microphone.BufferDuration">
      <summary>Gets or sets audio capture buffer duration of the microphone.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Audio.Microphone.BufferReady">
      <summary>Event that occurs when the audio capture buffer is ready to processed.</summary>
      <param name="" />
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Microphone.Default">
      <summary>Returns the default attached microphone.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Microphone.GetData(System.Byte[])">
      <summary>Gets the latest recorded data from the microphone based on the audio capture buffer. Reference page contains links to related conceptual articles.</summary>
      <param name="buffer">Buffer, in bytes, containing the captured audio data. The audio format must be PCM wave data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Microphone.GetData(System.Byte[],System.Int32,System.Int32)">
      <summary>Gets the latest captured audio data from the microphone based on the specified offset and byte count. Reference page contains links to related conceptual articles.</summary>
      <param name="buffer">Buffer, in bytes, containing the captured audio data. The audio format must be PCM wave data.</param>
      <param name="offset">Offset, in bytes, to the starting position of the data.</param>
      <param name="count">Amount, in bytes, of desired audio data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Microphone.GetSampleDuration(System.Int32)">
      <summary>Returns the duration of audio playback based on the size of the buffer.</summary>
      <param name="sizeInBytes">Size, in bytes, of the audio data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Microphone.GetSampleSizeInBytes(System.TimeSpan)">
      <summary>Returns the size of the byte array required to hold the specified duration of audio for this microphone object.</summary>
      <param name="duration">TimeSpan object that contains the duration of the audio sample.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Microphone.IsHeadset">
      <summary>Determines if the microphone is a wired headset or a Bluetooth device.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Audio.Microphone.Name">
      <summary>Returns the friendly name of the microphone.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Microphone.SampleRate">
      <summary>Returns the sample rate at which the microphone is capturing audio data.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Microphone.Start">
      <summary>Starts microphone audio capture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Microphone.State">
      <summary>Returns the recording state of the Microphone object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Microphone.Stop">
      <summary>Stops microphone audio capture.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.MicrophoneState">
      <summary>Current state of the Microphone audio capture (started or stopped).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Audio.MicrophoneState.Started">
      <summary>The Microphone audio capture has started.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Audio.MicrophoneState.Stopped">
      <summary>The Microphone audio capture has stopped.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.NoAudioHardwareException">
      <summary>The exception that is thrown when no audio hardware is present, or when audio hardware is installed, but the device drivers for the audio hardware are not present or enabled.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoAudioHardwareException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoAudioHardwareException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoAudioHardwareException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.NoMicrophoneConnectedException">
      <summary>The exception that is thrown when Microphone API calls are made on a disconnected microphone.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoMicrophoneConnectedException.#ctor">
      <summary>Initializes a new instance of the NoMicrophoneConnectedException class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoMicrophoneConnectedException.#ctor(System.String)">
      <summary>Initializes a new instance of the NoMicrophoneConnectedException class with a specified error message.</summary>
      <param name="message">A String that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoMicrophoneConnectedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the NoMicrophoneConnectedException class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A String that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="inner">Exception that is the cause of the current exception. If innerException is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.SoundEffect">
      <summary> Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.#ctor(System.Byte[],System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)">
      <summary>Initializes a new instance of SoundEffect based on an audio buffer, sample rate, and number of audio channels. Reference page contains links to related conceptual articles.</summary>
      <param name="buffer">Buffer that contains the audio data. The audio format must be PCM wave data.</param>
      <param name="sampleRate">Sample rate, in Hertz (Hz), of audio data.</param>
      <param name="channels">Number of channels (mono or stereo) of audio data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels,System.Int32,System.Int32)">
      <summary>Initializes a new instance of SoundEffect with specified parameters such as audio sample rate, channels, looping criteria, and a buffer to hold the audio. Reference page contains links to related conceptual articles.</summary>
      <param name="buffer">Buffer that contains the audio data. The audio format must be PCM wave data.</param>
      <param name="offset">Offset, in bytes, to the starting position of the audio data.</param>
      <param name="count">Amount, in bytes, of audio data.</param>
      <param name="sampleRate">Sample rate, in Hertz (Hz), of audio data.</param>
      <param name="channels">Number of channels (mono or stereo) of audio data.</param>
      <param name="loopStart">Loop start in samples.</param>
      <param name="loopLength">Loop length in samples.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.CreateInstance">
      <summary>Creates a new SoundEffectInstance for this SoundEffect. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.Dispose">
      <summary>Releases the resources used by the SoundEffect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.DistanceScale">
      <summary>Gets or sets a value that adjusts the effect of distance calculations on the sound (emitter).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.DopplerScale">
      <summary>Gets or sets a value that adjusts the effect of doppler calculations on the sound (emitter).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.Duration">
      <summary>Gets the duration of the SoundEffect.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.FromStream(System.IO.Stream)">
      <summary>Creates a SoundEffect object based on the specified data stream.</summary>
      <param name="stream">Stream object that contains the data for this SoundEffect object.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.GetSampleDuration(System.Int32,System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)">
      <summary>Returns the sample duration based on the specified sample size and sample rate.</summary>
      <param name="sizeInBytes">Size, in bytes, of audio data.</param>
      <param name="sampleRate">Sample rate, in Hertz (Hz), of audio content. The sampleRate must be between 8000 Hz and 48000 Hz.</param>
      <param name="channels">Number of channels in the audio data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.GetSampleSizeInBytes(System.TimeSpan,System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)">
      <summary>Returns the size of the audio sample based on duration, sample rate, and audio channels.</summary>
      <param name="duration">TimeSpan object that contains the sample duration.</param>
      <param name="sampleRate">Sample rate, in Hertz (Hz), of audio content. The sampleRate parameter must be between 8,000 Hz and 48,000 Hz.</param>
      <param name="channels">Number of channels in the audio data.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.MasterVolume">
      <summary>Gets or sets the master volume that affects all SoundEffectInstance sounds.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.Name">
      <summary>Gets or sets the asset name of the SoundEffect.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.Play">
      <summary>Plays a sound. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.Play(System.Single,System.Single,System.Single)">
      <summary>Plays a sound based on specified volume, pitch, and panning. Reference page contains links to related code samples.</summary>
      <param name="volume">Volume, ranging from 0.0f (silence) to 1.0f (full volume). 1.0f is full volume relative to SoundEffect.MasterVolume.</param>
      <param name="pitch">Pitch adjustment, ranging from -1.0f (down one octave) to 1.0f (up one octave). 0.0f is unity (normal) pitch.</param>
      <param name="pan">Panning, ranging from -1.0f (full left) to 1.0f (full right). 0.0f is centered.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.SpeedOfSound">
      <summary>Returns the speed of sound: 343.5 meters per second.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.SoundEffectInstance">
      <summary>Provides a single playing, paused, or stopped instance of a SoundEffect sound.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)">
      <summary>Applies 3D positioning to the sound using a single listener. Reference page contains links to related code samples.</summary>
      <param name="listener">Position of the listener.</param>
      <param name="emitter">Position of the emitter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener[],Microsoft.Xna.Framework.Audio.AudioEmitter)">
      <summary>Applies 3D position to the sound using multiple listeners. Reference page contains links to related code samples.</summary>
      <param name="listeners">Positions of each listener.</param>
      <param name="emitter">Position of the emitter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose">
      <summary>Releases unmanaged resources held by this SoundEffectInstance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources held by this SoundEffectInstance, and optionally releases the managed resources.</summary>
      <param name="disposing">Pass true to release both the managed and unmanaged resources for this SoundEffectInstance. Passing false releases only the unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the SoundEffectInstance is reclaimed by garbage collection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsLooped">
      <summary>Gets a value that indicates whether looping is enabled for the SoundEffectInstance. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pan">
      <summary>Gets or sets the panning for the SoundEffectInstance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pause">
      <summary>Pauses a SoundEffectInstance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pitch">
      <summary>Gets or sets the pitch adjustment for the SoundEffectInstance. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Play">
      <summary>Plays or resumes a SoundEffectInstance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Resume">
      <summary>Resumes playback for a SoundEffectInstance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.State">
      <summary>Gets the current state (playing, paused, or stopped) of the SoundEffectInstance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop">
      <summary>Immediately stops playing a SoundEffectInstance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop(System.Boolean)">
      <summary>Stops playing a SoundEffectInstance, either immediately or as authored.</summary>
      <param name="immediate">Whether to stop playing immediately, or to break out of the loop region and play the release. Specify true to stop playing immediately, or false to break out of the loop region and play the release phase (the remainder of the sound).</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Volume">
      <summary>Gets or sets the volume of the SoundEffectInstance. Reference page contains links to related code samples.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.SoundState">
      <summary>Current state (playing, paused, or stopped) of a SoundEffectInstance.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Audio.SoundState.Paused">
      <summary>The SoundEffectInstance is paused.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Audio.SoundState.Playing">
      <summary>The SoundEffectInstance is playing.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Audio.SoundState.Stopped">
      <summary>The SoundEffectInstance is stopped.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentLoadException">
      <summary>Exception used to report errors from the ContentManager.Load method.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentLoadException.#ctor">
      <summary>Creates a new instance of ContentLoadException.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentLoadException.#ctor(System.String)">
      <summary>Creates a new instance of ContentLoadException.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentLoadException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of ContentLoadException.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentManager">
      <summary>The ContentManager is the run-time component which loads managed objects from the binary files produced by the design time content pipeline. It also manages the lifespan of the loaded objects, disposing the content manager will also dispose any assets which are themselves IDisposable.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of ContentManager.  Reference page contains code sample.</summary>
      <param name="serviceProvider">The service provider that the ContentManager should use to locate services.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.#ctor(System.IServiceProvider,System.String)">
      <summary>Initializes a new instance of ContentManager.  Reference page contains code sample.</summary>
      <param name="serviceProvider">The service provider the ContentManager should use to locate services.</param>
      <param name="rootDirectory">The root directory to search for content.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.Dispose">
      <summary>Releases all resources used by the ContentManager class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the ContentManager and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.Load``1(System.String)">
      <summary>Loads an asset that has been processed by the Content Pipeline.  Reference page contains code sample.</summary>
      <param name="assetName">Asset name, relative to the loader root directory, and not including the .xnb extension.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.OpenStream(System.String)">
      <summary>Opens a stream for reading the specified asset. Derived classes can replace this to implement pack files or asset compression.</summary>
      <param name="assetName">The name of the asset being read.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.ReadAsset``1(System.String,System.Action{System.IDisposable})">
      <summary>Low-level worker method that reads asset data.</summary>
      <param name="assetName">The name of the asset to be loaded from disk.</param>
      <param name="recordDisposableObject">Delegate function for handling the disposition of assets. If recordDisposableObject is null, the default lifespan tracking and management is used, so unloading or disposing of the content manager frees everything that has been loaded through it. If recordDisposableObject specifies a valid delegate, that delegate is used instead of the default lifespan tracking and is called every time the loader encounters a type that implements IDisposable. You must use your own code to unload assets loaded in this fashion, since ContentManager's Unload method will not be aware of them.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentManager.RootDirectory">
      <summary>Gets or sets the root directory associated with this ContentManager.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentManager.ServiceProvider">
      <summary>Gets the service provider associated with the ContentManager.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentManager.Unload">
      <summary>Disposes all data that was loaded by this ContentManager.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentReader">
      <summary>A worker object that implements most of ContentManager.Load. A new ContentReader is constructed for each asset loaded.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentReader.AssetName">
      <summary>Gets the name of the asset currently being read by this ContentReader.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentReader.ContentManager">
      <summary>Gets the ContentManager associated with the ContentReader.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadColor">
      <summary>Reads a Color value from the currently open stream.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadDouble">
      <summary>Reads a double value from the currently open stream.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadExternalReference``1">
      <summary>Reads a link to an external file.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadMatrix">
      <summary>Reads a Matrix value from the currently open stream.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadObject``1">
      <summary>Reads a single managed object from the current stream. Can be called recursively.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadObject``1(Microsoft.Xna.Framework.Content.ContentTypeReader)">
      <summary>Reads a single managed object from the current stream. Can be called recursively.</summary>
      <param name="typeReader">The ContentTypeReader to use to read the object.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadObject``1(Microsoft.Xna.Framework.Content.ContentTypeReader,``0)">
      <summary>Reads a single managed object from the current stream. Can be called recursively.</summary>
      <param name="typeReader">The ContentTypeReader to use to read the object.</param>
      <param name="existingInstance">An existing object to write into.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadObject``1(``0)">
      <summary>Reads a single managed object from the current stream. Can be called recursively.</summary>
      <param name="existingInstance">An existing object to write into.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadQuaternion">
      <summary>Reads a Quaternion value from the current stream.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadRawObject``1">
      <summary>Reads a single managed object from the current stream as an instance of the specified type. If you specify a base class of the actual object type, this method reads data only from the base type.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadRawObject``1(Microsoft.Xna.Framework.Content.ContentTypeReader)">
      <summary>Reads a single managed object from the current stream as an instance of the specified type. If a base class of the actual object type is specified only data from the base type will be read.</summary>
      <param name="typeReader">The ContentTypeReader to use to read the object.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadRawObject``1(Microsoft.Xna.Framework.Content.ContentTypeReader,``0)">
      <summary>Reads a single managed object from the current stream as an instance of the specified type. If you specify a base class of the actual object type, this method reads data only from the base type.</summary>
      <param name="typeReader">The ContentTypeReader to use to read the object.</param>
      <param name="existingInstance">An existing object to write into.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadRawObject``1(``0)">
      <summary>Reads a single managed object from the current stream as an instance of the specified type. If you specify a base class of the actual object type, the method reads data only from the base type.</summary>
      <param name="existingInstance">An existing object to write into.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadSharedResource``1(System.Action{``0})">
      <summary>Reads a shared resource ID, and records it for subsequent fix-up.</summary>
      <param name="fixup">The fix-up action to perform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadSingle">
      <summary>Reads a float value from the currently open stream.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadVector2">
      <summary>Reads a Vector2 value from the current stream.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadVector3">
      <summary>Reads a Vector3 value from the current stream.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentReader.ReadVector4">
      <summary>Reads a Vector4 value from the current stream.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentSerializerAttribute">
      <summary>A custom Attribute that marks a field or property to control how it is serialized or to indicate that protected or private data should be included in serialization.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.#ctor">
      <summary>Creates a new instance of ContentSerializerAttribute.  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.AllowNull">
      <summary>Get or set a value indicating whether this member can have a null value (default=true).  Reference page contains code sample.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.Clone">
      <summary>Creates a copy of the ContentSerializerAttribute.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.CollectionItemName">
      <summary>Gets or sets the XML element name for each item in a collection (default = "Item").  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.ElementName">
      <summary>Gets or sets the XML element name (default=name of the managed type member).  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.FlattenContent">
      <summary>Gets or sets a value idicating whether to write member contents directly into the current XML context rather than wrapping the member in a new XML element (default=false).  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.HasCollectionItemName">
      <summary>Indicates whether an explicit CollectionItemName string is being used or the default value.  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.Optional">
      <summary>Indicates whether to write this element if the member is null and skip past it if not found when deserializing XML (default=false).  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.SharedResource">
      <summary>Indicates whether this member is referenced from multiple parents and should be serialized as a unique ID reference (default=false).  Reference page contains code sample.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute">
      <summary>A custom Attribute that marks a collection class to specify the XML element name for each item in the collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute.#ctor(System.String)">
      <summary>Creates a new instance of ContentSerializerCollectionItemNameAttribute.  Reference page contains code sample.</summary>
      <param name="collectionItemName">The name for each item in the collection.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute.CollectionItemName">
      <summary>Gets the name that will be used for each item in the collection.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentSerializerIgnoreAttribute">
      <summary>A custom Attribute that marks public fields or properties to prevent them from being serialized.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentSerializerIgnoreAttribute.#ctor">
      <summary>Creates a new instance of ContentSerializerIgnoreAttribute.  Reference page contains code sample.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute">
      <summary />
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute.#ctor(System.String)">
      <summary>Creates a new instance of ContentSerializerRuntimeTypeAttribute.</summary>
      <param name="runtimeType">The run-time type name of the object.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute.RuntimeType">
      <summary>Gets the run-time type for the object.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute">
      <summary />
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute.#ctor(System.Int32)">
      <summary>Creates a new instance of ContentSerializerTypeVersionAttribute.</summary>
      <param name="typeVersion">The run-time type version of the object.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute.TypeVersion">
      <summary>Gets the run-time type version for the object.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentTypeReader">
      <summary>Worker for reading a specific managed type from a binary format.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReader.#ctor(System.Type)">
      <summary>Creates a new instance of ContentTypeReader.</summary>
      <param name="targetType">The type handled by this reader component.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentTypeReader.CanDeserializeIntoExistingObject">
      <summary>Determines if deserialization into an existing object is possible.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReader.Initialize(Microsoft.Xna.Framework.Content.ContentTypeReaderManager)">
      <summary>Retrieves and caches nested type readers. Called by the framework at creation time.</summary>
      <param name="manager">The content manager.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,System.Object)">
      <summary>Reads a strongly typed object from the current stream.</summary>
      <param name="input">The ContentReader used to read the object.</param>
      <param name="existingInstance">The object receiving the data, or null if a new instance of the object should be created.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentTypeReader.TargetType">
      <summary>Gets the type handled by this reader component.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.ContentTypeReader.TypeVersion">
      <summary>Gets a format version number for this type.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentTypeReader`1">
      <summary>Worker for reading a specific managed type from a binary format. Derive from this class to add new data types to the content pipeline system.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReader`1.#ctor">
      <summary>Creates a new instance of ContentTypeReader.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReader`1.Read(Microsoft.Xna.Framework.Content.ContentReader,System.Object)">
      <summary>Reads an object from the current stream.</summary>
      <param name="input">The ContentReader used to read the object.</param>
      <param name="existingInstance">An existing object to read into.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReader`1.Read(Microsoft.Xna.Framework.Content.ContentReader,`0)">
      <summary>Reads a strongly typed object from the current stream.</summary>
      <param name="input">The ContentReader used to read the object.</param>
      <param name="existingInstance">An existing object to read into.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ContentTypeReaderManager">
      <summary>A manager that constructs and keeps track of type reader objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReaderManager.GetTypeReader(System.Type)">
      <summary>Looks up a reader for the specified type.</summary>
      <param name="targetType">The type the reader will handle.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.ResourceContentManager">
      <summary>Subclass of ContentManager, which is specialized to read from .resx resource files rather than directly from individual files on disk.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ResourceContentManager.#ctor(System.IServiceProvider,System.Resources.ResourceManager)">
      <summary>Creates a new instance of ResourceContentManager.</summary>
      <param name="serviceProvider">The service provider the ContentManager should use to locate services.</param>
      <param name="resourceManager">The resource manager for the ResourceContentManager to read from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.ResourceContentManager.OpenStream(System.String)">
      <summary>Opens a stream for reading the specified resource. Derived classes can replace this to implement pack files or asset compression.</summary>
      <param name="assetName">The name of the asset being read.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8">
      <summary>Packed vector type containing a single 8 bit normalized W value in the range of 0 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.#ctor(System.Single)">
      <summary>Initializes a new instance of the Alpha8 structure.</summary>
      <param name="alpha">The initial value for the Alpha8 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representaion from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8,Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8,Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.ToAlpha">
      <summary>Expands the packed representation to a System.Single.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565">
      <summary>Packed vector type containing unsigned normalized values ranging from 0 to 1. The x and z components use 5 bits, and the y component uses 6 bits.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.#ctor(Microsoft.Xna.Framework.Vector3)">
      <summary>Initializes a new instance of the Bgr565 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Bgr565 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Bgr565 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565,Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565,Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.ToVector3">
      <summary>Expands the packed representation into a Vector3.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444">
      <summary>Packed vector type containing unsigned normalized values, ranging from 0 to 1, using 4 bits each for x, y, z, and w.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Creates an instance of this object.</summary>
      <param name="vector">Input value for all four components (xyzw).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates an instance of this object.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444)">
      <summary>Tests an object to see if it is equal to this object.</summary>
      <param name="other">The object to test.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.Equals(System.Object)">
      <summary>Tests an object to see if it is equal to this object.</summary>
      <param name="obj">The object to test.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Converts a four-component vector into the format for this object.</summary>
      <param name="vector">The four-component vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444,Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444)">
      <summary>Equality operator, which compares two objects to see if they are equal.</summary>
      <param name="a">The first object.</param>
      <param name="b">The second object.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444,Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444)">
      <summary>Tests two objects to see if they are not equal.</summary>
      <param name="a">The first object.</param>
      <param name="b">The second object.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.PackedValue">
      <summary>Gets or sets the packed representation of the vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.ToString">
      <summary>Returns a string representation.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.ToVector4">
      <summary>Unpacks this object to a four-component vector.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551">
      <summary>Packed vector type containing unsigned normalized values, ranging from 0 to 1, using 5 bits each for x, y, and z, and 1 bit for w.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Bgra5551 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Bgra5551 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Bgra5551 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551,Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551,Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4">
      <summary>Packed vector type containing four 8-bit unsigned integer values, ranging from 0 to 255.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Byte4 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Byte4 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Byte4 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4</summary>
      <param name="vector">The vector to create packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4,Microsoft.Xna.Framework.Graphics.PackedVector.Byte4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4,Microsoft.Xna.Framework.Graphics.PackedVector.Byte4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle">
      <summary>Packed vector type containing a single 16 bit floating point value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.#ctor(System.Single)">
      <summary>Initializes a new instance of the HalfSingle structure.</summary>
      <param name="value">The initial value of the HalfSingle structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle,Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle,Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.ToSingle">
      <summary>Expands the HalfSingle to a Single.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2">
      <summary>Packed vector type containing two 16-bit floating-point values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the HalfVector2 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the HalfVector2 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the HalfVector2 structure.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2,Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2,Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.ToVector2">
      <summary>Expands the HalfVector2 to a Vector2.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4">
      <summary>Packed vector type containing four 16-bit floating-point values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the HalfVector4 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the HalfVector4 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the HalfVector4 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4,Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4,Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector">
      <summary>Interface that converts packed vector types to and from Vector4 values, allowing multiple encodings to be manipulated in a generic way.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1">
      <summary>Converts packed vector types to and from Vector4 values.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2">
      <summary>Packed vector type containing two 8-bit signed normalized values, ranging from −1 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the NormalizedByte2 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the NormalizedByte2 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the NormalizedByte2 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.ToVector2">
      <summary>Expands the packed representation to a vector.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4">
      <summary>Packed vector type containing four 8-bit signed normalized values, ranging from −1 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the NormalizedByte4 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the NormalizedByte4 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the NormalizedByte4 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2">
      <summary>Packed vector type containing two 16-bit signed normalized values, ranging from −1 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the NormalizedShort2 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the NormalizedShort2 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the NormalizedShort2 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.ToVector2">
      <summary>Expands the packed representation to a vector.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4">
      <summary>Packed vector type containing four 16-bit signed normalized values, ranging from −1 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the NormalizedShort4 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the NormalizedShort4 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the NormalizedShort4 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32">
      <summary>Packed vector type containing two 16-bit unsigned normalized values, ranging from 0 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the Rg32 structure.</summary>
      <param name="vector">The vector containing the initial values for the components of the Rg32 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the Rg32 structure.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Rg32)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4</summary>
      <param name="vector">The vector to create packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Rg32,Microsoft.Xna.Framework.Graphics.PackedVector.Rg32)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Rg32,Microsoft.Xna.Framework.Graphics.PackedVector.Rg32)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.ToVector2">
      <summary>Expands the packed vector representation into a Vector2.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102">
      <summary>Packed vector type containing unsigned normalized values, ranging from 0 to 1, using 10 bits each for x, y, and z, and 2 bits for w.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Rgba1010102 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Rgba1010102 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Rgba1010102 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the left of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64">
      <summary>Packed vector type containing four 16-bit unsigned normalized values, ranging from 0 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Rgba64 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Rgba64 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Rgba64 structure.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Short2">
      <summary>Packed vector type containing two 16-bit signed integer values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the Short2 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Short2 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the Short2 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Short2)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Short2,Microsoft.Xna.Framework.Graphics.PackedVector.Short2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Short2,Microsoft.Xna.Framework.Graphics.PackedVector.Short2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.ToVector2">
      <summary>Expands the packed representation to a vector.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Short4">
      <summary>Packed vector type containing four 16-bit signed integer values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Short4 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Short4 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Short4 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Short4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Short4,Microsoft.Xna.Framework.Graphics.PackedVector.Short4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Short4,Microsoft.Xna.Framework.Graphics.PackedVector.Short4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.ToString">
      <summary>Returns a string representation of the current instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.ToVector4">
      <summary>Expands the packed representation into a Vector4.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.Buttons">
      <summary>Enumerates input device buttons.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.A">
      <summary>A button</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.B">
      <summary>B button</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.Back">
      <summary>BACK button</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.BigButton">
      <summary>Big button</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.DPadDown">
      <summary>Directional pad up</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.DPadLeft">
      <summary>Directional pad left</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.DPadRight">
      <summary>Directional pad right</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.DPadUp">
      <summary>Directional pad down</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.LeftShoulder">
      <summary>Left bumper (shoulder) button</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.LeftStick">
      <summary>Left stick button (pressing the left stick)</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickDown">
      <summary>Left stick is toward down</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickLeft">
      <summary>Left stick is toward the left</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickRight">
      <summary>Left stick is toward the right</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickUp">
      <summary>Left stick is toward up</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.LeftTrigger">
      <summary>Left trigger</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.RightShoulder">
      <summary>Right bumper (shoulder) button</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.RightStick">
      <summary>Right stick button (pressing the right stick)</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.RightThumbstickDown">
      <summary>Right stick is toward down</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.RightThumbstickLeft">
      <summary>Right stick is toward the left</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.RightThumbstickRight">
      <summary>Right stick is toward the right</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.RightThumbstickUp">
      <summary>Right stick is toward up</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.RightTrigger">
      <summary>Right trigger</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.Start">
      <summary>START button</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.X">
      <summary>X button</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Buttons.Y">
      <summary>Y button</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.ButtonState">
      <summary>Identifies the state of a controller button.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.ButtonState.Pressed">
      <summary>The button is pressed.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.ButtonState.Released">
      <summary>The button is released.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePad">
      <summary>Allows retrieval of user interaction with an Xbox 360 Controller and setting of controller vibration motors. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePad.GetCapabilities(Microsoft.Xna.Framework.PlayerIndex)">
      <summary>Retrieves the capabilities of an Xbox 360 Controller.</summary>
      <param name="playerIndex">Index of the controller to query.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePad.GetState(Microsoft.Xna.Framework.PlayerIndex)">
      <summary>Gets the current state of a game pad controller. Reference page contains links to related code samples.</summary>
      <param name="playerIndex">Player index for the controller you want to query.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePad.GetState(Microsoft.Xna.Framework.PlayerIndex,Microsoft.Xna.Framework.Input.GamePadDeadZone)">
      <summary>Gets the current state of a game pad controller, using a specified dead zone on analog stick positions. Reference page contains links to related code samples.</summary>
      <param name="playerIndex">Player index for the controller you want to query.</param>
      <param name="deadZoneMode">Enumerated value that specifies what dead zone type to use.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePad.SetVibration(Microsoft.Xna.Framework.PlayerIndex,System.Single,System.Single)">
      <summary>Sets the vibration motor speeds on an Xbox 360 Controller. Reference page contains links to related code samples.</summary>
      <param name="playerIndex">Player index that identifies the controller to set.</param>
      <param name="leftMotor">The speed of the left motor, between 0.0 and 1.0. This motor is a low-frequency motor.</param>
      <param name="rightMotor">The speed of the right motor, between 0.0 and 1.0. This motor is a high-frequency motor.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadButtons">
      <summary>Identifies whether buttons on an Xbox 360 Controller are pressed or released. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.#ctor(Microsoft.Xna.Framework.Input.Buttons)">
      <summary>Initializes a new instance of the GamePadButtons class, setting the specified buttons to pressed in.</summary>
      <param name="buttons">Buttons to initialize as pressed. Specify a single button or combine multiple buttons using a bitwise OR operation.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.A">
      <summary>Identifies if the A button on the Xbox 360 Controller is pressed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.B">
      <summary>Identifies if the B button on the Xbox 360 Controller is pressed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.Back">
      <summary>Identifies if the BACK button on the Xbox 360 Controller is pressed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.BigButton">
      <summary>Identifies if the BigButton button is pressed.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.Equals(System.Object)">
      <summary>Returns a value that indicates if the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.LeftShoulder">
      <summary>Identifies if the left shoulder (bumper) button on the Xbox 360 Controller is pressed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.LeftStick">
      <summary>Identifies if the left stick button on the Xbox 360 Controller is pressed (the stick is "clicked" in).</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.op_Equality(Microsoft.Xna.Framework.Input.GamePadButtons,Microsoft.Xna.Framework.Input.GamePadButtons)">
      <summary>Indicates if the two GamePadButton objects are equal.</summary>
      <param name="left">The GamePadButtons instance on the left side of the equality.</param>
      <param name="right">The GamePadButtons instance on the right side of the equality.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.op_Inequality(Microsoft.Xna.Framework.Input.GamePadButtons,Microsoft.Xna.Framework.Input.GamePadButtons)">
      <summary>Determines whether two GamePadButtons instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.RightShoulder">
      <summary>Identifies if the right shoulder (bumper) button on the Xbox 360 Controller is pressed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.RightStick">
      <summary>Identifies if the right stick button on the Xbox 360 Controller is pressed (the stick is "clicked" in).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.Start">
      <summary>Identifies if the START button on the Xbox 360 Controller is pressed.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.X">
      <summary>Identifies if the X button on the Xbox 360 Controller is pressed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.Y">
      <summary>Identifies if the Y button on the Xbox 360 Controller is pressed.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadCapabilities">
      <summary>Describes the capabilities of an Xbox 360 Controller, including controller type, and identifies if the controller supports voice.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.GamePadType">
      <summary>Gets the type of controller.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasAButton">
      <summary>Indicates whether the controller has an A button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBackButton">
      <summary>Indicates whether the controller has a BACK button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBButton">
      <summary>Indicates whether the controller has a B button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasBigButton">
      <summary>Indicates whether the controller has a BigButton button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadDownButton">
      <summary>Indicates whether the controller has a directional pad DOWN button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadLeftButton">
      <summary>Indicates whether the controller has a directional pad LEFT button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadRightButton">
      <summary>Indicates whether the controller has a directional pad RIGHT button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasDPadUpButton">
      <summary>Indicates whether the controller has a directional pad UP button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftShoulderButton">
      <summary>Indicates whether the controller has a left bumper button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftStickButton">
      <summary>Indicates whether the controller has a digital button control on the left analog stick.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftTrigger">
      <summary>Indicates whether the controller has a left analog trigger.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftVibrationMotor">
      <summary>Indicates whether the controller has a low-frequency vibration motor.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftXThumbStick">
      <summary>Indicates whether the controller supports a left analog control with horizontal movement.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasLeftYThumbStick">
      <summary>Indicates whether the controller supports a left analog control with vertical movement.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightShoulderButton">
      <summary>Indicates whether the controller has a right bumper button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightStickButton">
      <summary>Indicates whether the controller has a digital button control on the right analog stick.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightTrigger">
      <summary>Indicates whether the controller has a right analog trigger.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightVibrationMotor">
      <summary>Indicates whether the controller has a high-frequency vibration motor.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightXThumbStick">
      <summary>Indicates whether the controller supports a right analog control with horizontal movement.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasRightYThumbStick">
      <summary>Indicates whether the controller supports a right analog control with vertical movement.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasStartButton">
      <summary>Indicates whether the controller has a START button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasVoiceSupport">
      <summary>Indicates whether the controller supports voice.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasXButton">
      <summary>Indicates whether the controller has an X button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasYButton">
      <summary>Indicates whether the controller has a Y button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.IsConnected">
      <summary>Indicates whether the Xbox 360 Controller is connected.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadDeadZone">
      <summary>Specifies a type of dead zone processing to apply to Xbox 360 Controller analog sticks when calling GetState.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadDeadZone.Circular">
      <summary>The combined X and Y position of each stick is compared to the dead zone. This provides better control than IndependentAxes when the stick is used as a two-dimensional control surface, such as when controlling a character's view in a first-person game.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadDeadZone.IndependentAxes">
      <summary>The X and Y positions of each stick are compared against the dead zone independently. This setting is the default when calling GetState.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadDeadZone.None">
      <summary>The values of each stick are not processed and are returned by GetState as "raw" values. This is best if you intend to implement your own dead zone processing.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadDPad">
      <summary>Identifies which directions on the directional pad of an Xbox 360 Controller are being pressed.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.#ctor(Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState)">
      <summary>Initializes a new instance of the GamePadDPad class.</summary>
      <param name="upValue">Directional pad up button state.</param>
      <param name="downValue">Directional pad down button state.</param>
      <param name="leftValue">Directional pad left button state.</param>
      <param name="rightValue">Directional pad right button state.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadDPad.Down">
      <summary>Identifies whether the Down direction on the Xbox 360 Controller directional pad is pressed.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadDPad.Left">
      <summary>Identifies whether the Left direction on the Xbox 360 Controller directional pad is pressed.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.op_Equality(Microsoft.Xna.Framework.Input.GamePadDPad,Microsoft.Xna.Framework.Input.GamePadDPad)">
      <summary>Determines whether two GamePadDPad instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.op_Inequality(Microsoft.Xna.Framework.Input.GamePadDPad,Microsoft.Xna.Framework.Input.GamePadDPad)">
      <summary>Determines whether two GamePadDPad instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadDPad.Right">
      <summary>Identifies whether the Right direction on the Xbox 360 Controller directional pad is pressed.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadDPad.Up">
      <summary>Identifies whether the Up direction on the Xbox 360 Controller directional pad is pressed.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadState">
      <summary>Represents specific information about the state of an Xbox 360 Controller, including the current state of buttons and sticks. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.#ctor(Microsoft.Xna.Framework.Input.GamePadThumbSticks,Microsoft.Xna.Framework.Input.GamePadTriggers,Microsoft.Xna.Framework.Input.GamePadButtons,Microsoft.Xna.Framework.Input.GamePadDPad)">
      <summary>Initializes a new instance of the GamePadState class using the specified GamePadThumbSticks, GamePadTriggers, GamePadButtons, and GamePadDPad.</summary>
      <param name="thumbSticks">Initial thumbstick state.</param>
      <param name="triggers">Initial trigger state.</param>
      <param name="buttons">Initial button state.</param>
      <param name="dPad">Initial directional pad state.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,Microsoft.Xna.Framework.Input.Buttons[])">
      <summary>Initializes a new instance of the GamePadState class with the specified stick, trigger, and button values.</summary>
      <param name="leftThumbStick">Left stick value. Each axis is clamped between −1.0 and 1.0.</param>
      <param name="rightThumbStick">Right stick value. Each axis is clamped between −1.0 and 1.0.</param>
      <param name="leftTrigger">Left trigger value. This value is clamped between 0.0 and 1.0.</param>
      <param name="rightTrigger">Right trigger value. This value is clamped between 0.0 and 1.0.</param>
      <param name="buttons">Array or parameter list of Buttons to initialize as pressed.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.Buttons">
      <summary>Returns a structure that identifies what buttons on the Xbox 360 controller are pressed. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.DPad">
      <summary>Returns a structure that identifies what directions of the directional pad on the Xbox 360 Controller are pressed.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.IsButtonDown(Microsoft.Xna.Framework.Input.Buttons)">
      <summary>Determines whether specified input device buttons are pressed in this GamePadState.</summary>
      <param name="button">Buttons to query. Specify a single button, or combine multiple buttons using a bitwise OR operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.IsButtonUp(Microsoft.Xna.Framework.Input.Buttons)">
      <summary>Determines whether specified input device buttons are up (not pressed) in this GamePadState.</summary>
      <param name="button">Buttons to query. Specify a single button, or combine multiple buttons using a bitwise OR operation.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.IsConnected">
      <summary>Indicates whether the Xbox 360 Controller is connected. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.op_Equality(Microsoft.Xna.Framework.Input.GamePadState,Microsoft.Xna.Framework.Input.GamePadState)">
      <summary>Determines whether two GamePadState instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.op_Inequality(Microsoft.Xna.Framework.Input.GamePadState,Microsoft.Xna.Framework.Input.GamePadState)">
      <summary>Determines whether two GamePadState instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.PacketNumber">
      <summary>Gets the packet number associated with this state. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.ThumbSticks">
      <summary>Returns a structure that indicates the position of the Xbox 360 Controller sticks (thumbsticks).</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.Triggers">
      <summary>Returns a structure that identifies the position of triggers on the Xbox 360 controller.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadThumbSticks">
      <summary>Structure that represents the position of left and right sticks (thumbsticks) on an Xbox 360 Controller.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the GamePadThumbSticks class.</summary>
      <param name="leftThumbstick">Left stick value. Each axis is clamped between −1.0 and 1.0.</param>
      <param name="rightThumbstick">Right stick value. Each axis is clamped between −1.0 and 1.0.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadThumbSticks.Left">
      <summary>Returns the position of the left Xbox 360 Controller stick (thumbstick) as a 2D vector.  Reference page contains code sample.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.op_Equality(Microsoft.Xna.Framework.Input.GamePadThumbSticks,Microsoft.Xna.Framework.Input.GamePadThumbSticks)">
      <summary>Determines whether two GamePadThumbSticks instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.op_Inequality(Microsoft.Xna.Framework.Input.GamePadThumbSticks,Microsoft.Xna.Framework.Input.GamePadThumbSticks)">
      <summary>Determines whether two GamePadThumbSticks instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadThumbSticks.Right">
      <summary>Returns the position of the right Xbox 360 Controller stick (thumbstick) as a 2D vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadTriggers">
      <summary>Structure that defines the position of the left and right triggers on an Xbox 360 Controller.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the GamePadTriggers class.</summary>
      <param name="leftTrigger">Left trigger value. This value is clamped between 0.0 and 1.0.</param>
      <param name="rightTrigger">Right trigger value. This value is clamped between 0.0 and 1.0.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadTriggers.Left">
      <summary>Identifies the position of the left trigger on the Xbox 360 Controller.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.op_Equality(Microsoft.Xna.Framework.Input.GamePadTriggers,Microsoft.Xna.Framework.Input.GamePadTriggers)">
      <summary>Determines whether two GamePadTriggers instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.op_Inequality(Microsoft.Xna.Framework.Input.GamePadTriggers,Microsoft.Xna.Framework.Input.GamePadTriggers)">
      <summary>Determines whether two GamePadTriggers instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadTriggers.Right">
      <summary>Identifies the position of the right trigger on the Xbox 360 Controller.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadType">
      <summary>Describes the type of a specified Xbox 360 Controller.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadType.AlternateGuitar">
      <summary>Controller is an alternate guitar</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadType.ArcadeStick">
      <summary>Controller is an Arcade stick</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadType.BigButtonPad">
      <summary>Controller is a big button pad</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadType.DancePad">
      <summary>Controller is a dance pad</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadType.DrumKit">
      <summary>Controller is a drum kit</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadType.FlightStick">
      <summary>Controller is a flight stick</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadType.GamePad">
      <summary>Controller is the Xbox 360 Controller</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadType.Guitar">
      <summary>Controller is a guitar</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadType.Unknown">
      <summary>Controller is an unknown type</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.GamePadType.Wheel">
      <summary>Controller is a wheel</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.Keyboard">
      <summary>Allows retrieval of keystrokes from a keyboard input device. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.Keyboard.GetState">
      <summary>Returns the current keyboard state. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.Keyboard.GetState(Microsoft.Xna.Framework.PlayerIndex)">
      <summary>Returns the current Chatpad state for the specified player. Reference page contains links to related code samples.</summary>
      <param name="playerIndex">Player index of the Chatpad to query.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.KeyboardState">
      <summary>Represents a state of keystrokes recorded by a keyboard input device. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.#ctor(Microsoft.Xna.Framework.Input.Keys[])">
      <summary>Initializes a new instance of the KeyboardState class.</summary>
      <param name="keys">Array or parameter list of Keys to initialize as pressed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to compare this object to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.GetPressedKeys">
      <summary>Gets an array of values that correspond to the keyboard keys that are currently being pressed. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys)">
      <summary>Returns whether a specified key is currently being pressed. Reference page contains links to related code samples.</summary>
      <param name="key">Enumerated value that specifies the key to query.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.IsKeyUp(Microsoft.Xna.Framework.Input.Keys)">
      <summary>Returns whether a specified key is currently not pressed. Reference page contains links to related code samples.</summary>
      <param name="key">Enumerated value that specifies the key to query.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.KeyboardState.Item(Microsoft.Xna.Framework.Input.Keys)">
      <summary>Returns the state of a particular key. Reference page contains links to related code samples.</summary>
      <param name="key">Enumerated value representing the key to query.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.op_Equality(Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.Input.KeyboardState)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="a">Object to the left of the equality operator.</param>
      <param name="b">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.op_Inequality(Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.Input.KeyboardState)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="a">Object to the left of the inequality operator.</param>
      <param name="b">Object to the right of the inequality operator.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.Keys">
      <summary>Identifies a particular key on a keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.A">
      <summary>A key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Add">
      <summary>Add key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Apps">
      <summary>Applications key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Attn">
      <summary>Attn key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.B">
      <summary>B key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Back">
      <summary>BACKSPACE key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.BrowserBack">
      <summary>Windows 2000/XP: Browser Back key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.BrowserFavorites">
      <summary>Windows 2000/XP: Browser Favorites key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.BrowserForward">
      <summary>Windows 2000/XP: Browser Forward key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.BrowserHome">
      <summary>Windows 2000/XP: Browser Start and Home key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.BrowserRefresh">
      <summary>Windows 2000/XP: Browser Refresh key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.BrowserSearch">
      <summary>Windows 2000/XP: Browser Search key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.BrowserStop">
      <summary>Windows 2000/XP: Browser Stop key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.C">
      <summary>C key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.CapsLock">
      <summary>CAPS LOCK key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.ChatPadGreen">
      <summary>Green ChatPad key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.ChatPadOrange">
      <summary>Orange ChatPad key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Crsel">
      <summary>CrSel key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D">
      <summary>D key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D0">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D1">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D2">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D3">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D4">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D5">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D6">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D7">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D8">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.D9">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Decimal">
      <summary>Decimal key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Delete">
      <summary>DEL key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Divide">
      <summary>Divide key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Down">
      <summary>DOWN ARROW key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.E">
      <summary>E key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.End">
      <summary>END key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Enter">
      <summary>ENTER key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.EraseEof">
      <summary>Erase EOF key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Escape">
      <summary>ESC key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Execute">
      <summary>EXECUTE key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Exsel">
      <summary>ExSel key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F">
      <summary>F key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F1">
      <summary>F1 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F10">
      <summary>F10 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F11">
      <summary>F11 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F12">
      <summary>F12 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F13">
      <summary>F13 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F14">
      <summary>F14 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F15">
      <summary>F15 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F16">
      <summary>F16 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F17">
      <summary>F17 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F18">
      <summary>F18 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F19">
      <summary>F19 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F2">
      <summary>F2 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F20">
      <summary>F20 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F21">
      <summary>F21 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F22">
      <summary>F22 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F23">
      <summary>F23 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F24">
      <summary>F24 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F3">
      <summary>F3 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F4">
      <summary>F4 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F5">
      <summary>F5 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F6">
      <summary>F6 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F7">
      <summary>F7 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F8">
      <summary>F8 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.F9">
      <summary>F9 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.G">
      <summary>G key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.H">
      <summary>H key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Help">
      <summary>HELP key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Home">
      <summary>HOME key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.I">
      <summary>I key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.ImeConvert">
      <summary>IME Convert key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.ImeNoConvert">
      <summary>IME NoConvert key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Insert">
      <summary>INS key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.J">
      <summary>J key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.K">
      <summary>K key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Kana">
      <summary>Kana key on Japanese keyboards</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Kanji">
      <summary>Kanji key on Japanese keyboards</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.L">
      <summary>L key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.LaunchApplication1">
      <summary>Windows 2000/XP: Start Application 1 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.LaunchApplication2">
      <summary>Windows 2000/XP: Start Application 2 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.LaunchMail">
      <summary>Windows 2000/XP: Start Mail key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Left">
      <summary>LEFT ARROW key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.LeftAlt">
      <summary>Left ALT key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.LeftControl">
      <summary>Left CONTROL key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.LeftShift">
      <summary>Left SHIFT key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.LeftWindows">
      <summary>Left Windows key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.M">
      <summary>M key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.MediaNextTrack">
      <summary>Windows 2000/XP: Next Track key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.MediaPlayPause">
      <summary>Windows 2000/XP: Play/Pause Media key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.MediaPreviousTrack">
      <summary>Windows 2000/XP: Previous Track key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.MediaStop">
      <summary>Windows 2000/XP: Stop Media key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Multiply">
      <summary>Multiply key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.N">
      <summary>N key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.None">
      <summary>Reserved</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumLock">
      <summary>NUM LOCK key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad0">
      <summary>Numeric keypad 0 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad1">
      <summary>Numeric keypad 1 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad2">
      <summary>Numeric keypad 2 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad3">
      <summary>Numeric keypad 3 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad4">
      <summary>Numeric keypad 4 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad5">
      <summary>Numeric keypad 5 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad6">
      <summary>Numeric keypad 6 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad7">
      <summary>Numeric keypad 7 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad8">
      <summary>Numeric keypad 8 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad9">
      <summary>Numeric keypad 9 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.O">
      <summary>O key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Oem8">
      <summary>Used for miscellaneous characters; it can vary by keyboard.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemAuto">
      <summary>OEM Auto key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemBackslash">
      <summary>Windows 2000/XP: The OEM angle bracket or backslash key on the RT 102 key keyboard</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemClear">
      <summary>CLEAR key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemCloseBrackets">
      <summary>Windows 2000/XP: The OEM close bracket key on a US standard keyboard</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemComma">
      <summary>Windows 2000/XP: For any country/region, the ',' key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemCopy">
      <summary>OEM Copy key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemEnlW">
      <summary>OEM Enlarge Window key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemMinus">
      <summary>Windows 2000/XP: For any country/region, the '-' key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemOpenBrackets">
      <summary>Windows 2000/XP: The OEM open bracket key on a US standard keyboard</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemPeriod">
      <summary>Windows 2000/XP: For any country/region, the '.' key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemPipe">
      <summary>Windows 2000/XP: The OEM pipe key on a US standard keyboard</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemPlus">
      <summary>Windows 2000/XP: For any country/region, the '+' key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemQuestion">
      <summary>Windows 2000/XP: The OEM question mark key on a US standard keyboard</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemQuotes">
      <summary>Windows 2000/XP: The OEM singled/double quote key on a US standard keyboard</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemSemicolon">
      <summary>Windows 2000/XP: The OEM Semicolon key on a US standard keyboard</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.OemTilde">
      <summary>Windows 2000/XP: The OEM tilde key on a US standard keyboard</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.P">
      <summary>P key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Pa1">
      <summary>PA1 key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.PageDown">
      <summary>PAGE DOWN key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.PageUp">
      <summary>PAGE UP key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Pause">
      <summary>PAUSE key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Play">
      <summary>Play key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Print">
      <summary>PRINT key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.PrintScreen">
      <summary>PRINT SCREEN key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.ProcessKey">
      <summary>Windows 95/98/Me, Windows NT 4.0, Windows 2000/XP: IME PROCESS key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Q">
      <summary>Q key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.R">
      <summary>R key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Right">
      <summary>RIGHT ARROW key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.RightAlt">
      <summary>Right ALT key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.RightControl">
      <summary>Right CONTROL key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.RightShift">
      <summary>Right SHIFT key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.RightWindows">
      <summary>Right Windows key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.S">
      <summary>S key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Scroll">
      <summary>SCROLL LOCK key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Select">
      <summary>SELECT key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.SelectMedia">
      <summary>Windows 2000/XP: Select Media key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Separator">
      <summary>Separator key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Sleep">
      <summary>Computer Sleep key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Space">
      <summary>SPACEBAR</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Subtract">
      <summary>Subtract key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.T">
      <summary>T key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Tab">
      <summary>TAB key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.U">
      <summary>U key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Up">
      <summary>UP ARROW key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.V">
      <summary>V key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.VolumeDown">
      <summary>Windows 2000/XP: Volume Down key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.VolumeMute">
      <summary>Windows 2000/XP: Volume Mute key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.VolumeUp">
      <summary>Windows 2000/XP: Volume Up key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.W">
      <summary>W key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.X">
      <summary>X key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Y">
      <summary>Y key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Z">
      <summary>Z key</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.Keys.Zoom">
      <summary>Zoom key</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.KeyState">
      <summary>Identifies the state of a keyboard key.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.KeyState.Down">
      <summary>Key is pressed.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Input.KeyState.Up">
      <summary>Key is released.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.Mouse">
      <summary>Allows retrieval of position and button clicks from a mouse input device. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.Mouse.GetState">
      <summary>Gets the current state of the mouse, including mouse position and buttons pressed. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.Mouse.SetPosition(System.Int32,System.Int32)">
      <summary>Sets the position of the mouse cursor relative to the upper-left corner of the window.</summary>
      <param name="x">The horizontal position of the mouse cursor, relative to the left edge of the game window.</param>
      <param name="y">The vertical position of the mouse cursor, relative to the upper edge of the game window.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.Mouse.WindowHandle">
      <summary>Gets or sets the window used for mouse processing. Mouse coordinates returned by GetState are relative to the upper-left corner of this window. Reference page contains links to related code samples.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.MouseState">
      <summary>Represents the state of a mouse input device, including mouse cursor position and buttons pressed. Reference page contains links to related code samples.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.#ctor(System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState)">
      <summary>Initializes a new instance of the MouseState class.</summary>
      <param name="x">Horizontal mouse position.</param>
      <param name="y">Vertical mouse position.</param>
      <param name="scrollWheel">Mouse scroll wheel value.</param>
      <param name="leftButton">Left mouse button state.</param>
      <param name="middleButton">Middle mouse button state.</param>
      <param name="rightButton">Right mouse button state.</param>
      <param name="xButton1">XBUTTON1 state.</param>
      <param name="xButton2">XBUTTON2 state.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.LeftButton">
      <summary>Returns the state of the left mouse button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.MiddleButton">
      <summary>Returns the state of the middle mouse button.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.op_Equality(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.MouseState)">
      <summary>Determines whether two MouseState instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.op_Inequality(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.MouseState)">
      <summary>Determines whether two MouseState instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.RightButton">
      <summary>Returns the state of the right mouse button.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.ScrollWheelValue">
      <summary>Gets the cumulative mouse scroll wheel value since the game was started.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.X">
      <summary>Specifies the horizontal position of the mouse cursor. Reference page contains links to related code samples.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.XButton1">
      <summary>Returns the state of XBUTTON1.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.XButton2">
      <summary>Returns the state of XBUTTON2.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.Y">
      <summary>Specifies the vertical position of the mouse cursor. Reference page contains links to related code samples.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.Album">
      <summary>Provides access to an album in the media library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Album.Artist">
      <summary>Gets the Artist of the Album.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Album.Duration">
      <summary>Gets the duration of the Album.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.Equals(Microsoft.Xna.Framework.Media.Album)">
      <summary>Determines whether the specified Album is equal to this Album.</summary>
      <param name="other">Album to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to this Album.</summary>
      <param name="obj">Object to compare with this instance.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Album.Genre">
      <summary>Gets the Genre of the Album.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.GetAlbumArt">
      <summary>Returns the stream that contains the album art image data.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.GetThumbnail">
      <summary>Returns the stream that contains the album thumbnail image data.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Album.HasArt">
      <summary>Gets a value indicating whether the Album has associated album art.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Album.IsDisposed">
      <summary>Gets a value indicating whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Album.Name">
      <summary>Gets the name of the Album.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.op_Equality(Microsoft.Xna.Framework.Media.Album,Microsoft.Xna.Framework.Media.Album)">
      <summary>Determines whether the specified Album instances are equal.</summary>
      <param name="first">Object to the left of the equality operator.</param>
      <param name="second">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.op_Inequality(Microsoft.Xna.Framework.Media.Album,Microsoft.Xna.Framework.Media.Album)">
      <summary>Determines whether the specified Album instances are not equal.</summary>
      <param name="first">Object to the left of the inequality operator.</param>
      <param name="second">Object to the right of the inequality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Album.Songs">
      <summary>Gets a SongCollection that contains the songs on the album.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Album.ToString">
      <summary>Returns a String representation of this Album.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.AlbumCollection">
      <summary>A collection of albums in the media library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.AlbumCollection.Count">
      <summary>Gets the number of Album objects in the AlbumCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.AlbumCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.AlbumCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the AlbumCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.AlbumCollection.IsDisposed">
      <summary>Gets a value indicating whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.AlbumCollection.Item(System.Int32)">
      <summary>Gets the Album at the specified index in the AlbumCollection.</summary>
      <param name="index">Index of the Album to get.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.AlbumCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.Artist">
      <summary>Provides access to artist information in the media library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Artist.Albums">
      <summary>Gets the AlbumCollection for the Artist.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.Equals(Microsoft.Xna.Framework.Media.Artist)">
      <summary>Determines whether the specified Artist is equal to this Artist.</summary>
      <param name="other">Artist to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to this Artist.</summary>
      <param name="obj">Object to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Artist.IsDisposed">
      <summary>Gets a value indicating whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Artist.Name">
      <summary>Gets the name of the Artist.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.op_Equality(Microsoft.Xna.Framework.Media.Artist,Microsoft.Xna.Framework.Media.Artist)">
      <summary>Determines whether the specified Artist instances are equal.</summary>
      <param name="first">Object to the left of the equality operator.</param>
      <param name="second">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.op_Inequality(Microsoft.Xna.Framework.Media.Artist,Microsoft.Xna.Framework.Media.Artist)">
      <summary>Determines whether the specified Artist instances are not equal.</summary>
      <param name="first">Object to the left of the inequality operator.</param>
      <param name="second">Object to the right of the inequality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Artist.Songs">
      <summary>Gets the SongCollection for the Artist.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Artist.ToString">
      <summary>Returns a String representation of the Artist.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.ArtistCollection">
      <summary>The collection of all artists in the media library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.ArtistCollection.Count">
      <summary>Gets the number of Artist objects in the ArtistCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.ArtistCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.ArtistCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the ArtistCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.ArtistCollection.IsDisposed">
      <summary>Gets a value indicating whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.ArtistCollection.Item(System.Int32)">
      <summary>Gets the Artist at the specified index in the ArtistCollection.</summary>
      <param name="index">Index of the Artist to get.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.ArtistCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.Genre">
      <summary>Provides access to genre information in the media library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Genre.Albums">
      <summary>Gets the AlbumCollection for the Genre.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.Equals(Microsoft.Xna.Framework.Media.Genre)">
      <summary>Determines whether the specified Genre is equal to this Genre.</summary>
      <param name="other">Genre to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to this Genre.</summary>
      <param name="obj">Object to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Genre.IsDisposed">
      <summary>Gets a value indicating whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Genre.Name">
      <summary>Gets the name of the Genre.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.op_Equality(Microsoft.Xna.Framework.Media.Genre,Microsoft.Xna.Framework.Media.Genre)">
      <summary>Determines whether the specified Genre instances are equal.</summary>
      <param name="first">Object to the left of the equality operator.</param>
      <param name="second">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.op_Inequality(Microsoft.Xna.Framework.Media.Genre,Microsoft.Xna.Framework.Media.Genre)">
      <summary>Determines whether the specified Genre instances are not equal.</summary>
      <param name="first">Object to the left of the inequality operator.</param>
      <param name="second">Object to the right of the inequality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Genre.Songs">
      <summary>Gets the SongCollection for the Genre.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Genre.ToString">
      <summary>Returns a String representation of the Genre.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.GenreCollection">
      <summary>The collection of all genres in the media library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.GenreCollection.Count">
      <summary>Gets the number of Genre objects in the GenreCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.GenreCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.GenreCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the GenreCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.GenreCollection.IsDisposed">
      <summary>Gets a value indicating whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.GenreCollection.Item(System.Int32)">
      <summary>Gets the Genre at the specified index in the GenreCollection.</summary>
      <param name="index">Index of the Genre to get.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.GenreCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.MediaLibrary">
      <summary>Provides access to songs, playlists, and pictures in the device's media library.  Reference page contains code sample.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaLibrary.#ctor">
      <summary>Initializes a new instance of the MediaLibrary class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaLibrary.#ctor(Microsoft.Xna.Framework.Media.MediaSource)">
      <summary>Initializes a new instance of the MediaLibrary class, using a specific media source to create the new media library.  Reference page contains code sample.</summary>
      <param name="mediaSource">A media source that will be the source for the media library.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.Albums">
      <summary>Gets the AlbumCollection that contains all albums in the media library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.Artists">
      <summary>Gets the ArtistCollection that contains all artists in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaLibrary.Dispose">
      <summary>Releases the resources used by the MediaLibrary.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.Genres">
      <summary>Gets the GenreCollection that contains all genres in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaLibrary.GetPictureFromToken(System.String)">
      <summary>Retrieves a picture from the device's media library based on a picture token. Reference page contains links to related conceptual articles.</summary>
      <param name="token">The picture token. This cannot be null</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.IsDisposed">
      <summary>Gets a value indicating whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.MediaSource">
      <summary>Gets the MediaSource with which this media library was constructed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.Pictures">
      <summary>Gets the PictureCollection that contains all pictures in the media library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.Playlists">
      <summary>Gets the PlaylistCollection that contains all playlists in the media library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.RootPictureAlbum">
      <summary>Gets the root PictureAlbum for all pictures in the media library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.SavedPictures">
      <summary>Returns the collection of all saved pictures in the device's media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaLibrary.SavePicture(System.String,System.Byte[])">
      <summary>Saves the image to the media library, and then returns that saved image as a picture object. Reference page contains links to related conceptual articles.</summary>
      <param name="name">Name of the image file saved to the media library.</param>
      <param name="imageBuffer">Buffer that contains the image in the required JPEG file format.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaLibrary.SavePicture(System.String,System.IO.Stream)">
      <summary>Saves the image contained in the stream object to the media library, and then returns that saved image as a picture object. Reference page contains links to related conceptual articles.</summary>
      <param name="name">Name of the image file that is saved to the media library.</param>
      <param name="source">Stream object that contains the image information in the required JPEG file format.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaLibrary.Songs">
      <summary>Gets the SongCollection that contains all songs in the media library.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.MediaPlayer">
      <summary>Provides methods and properties to play, pause, resume, and stop songs. MediaPlayer also exposes shuffle, repeat, volume, play position, and visualization capabilities. Reference page contains links to related code samples.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Media.MediaPlayer.ActiveSongChanged">
      <summary>Raised when the active song changes due to active playback or due to explicit calls to the MoveNext or MovePrevious methods.</summary>
      <param name="" />
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.GameHasControl">
      <summary>Determines whether the game has control of the background music.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.GetVisualizationData(Microsoft.Xna.Framework.Media.VisualizationData)">
      <summary>Retrieves visualization (frequency and sample) data for the currently-playing song.  Reference page contains code sample.</summary>
      <param name="visualizationData">Visualization (frequency and sample) data for the currently playing song.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.IsMuted">
      <summary>Gets or set the muted setting for the media player.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.IsRepeating">
      <summary>Gets or sets the repeat setting for the media player.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.IsShuffled">
      <summary>Gets or sets the shuffle setting for the media player.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.IsVisualizationEnabled">
      <summary>Gets or sets the visualization enabled setting for the media player.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Media.MediaPlayer.MediaStateChanged">
      <summary>Raised when the media player play state changes.</summary>
      <param name="" />
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.MoveNext">
      <summary>Moves to the next song in the queue of playing songs.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.MovePrevious">
      <summary>Moves to the previous song in the queue of playing songs.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.Pause">
      <summary>Pauses the currently playing song.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.Song)">
      <summary>Plays a Song. Reference page contains links to related code samples.</summary>
      <param name="song">Song to play.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.SongCollection)">
      <summary>Plays a SongCollection. Reference page contains links to related code samples.</summary>
      <param name="songs">SongCollection to play.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.SongCollection,System.Int32)">
      <summary>Plays a SongCollection, starting with the Song at the specified index. Reference page contains links to related code samples.</summary>
      <param name="songs">SongCollection to play.</param>
      <param name="index">Index of the song in the collection at which playback should begin.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.PlayPosition">
      <summary>Gets the play position within the currently playing song.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.Queue">
      <summary>Gets the media playback queue, MediaQueue.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.Resume">
      <summary>Resumes a paused song.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.State">
      <summary>Gets the media playback state, MediaState.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.Stop">
      <summary>Stops playing a song.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaPlayer.Volume">
      <summary>Gets or sets the media player volume.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.MediaQueue">
      <summary>Provides methods and properties to access and control the queue of playing songs.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaQueue.ActiveSong">
      <summary>Gets the current Song in the queue of playing songs.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaQueue.ActiveSongIndex">
      <summary>Gets or sets the index of the current (active) song in the queue of playing songs.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaQueue.Count">
      <summary>Gets the count of songs in the MediaQueue.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaQueue.Item(System.Int32)">
      <summary>Gets the Song at the specified index in the MediaQueue.</summary>
      <param name="index" />
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.MediaSource">
      <summary>Provides methods and properties to access the source or sources from which the media will be read.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaSource.GetAvailableMediaSources">
      <summary>Gets the available media sources.  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaSource.MediaSourceType">
      <summary>Gets the MediaSourceType of this media source.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.MediaSource.Name">
      <summary>Gets the name of this media source.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.MediaSource.ToString">
      <summary>Returns the name of this media source.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.MediaSourceType">
      <summary>Type of the media source.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Media.MediaSourceType.LocalDevice">
      <summary>A local device.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Media.MediaSourceType.WindowsMediaConnect">
      <summary>A Windows Media Connect device.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.MediaState">
      <summary>Media playback state (playing, paused, or stopped).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Media.MediaState.Paused">
      <summary>Media playback is paused.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Media.MediaState.Playing">
      <summary>Media is currently playing.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Media.MediaState.Stopped">
      <summary>Media playback is stopped.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.Picture">
      <summary>Provides access to a picture in the media library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Picture.Album">
      <summary>Gets the picture album that contains the picture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Picture.Date">
      <summary>Gets the picture's date.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.Equals(Microsoft.Xna.Framework.Media.Picture)">
      <summary>Determines whether the specified Picture is equal to this Picture.</summary>
      <param name="other">Picture to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to this Picture.</summary>
      <param name="obj">Object to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.GetImage">
      <summary>Returns the stream that contains the image data.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.GetThumbnail">
      <summary>Returns the stream that contains the picture's thumbnail image data.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Picture.Height">
      <summary>Gets the picture's height.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Picture.IsDisposed">
      <summary>Gets a value indicating whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Picture.Name">
      <summary>Gets the name of the Picture.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.op_Equality(Microsoft.Xna.Framework.Media.Picture,Microsoft.Xna.Framework.Media.Picture)">
      <summary>Determines whether the specified Picture instances are equal.</summary>
      <param name="first">Object to the left of the equality operator.</param>
      <param name="second">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.op_Inequality(Microsoft.Xna.Framework.Media.Picture,Microsoft.Xna.Framework.Media.Picture)">
      <summary>Determines whether the specified Picture instances are not equal.</summary>
      <param name="first">Object to the left of the inequality operator.</param>
      <param name="second">Object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Picture.ToString">
      <summary>Returns a String representation of the Picture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Picture.Width">
      <summary>Gets the picture's width.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.PictureAlbum">
      <summary>Provides access to a picture album in the media library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureAlbum.Albums">
      <summary>Gets the collection of picture albums that are contained within the picture album (that is, picture albums that are children of the picture album).</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.Equals(Microsoft.Xna.Framework.Media.PictureAlbum)">
      <summary>Determines whether the specified PictureAlbum is equal to this PictureAlbum.</summary>
      <param name="other">PictureAlbum to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to this PictureAlbum.</summary>
      <param name="obj">Object to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureAlbum.IsDisposed">
      <summary>Gets a value indicating whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureAlbum.Name">
      <summary>Gets the name of the PictureAlbum.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.op_Equality(Microsoft.Xna.Framework.Media.PictureAlbum,Microsoft.Xna.Framework.Media.PictureAlbum)">
      <summary>Determines whether the specified PictureAlbum instances are equal.</summary>
      <param name="first">Object to the left of the equality operator.</param>
      <param name="second">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.op_Inequality(Microsoft.Xna.Framework.Media.PictureAlbum,Microsoft.Xna.Framework.Media.PictureAlbum)">
      <summary>Determines whether the specified PictureAlbum instances are not equal.</summary>
      <param name="first">Object to the left of the inequality operator.</param>
      <param name="second">Object to the right of the inequality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureAlbum.Parent">
      <summary>Gets the parent picture album.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureAlbum.Pictures">
      <summary>Gets the collection of pictures in this picture album.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbum.ToString">
      <summary>Returns a String representation of the PictureAlbum.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.PictureAlbumCollection">
      <summary>A collection of picture albums in the media library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureAlbumCollection.Count">
      <summary>Gets the number of PictureAlbum objects in the PictureAlbumCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbumCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbumCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the PictureAlbumCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureAlbumCollection.IsDisposed">
      <summary>Gets a value indicating whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureAlbumCollection.Item(System.Int32)">
      <summary>Gets the PictureAlbum at the specified index in the PictureAlbumCollection.</summary>
      <param name="index" />
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureAlbumCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.PictureCollection">
      <summary>A collection of pictures in the media library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureCollection.Count">
      <summary>Gets the number of Picture objects in the PictureCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the PictureCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureCollection.IsDisposed">
      <summary>Gets a value indicating whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PictureCollection.Item(System.Int32)">
      <summary>Gets the Picture at the specified index in the PictureCollection.</summary>
      <param name="index" />
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PictureCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.Playlist">
      <summary>Provides access to a playlist in the media library.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Playlist.Duration">
      <summary>Gets the duration of the Playlist.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.Equals(Microsoft.Xna.Framework.Media.Playlist)">
      <summary>Determines whether the specified Playlist is equal to this Playlist.</summary>
      <param name="other">Playlist to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to this Playlist.</summary>
      <param name="obj">Object to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Playlist.IsDisposed">
      <summary>Gets a value indicating whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Playlist.Name">
      <summary>Gets the name of the Playlist.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.op_Equality(Microsoft.Xna.Framework.Media.Playlist,Microsoft.Xna.Framework.Media.Playlist)">
      <summary>Determines whether the specified Playlist instances are equal.</summary>
      <param name="first">Object to the left of the equality operator.</param>
      <param name="second">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.op_Inequality(Microsoft.Xna.Framework.Media.Playlist,Microsoft.Xna.Framework.Media.Playlist)">
      <summary>Determines whether the specified Playlist instances are not equal.</summary>
      <param name="first">Object to the left of the inequality operator.</param>
      <param name="second">Object to the right of the inequality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Playlist.Songs">
      <summary>Gets a SongCollection that contains the songs in the playlist.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Playlist.ToString">
      <summary>Returns a String representation of the Playlist.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.PlaylistCollection">
      <summary>A collection of playlists in the media library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PlaylistCollection.Count">
      <summary>Gets the number of Playlist objects in the PlaylistCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PlaylistCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PlaylistCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the PlaylistCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PlaylistCollection.IsDisposed">
      <summary>Gets a value indicating whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.PlaylistCollection.Item(System.Int32)">
      <summary>Gets the Playlist at the specified index in the PlaylistCollection.</summary>
      <param name="index" />
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.PlaylistCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.Song">
      <summary>Provides access to a song in the song library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.Album">
      <summary>Gets the Album on which the Song appears.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.Artist">
      <summary>Gets the Artist of the Song.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.Duration">
      <summary>Gets the duration of the Song.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.Equals(Microsoft.Xna.Framework.Media.Song)">
      <summary>Determines whether the specified Song is equal to this Song.</summary>
      <param name="other">Song to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to this Song.</summary>
      <param name="obj">Object to compare with this instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.FromUri(System.String,System.Uri)">
      <summary>Constructs a new Song object based on the specified URI.</summary>
      <param name="name">Name of the song.</param>
      <param name="uri">Uri object that represents the URI.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.Genre">
      <summary>Gets the Genre of the Song.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.IsDisposed">
      <summary>Gets a value indicating whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.IsProtected">
      <summary>Gets a value that indicates whether the song is DRM protected content.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.IsRated">
      <summary>Gets a value that indicates whether the song has been rated by the user.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.Name">
      <summary>Gets the name of the Song.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.op_Equality(Microsoft.Xna.Framework.Media.Song,Microsoft.Xna.Framework.Media.Song)">
      <summary>Determines whether the specified Song instances are equal.</summary>
      <param name="first">Object to the left of the equality operator.</param>
      <param name="second">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.op_Inequality(Microsoft.Xna.Framework.Media.Song,Microsoft.Xna.Framework.Media.Song)">
      <summary>Determines whether the specified Song instances are not equal.</summary>
      <param name="first">Object to the left of the inequality operator.</param>
      <param name="second">Object to the right of the inequality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.PlayCount">
      <summary>Gets the song play count.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.Rating">
      <summary>Gets the user's rating for the Song.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.Song.ToString">
      <summary>Returns a String representation of the Song.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.Song.TrackNumber">
      <summary>Gets the track number of the song on the song's Album.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.SongCollection">
      <summary>A collection of songs in the song library.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.SongCollection.Count">
      <summary>Gets the number of Song objects in the SongCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.SongCollection.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.SongCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the SongCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.SongCollection.IsDisposed">
      <summary>Gets a value indicating whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.SongCollection.Item(System.Int32)">
      <summary>Gets the Song at the specified index in the SongCollection.</summary>
      <param name="index" />
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.SongCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Media.VisualizationData">
      <summary>Encapsulates visualization (frequency and sample) data for the currently-playing song.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Media.VisualizationData.#ctor">
      <summary>Initializes a new instance of the VisualizationData class.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.VisualizationData.Frequencies">
      <summary>Returns a collection of floats that contain frequency data.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Media.VisualizationData.Samples">
      <summary>Returns a collection of floats that contain sample data.</summary>
    </member>
  </members>
</doc>