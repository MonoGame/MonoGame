<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="T:Microsoft.Xna.Framework.Graphics.AlphaTestEffect">
      <summary>Contains a configurable effect that supports alpha testing.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.#ctor(Microsoft.Xna.Framework.Graphics.AlphaTestEffect)">
      <summary>Creates a new AlphaTestEffect by cloning parameter settings from an existing instance.</summary>
      <param name="cloneSource">A copy of an AlphaTestEffect.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>Creates a new AlphaTestEffect with default parameter settings.</summary>
      <param name="device">A graphics device.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.Alpha">
      <summary>Gets or sets the material alpha which determines its transparency. Range is between 1 (fully opaque) and 0 (fully transparent).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.AlphaFunction">
      <summary>Gets or sets the compare function for alpha test. The default value is Greater.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.Clone">
      <summary>Creates a clone of the current AlphaTestEffect instance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.DiffuseColor">
      <summary>Gets or sets the diffuse color for a material, the range of color values is from 0 to 1.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.FogColor">
      <summary>Gets or sets the fog color, the range of color values is from 0 to 1.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.FogEnabled">
      <summary>Gets or sets the fog enable flag.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.FogEnd">
      <summary>Gets or sets the maximum z value for fog.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.FogStart">
      <summary>Gets or sets the minimum z value for fog.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.OnApply">
      <summary>Computes derived parameter values immediately before applying the effect using a lazy architecture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.Projection">
      <summary>Gets or sets the projection matrix.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.ReferenceAlpha">
      <summary>Gets or sets the reference alpha value, the default value is 0.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.Texture">
      <summary>Gets or sets the current texture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.VertexColorEnabled">
      <summary>Gets or sets whether vertex color is enabled.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.View">
      <summary>Gets or sets the view matrix.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.World">
      <summary>Gets or sets the world matrix.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BasicEffect">
      <summary>Contains a basic rendering effect.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.#ctor(Microsoft.Xna.Framework.Graphics.BasicEffect)">
      <summary>Creates an instance of this object.</summary>
      <param name="cloneSource">An instance of a object to copy initialization data from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>Creates an instance of this object.</summary>
      <param name="device">A device.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.Alpha">
      <summary>Gets or sets the material alpha which determines its transparency. Range is between 1 (fully opaque) and 0 (fully transparent).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.AmbientLightColor">
      <summary>Gets or sets the ambient color for a light, the range of color values is from 0 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.Clone">
      <summary>Create a copy of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.DiffuseColor">
      <summary>Gets or sets the diffuse color for a material, the range of color values is from 0 to 1.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.DirectionalLight0">
      <summary>Gets the first directional light for this effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.DirectionalLight1">
      <summary>Gets the second directional light for this effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.DirectionalLight2">
      <summary>Gets the third directional light for this effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.EmissiveColor">
      <summary>Gets or sets the emissive color for a material, the range of color values is from 0 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.EnableDefaultLighting">
      <summary>Enables default lighting for this effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.FogColor">
      <summary>Gets or sets the fog color, the range of color values is from 0 to 1.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.FogEnabled">
      <summary>Enables fog.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.FogEnd">
      <summary>Gets or sets the maximum z value for fog.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.FogStart">
      <summary>Gets or sets the minimum z value for fog.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.LightingEnabled">
      <summary>Enables lighting for this effect.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.OnApply">
      <summary>Computes derived parameter values immediately before applying the effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.PreferPerPixelLighting">
      <summary>Gets or sets a value indicating that per-pixel lighting should be used if it is available for the current adapter. Per-pixel lighting is available if a graphics adapter supports Pixel Shader Model 2.0.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.Projection">
      <summary />
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.SpecularColor">
      <summary>Gets or sets the specular color for a material, the range of color values is from 0 to 1.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.SpecularPower">
      <summary>Gets or sets the specular power of this effect material.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.Texture">
      <summary>Gets or sets a texture to be applied by this effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.TextureEnabled">
      <summary>Enables textures for this effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.VertexColorEnabled">
      <summary>Enables use vertex colors for this effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.View">
      <summary />
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.World">
      <summary />
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Blend">
      <summary>Defines color blending factors.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.BlendFactor">
      <summary>Each component of the color is multiplied by a constant set in BlendFactor.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.DestinationAlpha">
      <summary>Each component of the color is multiplied by the alpha value of the destination. This can be represented as (Ad, Ad, Ad, Ad), where Ad is the destination alpha value.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.DestinationColor">
      <summary>Each component color is multiplied by the destination color. This can be represented as (Rd, Gd, Bd, Ad), where R, G, B, and A respectively stand for red, green, blue, and alpha destination values.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.InverseBlendFactor">
      <summary>Each component of the color is multiplied by the inverse of a constant set in BlendFactor.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.InverseDestinationAlpha">
      <summary>Each component of the color is multiplied by the inverse of the alpha value of the destination. This can be represented as (1 − Ad, 1 − Ad, 1 − Ad, 1 − Ad), where Ad is the alpha destination value.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.InverseDestinationColor">
      <summary>Each component of the color is multiplied by the inverse of the destination color. This can be represented as (1 − Rd, 1 − Gd, 1 − Bd, 1 − Ad), where Rd, Gd, Bd, and Ad respectively stand for the red, green, blue, and alpha destination values.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.InverseSourceAlpha">
      <summary>Each component of the color is multiplied by the inverse of the alpha value of the source. This can be represented as (1 − As, 1 − As, 1 − As, 1 − As), where As is the alpha destination value.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.InverseSourceColor">
      <summary>Each component of the color is multiplied by the inverse of the source color. This can be represented as (1 − Rs, 1 − Gs, 1 − Bs, 1 − As) where R, G, B, and A respectively stand for the red, green, blue, and alpha destination values.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.One">
      <summary>Each component of the color is multiplied by (1, 1, 1, 1).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.SourceAlpha">
      <summary>Each component of the color is multiplied by the alpha value of the source. This can be represented as (As, As, As, As), where As is the alpha source value.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.SourceAlphaSaturation">
      <summary>Each component of the color is multiplied by either the alpha of the source color, or the inverse of the alpha of the source color, whichever is greater. This can be represented as (f, f, f, 1), where f = min(A, 1 − Ad).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.SourceColor">
      <summary>Each component of the color is multiplied by the source color. This can be represented as (Rs, Gs, Bs, As), where R, G, B, and A respectively stand for the red, green, blue, and alpha source values.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.Blend.Zero">
      <summary>Each component of the color is multiplied by (0, 0, 0, 0).</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BlendFunction">
      <summary>Defines how to combine a source color with the destination color already on the render target for color blending.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BlendFunction.Add">
      <summary>The result is the destination added to the source. Result = (Source Color * Source Blend) + (Destination Color * Destination Blend)</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BlendFunction.Max">
      <summary>The result is the maximum of the source and destination. Result = max( (Source Color * Source Blend), (Destination Color * Destination Blend) )</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BlendFunction.Min">
      <summary>The result is the minimum of the source and destination. Result = min( (Source Color * Source Blend), (Destination Color * Destination Blend) )</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BlendFunction.ReverseSubtract">
      <summary>The result is the source subtracted from the destination. Result = (Destination Color * Destination Blend) − (Source Color * Source Blend)</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BlendFunction.Subtract">
      <summary>The result is the destination subtracted from the source. Result = (Source Color * Source Blend) − (Destination Color * Destination Blend)</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BlendState">
      <summary>Contains blend state for the device.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BlendState.#ctor">
      <summary>Creates an instance of the BlendState class with default values, using additive color and alpha blending.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BlendState.Additive">
      <summary>A built-in state object with settings for additive blend that is adding the destination data to the source data without using alpha.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BlendState.AlphaBlend">
      <summary>A built-in state object with settings for alpha blend that is blending the source and destination data using alpha.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.AlphaBlendFunction">
      <summary>Gets or sets the arithmetic operation when blending alpha values. The default is BlendFunction.Add.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.AlphaDestinationBlend">
      <summary>Gets or sets the blend factor for the destination alpha, which is the percentage of the destination alpha included in the blended result. The default is Blend.One.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.AlphaSourceBlend">
      <summary>Gets or sets the alpha blend factor. The default is Blend.One.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.BlendFactor">
      <summary>Gets or sets the four-component (RGBA) blend factor for alpha blending.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.ColorBlendFunction">
      <summary>Gets or sets the arithmetic operation when blending color values. The default is BlendFunction.Add.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.ColorDestinationBlend">
      <summary>Gets or sets the blend factor for the destination color. The default is Blend.One.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.ColorSourceBlend">
      <summary>Gets or sets the blend factor for the source color. The default is Blend.One.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.ColorWriteChannels">
      <summary>Gets or sets which color channels (RGBA) are enabled for writing during color blending. The default value is ColorWriteChannels.None.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.ColorWriteChannels1">
      <summary>Gets or sets which color channels (RGBA) are enabled for writing during color blending. The default value is ColorWriteChannels.None.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.ColorWriteChannels2">
      <summary>Gets or sets which color channels (RGBA) are enabled for writing during color blending. The default value is ColorWriteChannels.None.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.ColorWriteChannels3">
      <summary>Gets or sets which color channels (RGBA) are enabled for writing during color blending. The default value is ColorWriteChannels.None.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BlendState.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="disposing">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.MultiSampleMask">
      <summary>Gets or sets a bitmask which defines which samples can be written during multisampling. The default is 0xffffffff.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BlendState.NonPremultiplied">
      <summary>A built-in state object with settings for blending with non-premultipled alpha that is blending source and destination data by using alpha while assuming the color data contains no alpha information.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BlendState.Opaque">
      <summary>A built-in state object with settings for opaque blend that is overwriting the source with the destination data.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BufferUsage">
      <summary>Specifies special usage of the buffer contents.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BufferUsage.None">
      <summary>None</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.BufferUsage.WriteOnly">
      <summary>Indicates that the application only writes to the vertex buffer. If specified, the driver chooses the best memory location for efficient writing and rendering. Attempts to read from a write-only vertex buffer fail.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ClearOptions">
      <summary>Specifies the buffer to use when calling Clear.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ClearOptions.DepthBuffer">
      <summary>A depth buffer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ClearOptions.Stencil">
      <summary>A stencil buffer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ClearOptions.Target">
      <summary>A render target.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ColorWriteChannels">
      <summary>Defines the color channels that can be chosen for a per-channel write to a render target color buffer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.All">
      <summary>All buffer channels.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.Alpha">
      <summary>Alpha channel of a buffer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.Blue">
      <summary>Blue channel of a buffer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.Green">
      <summary>Green channel of a buffer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.None">
      <summary>No channel selected.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.Red">
      <summary>Red channel of a buffer.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CompareFunction">
      <summary>Defines comparison functions that can be chosen for alpha, stencil, or depth-buffer tests.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Always">
      <summary>Always pass the test.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Equal">
      <summary>Accept the new pixel if its value is equal to the value of the current pixel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Greater">
      <summary>Accept the new pixel if its value is greater than the value of the current pixel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.GreaterEqual">
      <summary>Accept the new pixel if its value is greater than or equal to the value of the current pixel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Less">
      <summary>Accept the new pixel if its value is less than the value of the current pixel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.LessEqual">
      <summary>Accept the new pixel if its value is less than or equal to the value of the current pixel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Never">
      <summary>Always fail the test.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.NotEqual">
      <summary>Accept the new pixel if its value does not equal the value of the current pixel.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CubeMapFace">
      <summary>Defines the faces of a cube map in the TextureCube class type.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.NegativeX">
      <summary>Negative x-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.NegativeY">
      <summary>Negative y-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.NegativeZ">
      <summary>Negative z-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.PositiveX">
      <summary>Positive x-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.PositiveY">
      <summary>Positive y-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.PositiveZ">
      <summary>Positive z-face of the cube map.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CullMode">
      <summary>Defines winding orders that may be used to identify back faces for culling.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CullMode.CullClockwiseFace">
      <summary>Cull back faces with clockwise vertices.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CullMode.CullCounterClockwiseFace">
      <summary>Cull back faces with counterclockwise vertices.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.CullMode.None">
      <summary>Do not cull back faces.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DepthFormat">
      <summary>Defines the format of data in a depth-stencil buffer. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Depth16">
      <summary>A buffer that contains 16-bits of depth data.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Depth24">
      <summary>A buffer that contains 24-bits of depth data.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Depth24Stencil8">
      <summary>A 32 bit buffer that contains 24 bits of depth data and 8 bits of stencil data.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.None">
      <summary>Do not create a depth buffer.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DepthStencilState">
      <summary>Contains depth-stencil state for the device.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DepthStencilState.#ctor">
      <summary>Creates an instance of DepthStencilState with default values.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.CounterClockwiseStencilDepthBufferFail">
      <summary>Gets or sets the stencil operation to perform if the stencil test passes and the depth-buffer test fails for a counterclockwise triangle. The default is StencilOperation.Keep.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.CounterClockwiseStencilFail">
      <summary>Gets or sets the stencil operation to perform if the stencil test fails for a counterclockwise triangle. The default is StencilOperation.Keep.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.CounterClockwiseStencilFunction">
      <summary>Gets or sets the comparison function to use for counterclockwise stencil tests. The default is CompareFunction.Always.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.CounterClockwiseStencilPass">
      <summary>Gets or sets the stencil operation to perform if the stencil and depth-tests pass for a counterclockwise triangle. The default is StencilOperation.Keep.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthStencilState.Default">
      <summary>A built-in state object with default settings for using a depth stencil buffer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.DepthBufferEnable">
      <summary>Enables or disables depth buffering. The default is true.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.DepthBufferFunction">
      <summary>Gets or sets the comparison function for the depth-buffer test. The default is CompareFunction.LessEqual</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.DepthBufferWriteEnable">
      <summary>Enables or disables writing to the depth buffer. The default is true.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthStencilState.DepthRead">
      <summary>A built-in state object with settings for enabling a read-only depth stencil buffer.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DepthStencilState.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="disposing">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.DepthStencilState.None">
      <summary>A built-in state object with settings for not using a depth stencil buffer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.ReferenceStencil">
      <summary>Specifies a reference value to use for the stencil test. The default is 0.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.StencilDepthBufferFail">
      <summary>Gets or sets the stencil operation to perform if the stencil test passes and the depth-test fails. The default is StencilOperation.Keep.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.StencilEnable">
      <summary>Gets or sets stencil enabling. The default is false.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.StencilFail">
      <summary>Gets or sets the stencil operation to perform if the stencil test fails. The default is StencilOperation.Keep.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.StencilFunction">
      <summary>Gets or sets the comparison function for the stencil test. The default is CompareFunction.Always.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.StencilMask">
      <summary>Gets or sets the mask applied to the reference value and each stencil buffer entry to determine the significant bits for the stencil test. The default mask is Int32.MaxValue.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.StencilPass">
      <summary>Gets or sets the stencil operation to perform if the stencil test passes. The default is StencilOperation.Keep.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.StencilWriteMask">
      <summary>Gets or sets the write mask applied to values written into the stencil buffer. The default mask is Int32.MaxValue.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DepthStencilState.TwoSidedStencilMode">
      <summary>Enables or disables two-sided stenciling. The default is false.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DeviceLostException">
      <summary>The exception that is thrown when the device has been lost, but cannot be reset at this time. Therefore, rendering is not possible.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceLostException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceLostException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceLostException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DeviceNotResetException">
      <summary>The exception that is thrown when the device has been lost, but can be reset at this time.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceNotResetException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceNotResetException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceNotResetException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DirectionalLight">
      <summary>Creates a DirectionalLight object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DirectionalLight.#ctor(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Graphics.DirectionalLight)">
      <summary>Creates a new DirectionalLight instance, with or without a copy of a DirectionalLight instance.</summary>
      <param name="directionParameter">The light direction.</param>
      <param name="diffuseColorParameter">The diffuse color.</param>
      <param name="specularColorParameter">The specular color.</param>
      <param name="cloneSource">The cloned instance to copy from.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DirectionalLight.DiffuseColor">
      <summary>Gets or sets the diffuse color of the light.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DirectionalLight.Direction">
      <summary>Gets or sets the light direction. This value must be a unit vector.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DirectionalLight.Enabled">
      <summary>Gets or sets light enable flag.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DirectionalLight.SpecularColor">
      <summary>Gets or sets the specular color of the light.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DisplayMode">
      <summary>Describes the display mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayMode.AspectRatio">
      <summary>Gets the aspect ratio used by the graphics device.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayMode.Format">
      <summary>Gets a value indicating the surface format of the display mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayMode.Height">
      <summary>Gets a value indicating the screen height, in pixels.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayMode.TitleSafeArea">
      <summary>Returns the title safe area of the display.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayMode.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayMode.Width">
      <summary>Gets a value indicating the screen width, in pixels.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DisplayModeCollection">
      <summary>Manipulates a collection of DisplayMode structures.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.GetEnumerator">
      <summary>Gets an enumerator that can iterate through the DisplayModeCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Item(Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Retrieves the DisplayMode structure with the specified format.</summary>
      <param name="format">The format of the DisplayMode to retrieve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gets a collection of display modes available for this format.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DualTextureEffect">
      <summary>Contains a configurable effect that supports two-layer multitexturing.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DualTextureEffect.#ctor(Microsoft.Xna.Framework.Graphics.DualTextureEffect)">
      <summary>Creates a new DualTextureEffect by cloning parameter settings from an existing instance.</summary>
      <param name="cloneSource">The object to clone.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DualTextureEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>Creates a new DualTextureEffect with default parameter settings.</summary>
      <param name="device">The graphics device.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.Alpha">
      <summary>Gets or sets the material alpha which determines its transparency. Range is between 1 (fully opaque) and 0 (fully transparent).</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DualTextureEffect.Clone">
      <summary>Creates a clone of the current DualTextureEffect instance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.DiffuseColor">
      <summary>Gets or sets the diffuse color for a material, the range of color values is from 0 to 1.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.FogColor">
      <summary>Gets or sets the fog color, the range of color values is from 0 to 1.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.FogEnabled">
      <summary>Gets or sets the fog enable flag.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.FogEnd">
      <summary>Gets or sets the maximum z value for fog.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.FogStart">
      <summary>Gets or sets the minimum z value for fog.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DualTextureEffect.OnApply">
      <summary>Computes derived parameter values immediately before applying the effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.Projection">
      <summary>Gets or sets the projection matrix.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.Texture">
      <summary>Gets or sets the current base texture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.Texture2">
      <summary>Gets or sets the current overlay texture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.VertexColorEnabled">
      <summary>Gets or sets whether per-vertex color is enabled.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.View">
      <summary>Gets or sets the view matrix.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.World">
      <summary>Gets or sets the world matrix.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer">
      <summary />
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.IndexElementSize,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Create a new instance of this class.</summary>
      <param name="graphicsDevice">The associated graphics device.</param>
      <param name="indexElementSize">Size of each index element.</param>
      <param name="indexCount">Number of indices in the buffer.</param>
      <param name="usage">Behavior options.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Type,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Create a new instance of this class.</summary>
      <param name="graphicsDevice">The associated graphics device.</param>
      <param name="indexType">The index type.</param>
      <param name="indexCount">The number of indicies in the buffer.</param>
      <param name="usage">Behavior options.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.ContentLost">
      <summary>Occurs when resources are lost due to a lost device event.</summary>
      <param name="" />
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.IsContentLost">
      <summary>Determines if the index buffer data has been lost due to a lost device event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Sets dynamic index buffer data, specifying the offset, start index, number of elements and options.</summary>
      <param name="offsetInBytes">Offset in bytes from the beginning of the buffer to the data.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">The first element to use.</param>
      <param name="elementCount">The number of elements to use.</param>
      <param name="options">Specifies whether existing data in the buffer will be kept after this operation. Dynamic geometry may be rendered on the Xbox 360 by using DrawUserIndexedPrimitives instead of setting the data for the index buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.SetData``1(``0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Sets dynamic index buffer data, specifying the start index, number of elements and options.</summary>
      <param name="data">Array of data.</param>
      <param name="startIndex">The first element to use.</param>
      <param name="elementCount">The number of elements to use.</param>
      <param name="options">Specifies whether existing data in the buffer will be kept after this operation. Dynamic geometry may be rendered on the Xbox 360 by using DrawUserIndexedPrimitives instead of setting the data for the index buffer.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer">
      <summary />
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.VertexDeclaration,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Creates a new instance of this object.</summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="vertexDeclaration">The vertex declaration, which describes per-vertex data.</param>
      <param name="vertexCount">The number of vertices.</param>
      <param name="usage">Behavior options; it is good practice for this to match the createOptions parameter in the GraphicsDevice constructor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Type,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Creates a new instance of this object.</summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="vertexType">The data type.</param>
      <param name="vertexCount">The number of vertices.</param>
      <param name="usage">Behavior options; it is good practice for this to match the createOptions parameter in the GraphicsDevice constructor.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.ContentLost">
      <summary>Occurs when resources are lost due to a lost device event.</summary>
      <param name="" />
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.IsContentLost">
      <summary>Determines if the index buffer data has been lost due to a lost device event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Sets dynamic vertex buffer data, specifying the offset, start index, number of elements and vertex stride.</summary>
      <param name="offsetInBytes">Offset in bytes from the beginning of the buffer to the data.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">The first element to use.</param>
      <param name="elementCount">The number of elements to use.</param>
      <param name="vertexStride">The size, in bytes, of the elements in the vertex buffer.</param>
      <param name="options">Specifies whether existing data in the buffer will be kept after this operation. Dynamic geometry may be rendered on the Xbox 360 by using DrawUserIndexedPrimitives instead of setting the data for the vertex buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.SetData``1(``0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Sets dynamic vertex buffer data, specifying the start index, number of elements and options.</summary>
      <param name="data">Array of data.</param>
      <param name="startIndex">The first element to use.</param>
      <param name="elementCount">The number of elements to use.</param>
      <param name="options">Specifies whether existing data in the buffer will be kept after this operation. Dynamic geometry may be rendered on the Xbox 360 by using DrawUserIndexedPrimitives instead of setting the data for the vertex buffer.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Effect">
      <summary>Used to set and query effects, and to choose techniques. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>Creates an instance of this object.</summary>
      <param name="cloneSource">An object to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Byte[])">
      <summary>Creates an instance of this object.</summary>
      <param name="graphicsDevice">The device.</param>
      <param name="effectCode">The effect code.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Clone">
      <summary>Copies data from an existing object to this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Effect.CurrentTechnique">
      <summary>Gets or sets the active technique.  Reference page contains code sample.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the Effect and optionally releases the managed resources.</summary>
      <param name="disposing">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.OnApply">
      <summary>Applies the effect state just prior to rendering the effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Effect.Parameters">
      <summary>Gets a collection of parameters used for this effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Effect.Techniques">
      <summary>Gets a collection of techniques that are defined for this effect.  Reference page contains code sample.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectAnnotation">
      <summary>Represents an annotation to an EffectParameter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotation.ColumnCount">
      <summary>Gets the number of columns in this effect annotation.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueBoolean">
      <summary>Gets the value of the EffectAnnotation as a Boolean.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueInt32">
      <summary>Gets the value of the EffectAnnotation as a Int32.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueMatrix">
      <summary>Gets the value of the EffectAnnotation as a Int32.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueSingle">
      <summary>Gets the value of the EffectAnnotation as a Single.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueString">
      <summary>Gets the value of the EffectAnnotation as a String.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueVector2">
      <summary>Gets the value of the EffectAnnotation as a Vector2.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueVector3">
      <summary>Gets the value of the EffectAnnotation as a Vector3.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueVector4">
      <summary>Gets the value of the EffectAnnotation as a Vector4.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotation.Name">
      <summary>Gets the name of the effect annotation.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotation.ParameterClass">
      <summary>Gets the parameter class of this effect annotation.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotation.ParameterType">
      <summary>Gets the parameter type of this effect annotation.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotation.RowCount">
      <summary>Gets the row count of this effect annotation.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotation.Semantic">
      <summary>Gets the semantic of this effect annotation.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection">
      <summary>Manipulates a collection of EffectAnnotation objects.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.Count">
      <summary>Gets the number of EffectAnnotation objects in this EffectAnnotationCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gets an enumerator that can iterate through the EffectAnnotationCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.GetEnumerator">
      <summary>Gets an enumerator that can iterate through the EffectAnnotationCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Gets an enumerator that can iterate through the EffectAnnotationCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.Item(System.Int32)">
      <summary>Gets a specific EffectAnnotation object by using an index value.</summary>
      <param name="index">Index of the EffectAnnotation to get.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.Item(System.String)">
      <summary>Gets a specific EffectAnnotation object by using a name.</summary>
      <param name="name">Name of the EffectAnnotation to get.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectMaterial">
      <summary>Contains an effect subclass which is used to load data for an EffectMaterialContent type.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectMaterial.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>Creates an instance of this object.</summary>
      <param name="cloneSource">An instance of an object to copy initialization data from.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectParameter">
      <summary>Represents an Effect parameter.  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.Annotations">
      <summary>Gets the collection of EffectAnnotation objects for this parameter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.ColumnCount">
      <summary>Gets the number of columns in the parameter description.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.Elements">
      <summary>Gets the collection of effect parameters.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueBoolean">
      <summary>Gets the value of the EffectParameter as a Boolean.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueBooleanArray(System.Int32)">
      <summary>Gets the value of the EffectParameter as an array of Boolean.</summary>
      <param name="count">The number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueInt32">
      <summary>Gets the value of the EffectParameter as an Int32.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueInt32Array(System.Int32)">
      <summary>Gets the value of the EffectParameter as an array of Int32.</summary>
      <param name="count">The number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueMatrix">
      <summary>Gets the value of the EffectParameter as a Matrix.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueMatrixArray(System.Int32)">
      <summary>Gets the value of the EffectParameter as an array of Matrix.</summary>
      <param name="count">The number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueMatrixTranspose">
      <summary>Gets the value of the EffectParameter as a Matrix transpose.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueMatrixTransposeArray(System.Int32)">
      <summary>Gets the value of the EffectParameter as an array of Matrix transpose.</summary>
      <param name="count">The number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueQuaternion">
      <summary>Gets the value of the EffectParameter as a Quaternion.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueQuaternionArray(System.Int32)">
      <summary>Gets the value of the EffectParameter as an array of Quaternion.</summary>
      <param name="count">The number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueSingle">
      <summary>Gets the value of the EffectParameter as a Single.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueSingleArray(System.Int32)">
      <summary>Gets the value of the EffectParameter as an array of Single.</summary>
      <param name="count">The number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueString">
      <summary>Gets the value of the EffectParameter as an String.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueTexture2D">
      <summary>Gets the value of the EffectParameter as a Texture2D.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueTexture3D">
      <summary>Gets the value of the EffectParameter as a Texture3D.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueTextureCube">
      <summary>Gets the value of the EffectParameter as a TextureCube.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueVector2">
      <summary>Gets the value of the EffectParameter as a Vector2.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueVector2Array(System.Int32)">
      <summary>Gets the value of the EffectParameter as an array of Vector2.</summary>
      <param name="count">The number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueVector3">
      <summary>Gets the value of the EffectParameter as a Vector3.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueVector3Array(System.Int32)">
      <summary>Gets the value of the EffectParameter as an array of Vector3.</summary>
      <param name="count">The number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueVector4">
      <summary>Gets the value of the EffectParameter as a Vector4.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueVector4Array(System.Int32)">
      <summary>Gets the value of the EffectParameter as an array of Vector4.</summary>
      <param name="count">The number of elements in the array.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.Name">
      <summary>Gets the name of the parameter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.ParameterClass">
      <summary>Gets the class of the parameter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.ParameterType">
      <summary>Gets the type of the parameter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.RowCount">
      <summary>Gets the number of rows in the parameter description.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.Semantic">
      <summary>Gets the semantic meaning, or usage, of the parameter.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Graphics.Texture)">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Matrix)">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Matrix[])">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Quaternion)">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Quaternion[])">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Vector2)">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Vector2[])">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Vector3)">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Vector3[])">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Vector4[])">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(System.Boolean)">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">[MarshalAsAttribute(U1)] The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(System.Boolean[])">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(System.Int32)">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(System.Int32[])">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(System.Single)">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(System.Single[])">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(System.String)">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to assign to the EffectParameter.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValueTranspose(Microsoft.Xna.Framework.Matrix)">
      <summary>Sets the value of the EffectParameter to the transpose of a Matrix.</summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValueTranspose(Microsoft.Xna.Framework.Matrix[])">
      <summary>Sets the value of the EffectParameter to the transpose of a Matrix.</summary>
      <param name="value">The value.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.StructureMembers">
      <summary>Gets the collection of structure members.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectParameterClass">
      <summary>Defines classes that can be used for effect parameters or shader constants.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterClass.Matrix">
      <summary>Constant is a matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterClass.Object">
      <summary>Constant is either a texture, a shader, or a string.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterClass.Scalar">
      <summary>Constant is a scalar.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterClass.Struct">
      <summary>Constant is a structure.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterClass.Vector">
      <summary>Constant is a vector.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectParameterCollection">
      <summary>Manipulates a collection of EffectParameter objects.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameterCollection.Count">
      <summary>Gets the number of EffectParameter objects in this EffectParameterCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gets an enumerator that can iterate through EffectParameterCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterCollection.GetEnumerator">
      <summary>Gets an enumerator that can iterate through EffectParameterCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Gets an enumerator that can iterate through the EffectParameterCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterCollection.GetParameterBySemantic(System.String)">
      <summary>Gets an effect parameter from its semantic usage.</summary>
      <param name="semantic">The semantic meaning, or usage, of the parameter.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameterCollection.Item(System.Int32)">
      <summary>Gets a specific EffectParameter object by using an index value.</summary>
      <param name="index">Index of the EffectParameter to get.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameterCollection.Item(System.String)">
      <summary>Gets a specific EffectParameter by name.</summary>
      <param name="name">The name of the EffectParameter to retrieve.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectParameterType">
      <summary>Defines types that can be used for effect parameters or shader constants.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Bool">
      <summary>Parameter is a Boolean. Any nonzero value passed in will be mapped to 1 (TRUE) before being written into the constant table; otherwise, the value will be set to 0 in the constant table.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Int32">
      <summary>Parameter is an integer. Any floating-point values passed in will be rounded off (to zero decimal places) before being written into the constant table.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Single">
      <summary>Parameter is a floating-point number.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.String">
      <summary>Parameter is a string.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Texture">
      <summary>Parameter is a texture.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Texture1D">
      <summary>Parameter is a 1D texture.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Texture2D">
      <summary>Parameter is a 2D texture.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Texture3D">
      <summary>Parameter is a 3D texture.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.TextureCube">
      <summary>Parameter is a cube texture.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Void">
      <summary>Parameter is a void pointer.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectPass">
      <summary>Contains rendering state for drawing with an effect; an effect can contain one or more passes.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectPass.Annotations">
      <summary>Gets the set of EffectAnnotation objects for this EffectPass.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPass.Apply">
      <summary>Begins this pass.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectPass.Name">
      <summary>Gets the name of this pass.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectPassCollection">
      <summary>Manipulates a collection of EffectPass objects.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectPassCollection.Count">
      <summary>Gets the number of objects in the collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPassCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gets an enumerator that can iterate through the EffectPassCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPassCollection.GetEnumerator">
      <summary>Gets an enumerator that can iterate through the EffectPassCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPassCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Gets an enumerator that can iterate through the EffectPassCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectPassCollection.Item(System.Int32)">
      <summary>Gets a specific element in the collection by using an index value.</summary>
      <param name="index">Index of the EffectPass to get.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectPassCollection.Item(System.String)">
      <summary>Gets a specific element in the collection by using a name.</summary>
      <param name="name">Name of the EffectPass to get.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectTechnique">
      <summary>Represents an effect technique.  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectTechnique.Annotations">
      <summary>Gets the EffectAnnotation objects associated with this technique.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectTechnique.Name">
      <summary>Gets the name of this technique.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectTechnique.Passes">
      <summary>Gets the collection of EffectPass objects this rendering technique requires.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection">
      <summary>Manipulates a collection of EffectTechnique objects.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.Count">
      <summary>Gets the number of objects in the collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gets an enumerator that can iterate through the EffectTechniqueCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.GetEnumerator">
      <summary>Gets an enumerator that can iterate through the EffectTechniqueCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Gets an enumerator that can iterate through the EffectTechniqueCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.Item(System.Int32)">
      <summary>Gets a specific element in the collection by using an index value.</summary>
      <param name="index">Index of the EffectTechnique to get.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.Item(System.String)">
      <summary>Gets a specific element in the collection by using a name.</summary>
      <param name="name">Name of the EffectTechnique to get.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect">
      <summary>Contains a configurable effect that supports environment mapping.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.#ctor(Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect)">
      <summary>Creates a new EnvironmentMapEffect by cloning parameter settings from an existing instance.</summary>
      <param name="cloneSource">An existing instance.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>Creates a new EnvironmentMapEffect with default parameter settings.</summary>
      <param name="device">The graphics device.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.Alpha">
      <summary>Gets or sets the material alpha which determines its transparency. Range is between 1 (fully opaque) and 0 (fully transparent).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.AmbientLightColor">
      <summary>Gets or sets the ambient color for a light, the range of color values is from 0 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.Clone">
      <summary>Creates a clone of the current EnvironmentMapEffect instance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.DiffuseColor">
      <summary>Gets or sets the diffuse color for a material, the range of color values is from 0 to 1.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.DirectionalLight0">
      <summary>Gets the first directional light.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.DirectionalLight1">
      <summary>Gets the second directional light.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.DirectionalLight2">
      <summary>Gets the third directional light.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.EmissiveColor">
      <summary>Gets or sets the emissive color for a material, the range of color values is from 0 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.EnableDefaultLighting">
      <summary>Sets up standard key, fill, and back lighting for an EnvironmentMapEffect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.EnvironmentMap">
      <summary>Gets or sets the current environment map texture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.EnvironmentMapAmount">
      <summary>Gets or sets the amount of the environment map color (RGB) that will be blended over the base texture. The value ranges from 0 to 1; the default value is 1.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.EnvironmentMapSpecular">
      <summary>Gets or sets the amount of the environment map alpha value that will be added to the base texture. The value ranges from 0 to 1; the default value is 0.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.FogColor">
      <summary>Gets or sets the fog color, the range of color values is from 0 to 1.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.FogEnabled">
      <summary>Gets or sets the fog enable flag.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.FogEnd">
      <summary>Gets or sets the maximum z value for fog.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.FogStart">
      <summary>Gets or sets the minimum z value for fog.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.FresnelFactor">
      <summary>Gets or sets the Fresnel factor used for the environment map blending.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.Microsoft#Xna#Framework#Graphics#IEffectLights#LightingEnabled">
      <summary>Enables lighting in an EnvironmentMapEffect.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.OnApply">
      <summary>Computes derived parameter values immediately before applying the effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.Projection">
      <summary>Gets or sets the projection matrix.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.Texture">
      <summary>Gets or sets the current texture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.View">
      <summary>Gets or sets the view matrix.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.World">
      <summary>Gets or sets the world matrix.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.FillMode">
      <summary>Describes options for filling the vertices and lines that define a primitive.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.FillMode.Solid">
      <summary>Draw solid faces for each primitive.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.FillMode.WireFrame">
      <summary>Draw lines connecting the vertices that define a primitive face.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsAdapter">
      <summary>Provides methods to retrieve and manipulate graphics adapters.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Adapters">
      <summary>Collection of available adapters on the system.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CurrentDisplayMode">
      <summary>Gets the current display mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DefaultAdapter">
      <summary>Gets the default adapter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Description">
      <summary>Retrieves a string used for presentation to the user.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DeviceId">
      <summary>Retrieves a value that is used to help identify a particular chip set.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DeviceName">
      <summary>Retrieves a string that contains the device name for a Microsoft Windows Graphics Device Interface (GDI).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.IsDefaultAdapter">
      <summary>Determines if this instance of GraphicsAdapter is the default adapter.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.IsProfileSupported(Microsoft.Xna.Framework.Graphics.GraphicsProfile)">
      <summary>Tests to see if the adapter supports the requested profile.</summary>
      <param name="graphicsProfile">The graphics profile.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.IsWideScreen">
      <summary>Determines if the graphics adapter is in widescreen mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.MonitorHandle">
      <summary>Retrieves the handle of the monitor associated with the Microsoft Direct3D object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.QueryBackBufferFormat(Microsoft.Xna.Framework.Graphics.GraphicsProfile,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat@,Microsoft.Xna.Framework.Graphics.DepthFormat@,System.Int32@)">
      <summary>Queries the adapter for support for the requested back buffer format.</summary>
      <param name="graphicsProfile">The graphics profile.</param>
      <param name="format">The requested surface data format.</param>
      <param name="depthFormat">The requested depth buffer format.</param>
      <param name="multiSampleCount">The requested number of multisampling locations.</param>
      <param name="selectedFormat">[OutAttribute] The best format the adapter supports for the requested surface data format.</param>
      <param name="selectedDepthFormat">[OutAttribute] The best format the adapter supports for the requested depth data format.</param>
      <param name="selectedMultiSampleCount">[OutAttribute] The best format the adapter supports for the requested number of multisampling locations.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.QueryRenderTargetFormat(Microsoft.Xna.Framework.Graphics.GraphicsProfile,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat@,Microsoft.Xna.Framework.Graphics.DepthFormat@,System.Int32@)">
      <summary>Queries the adapter for support for the requested render target format.</summary>
      <param name="graphicsProfile">The graphics profile.</param>
      <param name="format">The requested surface data format.</param>
      <param name="depthFormat">The requested depth buffer format.</param>
      <param name="multiSampleCount">The requested number of multisampling locations.</param>
      <param name="selectedFormat">[OutAttribute] The best format the adapter supports for the requested surface data format.</param>
      <param name="selectedDepthFormat">[OutAttribute] The best format the adapter supports for the requested depth data format.</param>
      <param name="selectedMultiSampleCount">[OutAttribute] The best format the adapter supports for the requested number of multisampling locations.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Revision">
      <summary>Retrieves a value used to help identify the revision level of a particular chip set.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.SubSystemId">
      <summary>Retrieves a value used to identify the subsystem.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.SupportedDisplayModes">
      <summary>Returns a collection of supported display modes for the current adapter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.UseNullDevice">
      <summary>Gets or sets a NULL device.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.UseReferenceDevice">
      <summary>Gets or sets a reference device.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.VendorId">
      <summary>Retrieves a value used to identify the manufacturer.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice">
      <summary>Performs primitive-based rendering, creates resources, handles system-level variables, adjusts gamma ramp levels, and creates shaders.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsAdapter,Microsoft.Xna.Framework.Graphics.GraphicsProfile,Microsoft.Xna.Framework.Graphics.PresentationParameters)">
      <summary>Creates an instance of this object.</summary>
      <param name="adapter">The display adapter.</param>
      <param name="graphicsProfile">The graphics profile.</param>
      <param name="presentationParameters">The presentation options.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Adapter">
      <summary>Gets the graphics adapter.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.BlendFactor">
      <summary>Gets or sets the color used for a constant-blend factor during alpha blending. The default value is Color.White.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.BlendState">
      <summary>Gets or sets a system-defined instance of a blend state object initialized for alpha blending. The default value is BlendState.Opaque.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color)">
      <summary>Clears resource buffers.</summary>
      <param name="color">Set this color value in all buffers.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Graphics.ClearOptions,Microsoft.Xna.Framework.Color,System.Single,System.Int32)">
      <summary>Clears resource buffers.</summary>
      <param name="options">Options for clearing a buffer.</param>
      <param name="color">Set this color value in the buffer.</param>
      <param name="depth">Set this depth value in the buffer.</param>
      <param name="stencil">Set this stencil value in the buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Graphics.ClearOptions,Microsoft.Xna.Framework.Vector4,System.Single,System.Int32)">
      <summary>Clears resource buffers.</summary>
      <param name="options">Options for clearing a buffer.</param>
      <param name="color">Set this four-component color value in the buffer.</param>
      <param name="depth">Set this depth value in the buffer.</param>
      <param name="stencil">Set this stencil value in the buffer.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DepthStencilState">
      <summary>Gets or sets a system-defined instance of a depth-stencil state object. The default value is DepthStencilState.Default.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DeviceLost">
      <summary>Occurs when a GraphicsDevice is about to be lost (for example, immediately before a reset).  Reference page contains code sample.</summary>
      <param name="" />
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DeviceReset">
      <summary>Occurs after a GraphicsDevice is reset, allowing an application to recreate all resources.</summary>
      <param name="" />
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DeviceResetting">
      <summary>Occurs when a GraphicsDevice is resetting, allowing the application to cancel the default handling of the reset.  Reference page contains code sample.</summary>
      <param name="" />
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DisplayMode">
      <summary>Retrieves the display mode's spatial resolution, color resolution, and refresh frequency.  Reference page contains code sample.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="disposing">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Disposing">
      <summary>Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.  Reference page contains code sample.</summary>
      <param name="" />
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawIndexedPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Renders the specified geometric primitive, based on indexing into an array of vertices.</summary>
      <param name="primitiveType">Describes the type of primitive to render. PrimitiveType.PointList is not supported with this method.</param>
      <param name="baseVertex">Offset to add to each vertex index in the index buffer.</param>
      <param name="minVertexIndex">Minimum vertex index for vertices used during the call. The minVertexIndex parameter and all of the indices in the index stream are relative to the baseVertex parameter.</param>
      <param name="numVertices">Number of vertices used during the call. The first vertex is located at index: baseVertex + minVertexIndex.</param>
      <param name="startIndex">Location in the index array at which to start reading vertices.</param>
      <param name="primitiveCount">Number of primitives to render. The number of vertices used is a function of primitiveCount and primitiveType.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawInstancedPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Draws a series of instanced models.</summary>
      <param name="primitiveType">The primitive type.</param>
      <param name="baseVertex">Offset to add to each vertex index in the index buffer.</param>
      <param name="minVertexIndex">Minimum vertex index for vertices used during the call. The minVertexIndex parameter and all of the indices in the index stream are relative to the baseVertex parameter.</param>
      <param name="numVertices">Number of vertices used during the call. The first vertex is located at index: baseVertex + minVertexIndex.</param>
      <param name="startIndex">Location in the index array at which to start reading vertices.</param>
      <param name="primitiveCount">Number of primitives to render. The number of vertices used is a function of primitiveCount and primitiveType.</param>
      <param name="instanceCount">Number of primitives to render.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32)">
      <summary>Renders a sequence of non-indexed geometric primitives of the specified type from the current set of data input streams.</summary>
      <param name="primitiveType">Describes the type of primitive to render.</param>
      <param name="startVertex">Index of the first vertex to load. Beginning at startVertex, the correct number of vertices is read out of the vertex buffer.</param>
      <param name="primitiveCount">Number of primitives to render. The primitiveCount is the number of primitives as determined by the primitive type. If it is a line list, each primitive has two vertices. If it is a triangle list, each primitive has three vertices.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawUserIndexedPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32,System.Int16[],System.Int32,System.Int32)">
      <summary>Renders indexed primitives from a 16-bit index buffer and other related input parameters.</summary>
      <param name="primitiveType">The primitive type.</param>
      <param name="vertexData">The vertex data.</param>
      <param name="vertexOffset">Offset (in vertices) from the beginning of the vertex buffer to the first vertex to draw.</param>
      <param name="numVertices">Number of vertices to draw.</param>
      <param name="indexData">The index data.</param>
      <param name="indexOffset">Offset (in indices) from the beginning of the index buffer to the first index to use.</param>
      <param name="primitiveCount">Number of primitives to render.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawUserIndexedPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32,System.Int16[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.VertexDeclaration)">
      <summary>Renders indexed primitives from a 16-bit index buffer, a vertex declaration, and other related input parameters.</summary>
      <param name="primitiveType">The primitive type.</param>
      <param name="vertexData">The vertex data.</param>
      <param name="vertexOffset">Offset (in vertices) from the beginning of the vertex buffer to the first vertex to draw.</param>
      <param name="numVertices">Number of vertices to draw.</param>
      <param name="indexData">The index data.</param>
      <param name="indexOffset">Offset (in indices) from the beginning of the index buffer to the first index to use.</param>
      <param name="primitiveCount">Number of primitives to render.</param>
      <param name="vertexDeclaration">The vertex declaration.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawUserIndexedPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
      <summary>Renders indexed primitives from a 32-bit index buffer and other related input parameters.</summary>
      <param name="primitiveType">The primitive type.</param>
      <param name="vertexData">The vertex data.</param>
      <param name="vertexOffset">Offset (in vertices) from the beginning of the vertex buffer to the first vertex to draw.</param>
      <param name="numVertices">Number of vertices to draw.</param>
      <param name="indexData">The index data.</param>
      <param name="indexOffset">Offset (in indices) from the beginning of the index buffer to the first index to use.</param>
      <param name="primitiveCount">Number of primitives to render.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawUserIndexedPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.VertexDeclaration)">
      <summary>Renders indexed primitives from a 32-bit index buffer, a vertex declaration, and other related input parameters.</summary>
      <param name="primitiveType">The primitive type.</param>
      <param name="vertexData">The vertex data.</param>
      <param name="vertexOffset">Offset (in vertices) from the beginning of the vertex buffer to the first vertex to draw.</param>
      <param name="numVertices">Number of vertices to draw.</param>
      <param name="indexData">The index data.</param>
      <param name="indexOffset">Offset (in indices) from the beginning of the index buffer to the first index to use.</param>
      <param name="primitiveCount">Number of primitives to render.</param>
      <param name="vertexDeclaration">The vertex declaration.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawUserPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32)">
      <summary>Draws primitives.</summary>
      <param name="primitiveType">Describes the type of primitive to render.</param>
      <param name="vertexData">The vertex data.</param>
      <param name="vertexOffset">Offset (in vertices) from the beginning of the buffer to start reading data.</param>
      <param name="primitiveCount">Number of primitives to render.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawUserPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.VertexDeclaration)">
      <summary>Draws primitives.</summary>
      <param name="primitiveType">Describes the type of primitive to render.</param>
      <param name="vertexData">The vertex data.</param>
      <param name="vertexOffset">Offset (in vertices) from the beginning of the buffer to start reading data.</param>
      <param name="primitiveCount">Number of primitives to render.</param>
      <param name="vertexDeclaration">The vertex declaration, which defines per-vertex data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetBackBufferData``1(System.Nullable{Microsoft.Xna.Framework.Rectangle},``0[],System.Int32,System.Int32)">
      <summary>Gets the contents of the back buffer.</summary>
      <param name="rect">The section of the back buffer to copy. null indicates the data will be copied from the entire back buffer.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">The first element to use.</param>
      <param name="elementCount">The number of elements to use.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetBackBufferData``1(``0[])">
      <summary>Gets the contents of the back buffer.</summary>
      <param name="data">Array of data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetBackBufferData``1(``0[],System.Int32,System.Int32)">
      <summary>Gets the contents of the back buffer.</summary>
      <param name="data">Array of data.</param>
      <param name="startIndex">The first element to use.</param>
      <param name="elementCount">The number of elements to use.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetRenderTargets">
      <summary>Gets a render target surface.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetVertexBuffers">
      <summary>Gets the vertex buffers.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GraphicsDeviceStatus">
      <summary>Retrieves the status of the device.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GraphicsProfile">
      <summary>Gets the graphics profile. The default value is GraphicsProfile.Reach.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Indices">
      <summary>Gets or sets index data. The default value is null.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.MultiSampleMask">
      <summary>Gets or sets a bitmask controlling modification of the samples in a multisample render target. The default value is -1 (0xffffffff).</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Present">
      <summary>Presents the display with the contents of the next buffer in the sequence of back buffers owned by the GraphicsDevice.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Present(System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Rectangle},System.IntPtr)">
      <summary>Specifies the window target for a presentation and presents the display with the contents of the next buffer in the sequence of back buffers owned by the GraphicsDevice.</summary>
      <param name="sourceRectangle">The source rectangle. If null, the entire source surface is presented. If the rectangle exceeds the source surface, the rectangle is clipped to the source surface.</param>
      <param name="destinationRectangle">The destination rectangle, in window client coordinates. If null, the entire client area is filled. If the rectangle exceeds the destination client area, the rectangle is clipped to the destination client area.</param>
      <param name="overrideWindowHandle">Destination window containing the client area that is the target for this presentation. If not specified, this is DeviceWindowHandle.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.PresentationParameters">
      <summary>Gets the presentation parameters associated with this graphics device.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.RasterizerState">
      <summary>Gets or sets rasterizer state. The default value is RasterizerState.CullCounterClockwise.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ReferenceStencil">
      <summary>Gets or sets a reference value for stencil testing. The default value is zero.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Reset">
      <summary>Resets the presentation parameters for the current GraphicsDevice.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Reset(Microsoft.Xna.Framework.Graphics.PresentationParameters)">
      <summary>Resets the current GraphicsDevice with the specified PresentationParameters.</summary>
      <param name="presentationParameters">Describes the new presentation parameters. This value cannot be null.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Reset(Microsoft.Xna.Framework.Graphics.PresentationParameters,Microsoft.Xna.Framework.Graphics.GraphicsAdapter)">
      <summary>Resets the specified Reset with the specified presentation parameters.</summary>
      <param name="presentationParameters">Describes the new presentation parameters. This value cannot be null.</param>
      <param name="graphicsAdapter">The graphics device being reset.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ResourceCreated">
      <summary>Occurs when a resource is created.</summary>
      <param name="">The event data.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ResourceDestroyed">
      <summary>Occurs when a resource is destroyed.</summary>
      <param name="">The event data.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SamplerStates">
      <summary>Retrieves a collection of SamplerState objects for the current GraphicsDevice.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ScissorRectangle">
      <summary>Gets or sets the rectangle used for scissor testing. By default, the size matches the render target size.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
      <summary>Sets a new render target for this GraphicsDevice.</summary>
      <param name="renderTarget">A new render target for the device, or null to set the device render target to the back buffer of the device.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTargetCube,Microsoft.Xna.Framework.Graphics.CubeMapFace)">
      <summary>Sets a new render target for this GraphicsDevice.</summary>
      <param name="renderTarget">A new render target for the device, or null to set the device render target to the back buffer of the device.</param>
      <param name="cubeMapFace">The cube map face type.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetRenderTargets(Microsoft.Xna.Framework.Graphics.RenderTargetBinding[])">
      <summary>Sets an array of render targets.</summary>
      <param name="renderTargets">[ParamArrayAttribute] An array of render targets.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexBuffer(Microsoft.Xna.Framework.Graphics.VertexBuffer)">
      <summary>Sets or binds a vertex buffer to the device.</summary>
      <param name="vertexBuffer">A vertex buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexBuffer(Microsoft.Xna.Framework.Graphics.VertexBuffer,System.Int32)">
      <summary>Sets or binds a vertex buffer to the device.</summary>
      <param name="vertexBuffer">A vertex buffer.</param>
      <param name="vertexOffset">The offset (in vertices) from the beginning of the buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexBuffers(Microsoft.Xna.Framework.Graphics.VertexBufferBinding[])">
      <summary>Sets the vertex buffers.</summary>
      <param name="vertexBuffers">[ParamArrayAttribute] An array of vertex buffers.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Textures">
      <summary>Returns the collection of textures that have been assigned to the texture stages of the device.  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.VertexSamplerStates">
      <summary>Gets the collection of vertex sampler states.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.VertexTextures">
      <summary>Gets the collection of vertex textures that support texture lookup in the vertex shader using the texldl statement. The vertex engine contains four texture sampler stages.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Viewport">
      <summary>Gets or sets a viewport identifying the portion of the render target to receive draw calls.  Reference page contains code sample.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus">
      <summary>Describes the status of the device.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus.Lost">
      <summary>The device has been lost.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus.Normal">
      <summary>The device is normal.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus.NotReset">
      <summary>The device has not been reset.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsProfile">
      <summary>Identifies the set of supported devices for the game based on device capabilities.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsProfile.HiDef">
      <summary>Use the largest available set of graphic features and capabilities to target devices, such as an Xbox 360 console and a Windows-based computer, that have more enhanced graphic capabilities.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsProfile.Reach">
      <summary>Use a limited set of graphic features and capabilities, allowing the game to support the widest variety of devices, including all Windows-based computers and Windows Phone.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsResource">
      <summary>Queries and prepares resources.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="disposing">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsResource.Disposing">
      <summary>Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.</summary>
      <param name="" />
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsResource.Finalize">
      <summary>Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.GraphicsDevice">
      <summary>Gets the GraphicsDevice associated with this GraphicsResource.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.Name">
      <summary>Gets the name of the resource.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.Tag">
      <summary>Gets the resource tags for this resource.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsResource.ToString">
      <summary>Gets a string representation of the current instance.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.IEffectFog">
      <summary>Gets or sets fog parameters for the current effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IEffectFog.FogColor">
      <summary>Gets or sets the fog color.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IEffectFog.FogEnabled">
      <summary>Enables or disables fog.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IEffectFog.FogEnd">
      <summary>Gets or sets maximum z value for fog.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IEffectFog.FogStart">
      <summary>Gets or sets minimum z value for fog.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.IEffectLights">
      <summary>Gets or sets lighting parameters for the current effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IEffectLights.AmbientLightColor">
      <summary>Gets or sets the ambient light color for the current effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IEffectLights.DirectionalLight0">
      <summary>Gets the first directional light for the current effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IEffectLights.DirectionalLight1">
      <summary>Gets the second directional light for the current effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IEffectLights.DirectionalLight2">
      <summary>Gets the third directional light for the current effect.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IEffectLights.EnableDefaultLighting">
      <summary>Enables default lighting for the current effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IEffectLights.LightingEnabled">
      <summary>Enables or disables lighting in an IEffectLights.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.IEffectMatrices">
      <summary>Gets or sets transformation matrix parameters for the current effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IEffectMatrices.Projection">
      <summary>Gets or sets the projection matrix in the current effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IEffectMatrices.View">
      <summary>Gets or sets the view matrix in the current effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IEffectMatrices.World">
      <summary>Gets or sets the world matrix in the current effect.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService">
      <summary>Defines a mechanism for retrieving GraphicsDevice objects.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceCreated">
      <summary>The event that occurs when a graphics device is created.</summary>
      <param name="" />
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceDisposing">
      <summary>The event that occurs when a graphics device is disposing.</summary>
      <param name="" />
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceReset">
      <summary>The event that occurs when a graphics device is reset.</summary>
      <param name="" />
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceResetting">
      <summary>The event that occurs when a graphics device is in the process of resetting.</summary>
      <param name="" />
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.GraphicsDevice">
      <summary>Retrieves a graphcs device.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.IndexBuffer">
      <summary>Describes the rendering order of the vertices in a vertex buffer.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.IndexElementSize,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Initializes a new instance of the IndexBuffer class.</summary>
      <param name="graphicsDevice">The GraphicsDevice object to associate with the index buffer.</param>
      <param name="indexElementSize">The size (in bits) of each index.</param>
      <param name="indexCount">The number of indices.</param>
      <param name="usage">Behavior options.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Type,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Initializes a new instance of the IndexBuffer class.</summary>
      <param name="graphicsDevice">The GraphicsDevice object to associate with the index buffer.</param>
      <param name="indexType">The index value type.</param>
      <param name="indexCount">The number of indices.</param>
      <param name="usage">Behavior options.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IndexBuffer.BufferUsage">
      <summary>Gets the state of the related BufferUsage enumeration.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="disposing">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.GetData``1(System.Int32,``0[],System.Int32,System.Int32)">
      <summary>Gets a copy of the index buffer data, specifying the start index, starting offset, number of elements, and size of the elements.</summary>
      <param name="offsetInBytes">Offset in bytes from the beginning of the buffer to the data.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to get.</param>
      <param name="elementCount">Number of elements to get.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.GetData``1(``0[])">
      <summary>Gets a copy of the index buffer data.</summary>
      <param name="data">Array of data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.GetData``1(``0[],System.Int32,System.Int32)">
      <summary>Gets a copy of the index buffer data, specifying the start index and number of elements.</summary>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to get.</param>
      <param name="elementCount">Number of elements to get.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IndexBuffer.IndexCount">
      <summary>Gets the number of indices in this buffer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IndexBuffer.IndexElementSize">
      <summary>Gets a value indicating the size of this index element.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32)">
      <summary>Sets index buffer data, specifying the offset, start index and number of elements.</summary>
      <param name="offsetInBytes">Offset in bytes from the beginning of the buffer to the data.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to set.</param>
      <param name="elementCount">Number of elements to set.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.SetData``1(``0[])">
      <summary>Sets index buffer data. Reference page contains links to related conceptual articles.</summary>
      <param name="data">Array of data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.SetData``1(``0[],System.Int32,System.Int32)">
      <summary>Sets index buffer data, specifying the start index and number of elements.</summary>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to set.</param>
      <param name="elementCount">Number of elements to set.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.IndexElementSize">
      <summary>Defines the size of an element of an index buffer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.IndexElementSize.SixteenBits">
      <summary>Sixteen bits.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.IndexElementSize.ThirtyTwoBits">
      <summary>Thirty-two bits.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.IVertexType">
      <summary>Vertex type interface which is implemented by a custom vertex type structure.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IVertexType.VertexDeclaration">
      <summary>Vertex declaration, which defines per-vertex data.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Model">
      <summary>Represents a 3D model composed of multiple ModelMesh objects which may be moved independently.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Model.Bones">
      <summary>Gets a collection of ModelBone objects which describe how each mesh in the Meshes collection for this model relates to its parent mesh.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Model.CopyAbsoluteBoneTransformsTo(Microsoft.Xna.Framework.Matrix[])">
      <summary>Copies a transform of each bone in a model relative to all parent bones of the bone into a given array.</summary>
      <param name="destinationBoneTransforms">The array to receive bone transforms.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Model.CopyBoneTransformsFrom(Microsoft.Xna.Framework.Matrix[])">
      <summary>Copies an array of transforms into each bone in the model.</summary>
      <param name="sourceBoneTransforms">An array containing new bone transforms.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Model.CopyBoneTransformsTo(Microsoft.Xna.Framework.Matrix[])">
      <summary>Copies each bone transform relative only to the parent bone of the model to a given array.</summary>
      <param name="destinationBoneTransforms">The array to receive bone transforms.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Model.Draw(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Render a model after applying the matrix transformations.</summary>
      <param name="world">A world transformation matrix.</param>
      <param name="view">A view transformation matrix.</param>
      <param name="projection">A projection transformation matrix.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Model.Meshes">
      <summary>Gets a collection of ModelMesh objects which compose the model. Each ModelMesh in a model may be moved independently and may be composed of multiple materials identified as ModelMeshPart objects.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Model.Root">
      <summary>Gets the root bone for this model.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Model.Tag">
      <summary>Gets or sets an object identifying this model.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelBone">
      <summary>Represents bone data for a model. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelBone.Children">
      <summary>Gets a collection of bones that are children of this bone.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelBone.Index">
      <summary>Gets the index of this bone in the Bones collection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelBone.Name">
      <summary>Gets the name of this bone.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelBone.Parent">
      <summary>Gets the parent of this bone.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelBone.Transform">
      <summary>Gets or sets the matrix used to transform this bone relative to its parent bone.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelBoneCollection">
      <summary>Represents a set of bones associated with a model.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.GetEnumerator">
      <summary>Returns a ModelBoneCollection.Enumerator that can iterate through a ModelBoneCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Item(System.String)">
      <summary>Retrieves a ModelBone from the collection, given the name of the bone.</summary>
      <param name="boneName">The name of the bone to retrieve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.TryGetValue(System.String,Microsoft.Xna.Framework.Graphics.ModelBone@)">
      <summary>Finds a bone with a given name if it exists in the collection.</summary>
      <param name="boneName">The name of the bone to find.</param>
      <param name="value">[OutAttribute] The bone named boneName, if found.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator">
      <summary>Provides the ability to iterate through the bones in an ModelBoneCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.Current">
      <summary>Gets the current element in the ModelBoneCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the ModelBoneCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the current element in the ModelBoneCollection as a Object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the ModelBoneCollection.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelEffectCollection">
      <summary>Represents a collection of effects associated with a model.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelEffectCollection.GetEnumerator">
      <summary>Returns a ModelEffectCollection.Enumerator that can iterate through a ModelEffectCollection.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator">
      <summary>Provides the ability to iterate through the bones in an ModelEffectCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.Current">
      <summary>Gets the current element in the ModelEffectCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the ModelEffectCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the current element in the ModelEffectCollection as a Object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the ModelEffectCollection.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelMesh">
      <summary>Represents a mesh that is part of a Model.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMesh.BoundingSphere">
      <summary>Gets the BoundingSphere that contains this mesh.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelMesh.Draw">
      <summary>Draws all of the ModelMeshPart objects in this mesh, using their current Effect settings.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMesh.Effects">
      <summary>Gets a collection of effects associated with this mesh.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMesh.MeshParts">
      <summary>Gets the ModelMeshPart objects that make up this mesh. Each part of a mesh is composed of a set of primitives that share the same material.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMesh.Name">
      <summary>Gets the name of this mesh.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMesh.ParentBone">
      <summary>Gets the parent bone for this mesh. The parent bone of a mesh contains a transformation matrix that describes how the mesh is located relative to any parent meshes in a model.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMesh.Tag">
      <summary>Gets or sets an object identifying this mesh.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelMeshCollection">
      <summary>Represents a collection of ModelMesh objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.GetEnumerator">
      <summary>Returns a ModelMeshCollection.Enumerator that can iterate through a ModelMeshCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Item(System.String)">
      <summary>Retrieves a ModelMesh from the collection, given the name of the mesh.</summary>
      <param name="meshName">The name of the mesh to retrieve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.TryGetValue(System.String,Microsoft.Xna.Framework.Graphics.ModelMesh@)">
      <summary>Finds a mesh with a given name if it exists in the collection.</summary>
      <param name="meshName">The name of the mesh to find.</param>
      <param name="value">[OutAttribute] The mesh named meshName, if found.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator">
      <summary>Provides the ability to iterate through the bones in an ModelMeshCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.Current">
      <summary>Gets the current element in the ModelMeshCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the ModelMeshCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the current element in the ModelMeshCollection as a Object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the ModelMeshCollection.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelMeshPart">
      <summary>Represents a batch of geometry information to submit to the graphics device during rendering. Each ModelMeshPart is a subdivision of a ModelMesh object. The ModelMesh class is split into multiple ModelMeshPart objects, typically based on material information.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshPart.Effect">
      <summary>Gets or sets the material Effect for this mesh part.  Reference page contains code sample.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshPart.IndexBuffer">
      <summary>Gets the index buffer for this mesh part.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshPart.NumVertices">
      <summary>Gets the number of vertices used during a draw call.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshPart.PrimitiveCount">
      <summary>Gets the number of primitives to render.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshPart.StartIndex">
      <summary>Gets the location in the index array at which to start reading vertices.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshPart.Tag">
      <summary>Gets or sets an object identifying this model mesh part.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshPart.VertexBuffer">
      <summary>Gets the vertex buffer for this mesh part.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshPart.VertexOffset">
      <summary>Gets the offset (in vertices) from the top of vertex buffer.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection">
      <summary>Represents a collection of ModelMeshPart objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.GetEnumerator">
      <summary>Returns a ModelMeshPartCollection.Enumerator that can iterate through a ModelMeshPartCollection.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator">
      <summary>Provides the ability to iterate through the bones in an ModelMeshPartCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.Current">
      <summary>Gets the current element in the ModelMeshPartCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the ModelMeshPartCollection.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the current element in the ModelMeshPartCollection as a Object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the ModelMeshPartCollection.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.NoSuitableGraphicsDeviceException">
      <summary>Thrown when no available graphics device fits the given device preferences.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.NoSuitableGraphicsDeviceException.#ctor">
      <summary>Create a new instance of this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.NoSuitableGraphicsDeviceException.#ctor(System.String)">
      <summary>Create a new instance of this object.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.NoSuitableGraphicsDeviceException.#ctor(System.String,System.Exception)">
      <summary>Create a new instance of this object.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.OcclusionQuery">
      <summary>Used to perform an occlusion query against the latest drawn objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>Initializes a new instance of OcclusionQuery with the specified device.</summary>
      <param name="graphicsDevice">The graphics device to associate with this query.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.Begin">
      <summary>Begins application of the query.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by Dispose and optionally releases the managed resources.</summary>
      <param name="disposing">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.End">
      <summary>Ends the application of the query.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.OcclusionQuery.IsComplete">
      <summary>Gets a value that indicates if the occlusion query has completed.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.OcclusionQuery.PixelCount">
      <summary>Gets the number of visible pixels.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PresentationParameters">
      <summary>Contains presentation parameters.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferFormat">
      <summary>Gets or sets the format of the back buffer. Reference page contains links to related conceptual articles.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferHeight">
      <summary>Gets or sets a value indicating the height of the new swap chain's back buffer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferWidth">
      <summary>Gets or sets a value indicating the width of the new swap chain's back buffer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.Bounds">
      <summary>Gets the size of this resource.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.Clone">
      <summary>Creates a copy of this PresentationParameters object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.DepthStencilFormat">
      <summary>Gets or sets the depth stencil data format.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.DeviceWindowHandle">
      <summary>Gets or sets the handle to the device window.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.DisplayOrientation">
      <summary>Gets or sets the orientation of the display. The default value is DisplayOrientation.Default, which means orientation is determined automatically from your BackBufferWidth and BackBufferHeight.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.IsFullScreen">
      <summary>Gets or sets a value indicating whether the application is in full screen mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.MultiSampleCount">
      <summary>Gets or sets a value indicating the number of sample locations during multisampling.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.PresentationInterval">
      <summary>Gets or sets the maximum rate at which the swap chain's back buffers can be presented to the front buffer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.RenderTargetUsage">
      <summary>Gets or sets render target usage flags.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PresentInterval">
      <summary>Defines flags that describe the relationship between the adapter refresh rate and the rate at which Present operations are completed.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PresentInterval.Default">
      <summary>Equivalent to setting One.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PresentInterval.Immediate">
      <summary>The runtime updates the window client area immediately, and might do so more than once during the adapter refresh period. Present operations might be affected immediately. This option is always available for both windowed and full-screen swap chains.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PresentInterval.One">
      <summary>The driver waits for the vertical retrace period (the runtime will beam trace to prevent tearing). Present operations are not affected more frequently than the screen refresh rate; the runtime completes one Present operation per adapter refresh period, at most. This option is always available for both windowed and full-screen swap chains.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PresentInterval.Two">
      <summary>The driver waits for the vertical retrace period. Present operations are not affected more frequently than every second screen refresh.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PrimitiveType">
      <summary>Defines how vertex data is ordered.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PrimitiveType.LineList">
      <summary>The data is ordered as a sequence of line segments; each line segment is described by two new vertices. The count may be any positive integer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PrimitiveType.LineStrip">
      <summary>The data is ordered as a sequence of line segments; each line segment is described by one new vertex and the last vertex from the previous line seqment. The count may be any positive integer.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PrimitiveType.TriangleList">
      <summary>The data is ordered as a sequence of triangles; each triangle is described by three new vertices. Back-face culling is affected by the current winding-order render state.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PrimitiveType.TriangleStrip">
      <summary>The data is ordered as a sequence of triangles; each triangle is described by two new vertices and one vertex from the previous triangle. The back-face culling flag is flipped automatically on even-numbered triangles.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.RasterizerState">
      <summary>Contains rasterizer state, which determines how to convert vector data (shapes) into raster data (pixels).</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RasterizerState.#ctor">
      <summary>Initializes a new instance of the rasterizer class.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.RasterizerState.CullClockwise">
      <summary>A built-in state object with settings for culling primitives with clockwise winding order.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.RasterizerState.CullCounterClockwise">
      <summary>A built-in state object with settings for culling primitives with counter-clockwise winding order.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RasterizerState.CullMode">
      <summary>Specifies the conditions for culling or removing triangles. The default value is CullMode.CounterClockwise.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.RasterizerState.CullNone">
      <summary>A built-in state object with settings for not culling any primitives.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RasterizerState.DepthBias">
      <summary>Sets or retrieves the depth bias for polygons, which is the amount of bias to apply to the depth of a primitive to alleviate depth testing problems for primitives of similar depth. The default value is 0.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RasterizerState.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="disposing">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RasterizerState.FillMode">
      <summary>The fill mode, which defines how a triangle is filled during rendering. The default is FillMode.Solid.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RasterizerState.MultiSampleAntiAlias">
      <summary>Enables or disables multisample antialiasing. The default is true.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RasterizerState.ScissorTestEnable">
      <summary>Enables or disables scissor testing. The default is false.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RasterizerState.SlopeScaleDepthBias">
      <summary>Gets or sets a bias value that takes into account the slope of a polygon. This bias value is applied to coplanar primitives to reduce aliasing and other rendering artifacts caused by z-fighting. The default is 0.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D">
      <summary>Contains a 2D texture that can be used as a render target.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32)">
      <summary>Creates an instance of this object.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="width">Width, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferWidth to get the current screen width.</param>
      <param name="height">Height, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferHeight to get the current screen height.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat)">
      <summary>Creates an instance of this object.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="width">Width, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferWidth to get the current screen width.</param>
      <param name="height">Height, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferHeight to get the current screen height.</param>
      <param name="mipMap">[MarshalAsAttribute(U1)] True to enable a full mipmap chain to be generated, false otherwise.</param>
      <param name="preferredFormat">Preferred format for the surface data. This is the format preferred by the application, which may or may not be available from the hardware.</param>
      <param name="preferredDepthFormat">Preferred format for the depth buffer. This is the format preferred by the application, which may or may not be available from the hardware.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat,System.Int32,Microsoft.Xna.Framework.Graphics.RenderTargetUsage)">
      <summary>Creates an instance of this object.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="width">Width, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferWidth to get the current screen width.</param>
      <param name="height">Height, in pixels, of the render target. You can use graphicsDevice.PresentationParameters.BackBufferHeight to get the current screen height.</param>
      <param name="mipMap">[MarshalAsAttribute(U1)] True to enable a full mipmap chain to be generated, false otherwise.</param>
      <param name="preferredFormat">Preferred format for the surface data. This is the format preferred by the application, which may or may not be available from the hardware.</param>
      <param name="preferredDepthFormat">Preferred format for the depth buffer. This is the format preferred by the application, which may or may not be available from the hardware.</param>
      <param name="preferredMultiSampleCount">The preferred number of multisample locations.</param>
      <param name="usage">Behavior options.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.RenderTarget2D.ContentLost">
      <summary>Occurs when resources are lost due to a lost device event.</summary>
      <param name="" />
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget2D.DepthStencilFormat">
      <summary>Gets the data format for the depth stencil data.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget2D.IsContentLost">
      <summary>Determines if the index buffer data has been lost due to a lost device event.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget2D.MultiSampleCount">
      <summary>Gets the number of sample locations during multisampling.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTarget2D.RenderTargetUsage">
      <summary>Gets or sets the render target usage.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.RenderTargetBinding">
      <summary>Binds an array of render targets.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTargetBinding.#ctor(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
      <summary>Creates an instance of this object.</summary>
      <param name="renderTarget">Identifies a 2D render target.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTargetBinding.#ctor(Microsoft.Xna.Framework.Graphics.RenderTargetCube,Microsoft.Xna.Framework.Graphics.CubeMapFace)">
      <summary>Creates an instance of this object.</summary>
      <param name="renderTarget">Identifies a cubemap render target.</param>
      <param name="cubeMapFace">Cubemap face.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTargetBinding.CubeMapFace">
      <summary>Gets one face of a cubemap.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTargetBinding.RenderTarget">
      <summary>Gets a 2D texture.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.RenderTargetCube">
      <summary>Represents a cubic texture resource that will be written to at the end of a render pass.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTargetCube.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat)">
      <summary>Creates an instance of this object.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="size">The width and height of this cube texture resource, in pixels.</param>
      <param name="mipMap">[MarshalAsAttribute(U1)] True to generate a full mipmap chain, false otherwise.</param>
      <param name="preferredFormat">Preferred format of the surface data.</param>
      <param name="preferredDepthFormat">Preferred format of the depth data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderTargetCube.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat,System.Int32,Microsoft.Xna.Framework.Graphics.RenderTargetUsage)">
      <summary>Creates an instance of this object.</summary>
      <param name="graphicsDevice">The graphics device to associate with this render target resource.</param>
      <param name="size">The width and height of this cube texture resource, in pixels.</param>
      <param name="mipMap">[MarshalAsAttribute(U1)] True to generate a full mipmap chain, false otherwise.</param>
      <param name="preferredFormat">Preferred format of the surface data.</param>
      <param name="preferredDepthFormat">Preferred format of the depth data.</param>
      <param name="preferredMultiSampleCount">Preferred number of sample locations during multisampling.</param>
      <param name="usage">Options identifying the behaviors of this texture resource.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.RenderTargetCube.ContentLost">
      <summary>Occurs when a resource is lost due to a device being lost.</summary>
      <param name="" />
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTargetCube.DepthStencilFormat">
      <summary>Gets the depth format of this rendertarget.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTargetCube.IsContentLost">
      <summary>Determines if the data has been lost due to a lost device event.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTargetCube.MultiSampleCount">
      <summary>Gets the number of multisample locations.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderTargetCube.RenderTargetUsage">
      <summary>Gets the usage mode of this rendertarget.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.RenderTargetUsage">
      <summary>Determines how render target data is used once a new render target is set.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.RenderTargetUsage.DiscardContents">
      <summary>Always clears the render target data.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.RenderTargetUsage.PlatformContents">
      <summary>Either clears or keeps the data, depending on the current platform. On Xbox 360, the render target will discard contents. On PC, the render target will discard if multisampling is enabled, and preserve the contents if not.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.RenderTargetUsage.PreserveContents">
      <summary>Always keeps the render target data.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs">
      <summary>Contains event data.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs.Resource">
      <summary>The object raising the event.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs">
      <summary>Arguments for a ResourceDestroyed event.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.Name">
      <summary>Gets the name of the destroyed resource.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.Tag">
      <summary>Gets the resource manager tag of the destroyed resource.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SamplerState">
      <summary>Contains sampler state, which determines how to sample texture data.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SamplerState.#ctor">
      <summary>Initializes a new instance of the sampler state class.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.AddressU">
      <summary>Gets or sets the texture-address mode for the u-coordinate.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.AddressV">
      <summary>Gets or sets the texture-address mode for the v-coordinate.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.AddressW">
      <summary>Gets or sets the texture-address mode for the w-coordinate.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SamplerState.AnisotropicClamp">
      <summary>Contains default state for anisotropic filtering and texture coordinate clamping.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SamplerState.AnisotropicWrap">
      <summary>Contains default state for anisotropic filtering and texture coordinate wrapping.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SamplerState.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="disposing">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.Filter">
      <summary>Gets or sets the type of filtering during sampling.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SamplerState.LinearClamp">
      <summary>Contains default state for linear filtering and texture coordinate clamping.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SamplerState.LinearWrap">
      <summary>Contains default state for linear filtering and texture coordinate wrapping.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.MaxAnisotropy">
      <summary>Gets or sets the maximum anisotropy. The default value is 4.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.MaxMipLevel">
      <summary>Gets or sets the level of detail (LOD) index of the largest map to use.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.MipMapLevelOfDetailBias">
      <summary>Gets or sets the mipmap LOD bias. The default value is 0. A negative value indicates a larger mipmap level; a positive value indicates a smaller mipmap level.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SamplerState.PointClamp">
      <summary>Contains default state for point filtering and texture coordinate clamping.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SamplerState.PointWrap">
      <summary>Contains default state for point filtering and texture coordinate wrapping.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SamplerStateCollection">
      <summary>Collection of SamplerState objects.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerStateCollection.Item(System.Int32)">
      <summary>Gets a specific SamplerState object using an index value.</summary>
      <param name="index">Index of the object to retrieve.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SetDataOptions">
      <summary>Describes whether existing vertex or index buffer data will be overwritten or discarded during a SetData operation.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SetDataOptions.Discard">
      <summary>The SetData operation will discard the entire buffer. A pointer to a new memory area is returned so that the direct memory access (DMA) and rendering from the previous area do not stall.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SetDataOptions.None">
      <summary>Portions of existing data in the buffer may be overwritten during this operation.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SetDataOptions.NoOverwrite">
      <summary>The SetData operation will not overwrite existing data in the vertex and index buffers. Specifying this option allows the driver to return immediately from a SetData operation and continue rendering.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SkinnedEffect">
      <summary>Contains a configurable effect for rendering skinned character models.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>Creates a SkinnedEffect with default parameter settings.</summary>
      <param name="device">The graphics device.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.#ctor(Microsoft.Xna.Framework.Graphics.SkinnedEffect)">
      <summary>Creates a SkinnedEffect by cloning parameter settings from an existing instance.</summary>
      <param name="cloneSource">An existing instance.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.Alpha">
      <summary>Gets or sets the material alpha which determines its transparency. Range is between 1 (fully opaque) and 0 (fully transparent).</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.AmbientLightColor">
      <summary>Gets or sets the ambient color for a light, the range of color values is from 0 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.Clone">
      <summary>Creates a clone of the current SkinnedEffect instance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.DiffuseColor">
      <summary>Gets or sets the diffuse color for a material, the range of color values is from 0 to 1.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.DirectionalLight0">
      <summary>Gets the first directional light.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.DirectionalLight1">
      <summary>Gets the second directional light.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.DirectionalLight2">
      <summary>Gets the third directional light.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.EmissiveColor">
      <summary>Gets or sets the emissive color for a material, the range of color values is from 0 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.EnableDefaultLighting">
      <summary>Sets up standard key, fill, and back lighting for a SkinnedEffect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.FogColor">
      <summary>Gets or sets the fog color, the range of color values is from 0 to 1.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.FogEnabled">
      <summary>Gets or sets the fog enable flag.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.FogEnd">
      <summary>Gets or sets the maximum z value for fog.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.FogStart">
      <summary>Gets or sets the minimum z value for fog.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.GetBoneTransforms(System.Int32)">
      <summary>Gets the bone transform matrices for a SkinnedEffect.</summary>
      <param name="count">The number of matrices.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SkinnedEffect.MaxBones">
      <summary>The maximum number of bones.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.Microsoft#Xna#Framework#Graphics#IEffectLights#LightingEnabled">
      <summary>Enables lighting in an SkinnedEffect.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.OnApply">
      <summary>Computes derived parameter values immediately before applying the effect.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.PreferPerPixelLighting">
      <summary>Gets or sets the per-pixel prefer lighting flag.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.Projection">
      <summary>Gets or sets the projection matrix.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.SetBoneTransforms(Microsoft.Xna.Framework.Matrix[])">
      <summary>Sets an array of bone transform matrices for a SkinnedEffect.</summary>
      <param name="boneTransforms">An array of bone transformation matrices; the maximum number of bones (matrices) allowed is 72.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.SpecularColor">
      <summary>Gets or sets the specular color for a material, the range of color values is from 0 to 1.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.SpecularPower">
      <summary>Gets or sets the material specular power.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.Texture">
      <summary>Gets or sets the current texture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.View">
      <summary>Gets or sets the view matrix.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.WeightsPerVertex">
      <summary>Gets or sets the number of per-vertex skinning weights to evaluate, which is either 1, 2, or 4.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.World">
      <summary>Gets or sets the world matrix.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SpriteBatch">
      <summary>Enables a group of sprites to be drawn using the same settings.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>Initializes a new instance of the class, which enables a group of sprites to be drawn using the same settings.</summary>
      <param name="graphicsDevice">The graphics device where sprites will be drawn.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin">
      <summary>Begins a sprite batch operation using deferred sort and default state objects (BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise).</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState)">
      <summary>Begins a sprite batch operation using the specified sort and blend state object and default state objects (DepthStencilState.None, SamplerState.LinearClamp, RasterizerState.CullCounterClockwise). If you pass a null blend state, the default is BlendState.AlphaBlend.</summary>
      <param name="sortMode">Sprite drawing order.</param>
      <param name="blendState">Blending options.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState)">
      <summary>Begins a sprite batch operation using the specified sort, blend, sampler, depth stencil and rasterizer state objects. Passing null for any of the state objects selects the default default state objects (BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise).</summary>
      <param name="sortMode">Sprite drawing order.</param>
      <param name="blendState">Blending options.</param>
      <param name="samplerState">Texture sampling options.</param>
      <param name="depthStencilState">Depth and stencil options.</param>
      <param name="rasterizerState">Rasterization options.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>Begins a sprite batch operation using the specified sort, blend, sampler, depth stencil and rasterizer state objects, plus a custom effect. Passing null for any of the state objects selects the default default state objects (BlendState.AlphaBlend, DepthStencilState.None, RasterizerState.CullCounterClockwise, SamplerState.LinearClamp). Passing a null effect selects the default SpriteBatch Class shader.</summary>
      <param name="sortMode">Sprite drawing order.</param>
      <param name="blendState">Blending options.</param>
      <param name="samplerState">Texture sampling options.</param>
      <param name="depthStencilState">Depth and stencil options.</param>
      <param name="rasterizerState">Rasterization options.</param>
      <param name="effect">Effect state options.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Matrix)">
      <summary>Begins a sprite batch operation using the specified sort, blend, sampler, depth stencil, rasterizer state objects, plus a custom effect and a 2D transformation matrix. Passing null for any of the state objects selects the default default state objects (BlendState.AlphaBlend, DepthStencilState.None, RasterizerState.CullCounterClockwise, SamplerState.LinearClamp). Passing a null effect selects the default SpriteBatch Class shader.</summary>
      <param name="sortMode">Sprite drawing order.</param>
      <param name="blendState">Blending options.</param>
      <param name="samplerState">Texture sampling options.</param>
      <param name="depthStencilState">Depth and stencil options.</param>
      <param name="rasterizerState">Rasterization options.</param>
      <param name="effect">Effect state options.</param>
      <param name="transformMatrix">Transformation matrix for scale, rotate, translate options.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color)">
      <summary>Adds a sprite to a batch of sprites for rendering using the specified texture, destination rectangle, and color. Reference page contains links to related code samples.</summary>
      <param name="texture">A texture.</param>
      <param name="destinationRectangle">A rectangle that specifies (in screen coordinates) the destination for drawing the sprite.</param>
      <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color)">
      <summary>Adds a sprite to a batch of sprites for rendering using the specified texture, destination rectangle, source rectangle, and color.</summary>
      <param name="texture">A texture.</param>
      <param name="destinationRectangle">A rectangle that specifies (in screen coordinates) the destination for drawing the sprite. If this rectangle is not the same size as the source rectangle, the sprite will be scaled to fit.</param>
      <param name="sourceRectangle">A rectangle that specifies (in texels) the source texels from a texture. Use null to draw the entire texture.</param>
      <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a sprite to a batch of sprites for rendering using the specified texture, destination rectangle, source rectangle, color, rotation, origin, effects and layer.</summary>
      <param name="texture">A texture.</param>
      <param name="destinationRectangle">A rectangle that specifies (in screen coordinates) the destination for drawing the sprite. If this rectangle is not the same size as the source rectangle, the sprite will be scaled to fit.</param>
      <param name="sourceRectangle">A rectangle that specifies (in texels) the source texels from a texture. Use null to draw the entire texture.</param>
      <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
      <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
      <param name="origin">The sprite origin; the default is (0,0) which represents the upper-left corner.</param>
      <param name="effects">Effects to apply.</param>
      <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
      <summary>Adds a sprite to a batch of sprites for rendering using the specified texture, position and color. Reference page contains links to related code samples.</summary>
      <param name="texture">A texture.</param>
      <param name="position">The location (in screen coordinates) to draw the sprite.</param>
      <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color)">
      <summary>Adds a sprite to a batch of sprites for rendering using the specified texture, position, source rectangle, and color.</summary>
      <param name="texture">A texture.</param>
      <param name="position">The location (in screen coordinates) to draw the sprite.</param>
      <param name="sourceRectangle">A rectangle that specifies (in texels) the source texels from a texture. Use null to draw the entire texture.</param>
      <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a sprite to a batch of sprites for rendering using the specified texture, position, source rectangle, color, rotation, origin, scale, effects and layer. Reference page contains links to related code samples.</summary>
      <param name="texture">A texture.</param>
      <param name="position">The location (in screen coordinates) to draw the sprite.</param>
      <param name="sourceRectangle">A rectangle that specifies (in texels) the source texels from a texture. Use null to draw the entire texture.</param>
      <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
      <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
      <param name="origin">The sprite origin; the default is (0,0) which represents the upper-left corner.</param>
      <param name="scale">Scale factor.</param>
      <param name="effects">Effects to apply.</param>
      <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a sprite to a batch of sprites for rendering using the specified texture, position, source rectangle, color, rotation, origin, scale, effects, and layer. Reference page contains links to related code samples.</summary>
      <param name="texture">A texture.</param>
      <param name="position">The location (in screen coordinates) to draw the sprite.</param>
      <param name="sourceRectangle">A rectangle that specifies (in texels) the source texels from a texture. Use null to draw the entire texture.</param>
      <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
      <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
      <param name="origin">The sprite origin; the default is (0,0) which represents the upper-left corner.</param>
      <param name="scale">Scale factor.</param>
      <param name="effects">Effects to apply.</param>
      <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
      <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, and color.</summary>
      <param name="spriteFont">A font for diplaying text.</param>
      <param name="text">A text string.</param>
      <param name="position">The location (in screen coordinates) to draw the sprite.</param>
      <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation, origin, scale, effects and layer.</summary>
      <param name="spriteFont">A font for diplaying text.</param>
      <param name="text">A text string.</param>
      <param name="position">The location (in screen coordinates) to draw the sprite.</param>
      <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
      <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
      <param name="origin">The sprite origin; the default is (0,0) which represents the upper-left corner.</param>
      <param name="scale">Scale factor.</param>
      <param name="effects">Effects to apply.</param>
      <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation, origin, scale, effects and layer.</summary>
      <param name="spriteFont">A font for diplaying text.</param>
      <param name="text">A text string.</param>
      <param name="position">The location (in screen coordinates) to draw the sprite.</param>
      <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
      <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
      <param name="origin">The sprite origin; the default is (0,0) which represents the upper-left corner.</param>
      <param name="scale">Scale factor.</param>
      <param name="effects">Effects to apply.</param>
      <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
      <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, and color.</summary>
      <param name="spriteFont">A font for diplaying text.</param>
      <param name="text">Text string.</param>
      <param name="position">The location (in screen coordinates) to draw the sprite.</param>
      <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation, origin, scale, effects and layer.</summary>
      <param name="spriteFont">A font for diplaying text.</param>
      <param name="text">Text string.</param>
      <param name="position">The location (in screen coordinates) to draw the sprite.</param>
      <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
      <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
      <param name="origin">The sprite origin; the default is (0,0) which represents the upper-left corner.</param>
      <param name="scale">Scale factor.</param>
      <param name="effects">Effects to apply.</param>
      <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation, origin, scale, effects and layer.</summary>
      <param name="spriteFont">A font for diplaying text.</param>
      <param name="text">Text string.</param>
      <param name="position">The location (in screen coordinates) to draw the sprite.</param>
      <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
      <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
      <param name="origin">The sprite origin; the default is (0,0) which represents the upper-left corner.</param>
      <param name="scale">Scale factor.</param>
      <param name="effects">Effects to apply.</param>
      <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.End">
      <summary>Flushes the sprite batch and restores the device state to how it was before Begin was called.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SpriteEffects">
      <summary>Defines sprite mirroring options.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipHorizontally">
      <summary>Rotate 180 degrees about the Y axis before rendering.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipVertically">
      <summary>Rotate 180 degrees about the X axis before rendering.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SpriteEffects.None">
      <summary>No rotations specified.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SpriteFont">
      <summary>Represents a font texture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.Characters">
      <summary>Gets a collection of all the characters that are included in the font.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.DefaultCharacter">
      <summary>Gets or sets the default character for the font.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.LineSpacing">
      <summary>Gets or sets the vertical distance (in pixels) between the base lines of two consecutive lines of text. Line spacing includes the blank space between lines as well as the height of the characters.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteFont.MeasureString(System.String)">
      <summary>Returns the width and height of a string as a Vector2.</summary>
      <param name="text">The string to measure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteFont.MeasureString(System.Text.StringBuilder)">
      <summary>Returns the width and height of a string as a Vector2.</summary>
      <param name="text">The string to measure.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.Spacing">
      <summary>Gets or sets the spacing of the font characters.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SpriteSortMode">
      <summary>Defines sprite sort-rendering options.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.BackToFront">
      <summary>Same as Deferred mode, except sprites are sorted by depth in back-to-front order prior to drawing. This procedure is recommended when drawing transparent sprites of varying depths.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Deferred">
      <summary>Sprites are not drawn until End is called. End will apply graphics device settings and draw all the sprites in one batch, in the same order calls to Draw were received. This mode allows Draw calls to two or more instances of SpriteBatch without introducing conflicting graphics device settings. SpriteBatch defaults to Deferred mode.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.FrontToBack">
      <summary>Same as Deferred mode, except sprites are sorted by depth in front-to-back order prior to drawing. This procedure is recommended when drawing opaque sprites of varying depths.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Immediate">
      <summary>Begin will apply new graphics device settings, and sprites will be drawn within each Draw call. In Immediate mode there can only be one active SpriteBatch instance without introducing conflicting device settings.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Texture">
      <summary>Same as Deferred mode, except sprites are sorted by texture prior to drawing. This can improve performance when drawing non-overlapping sprites of uniform depth.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.StencilOperation">
      <summary>Defines stencil buffer operations.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Decrement">
      <summary>Decrements the stencil-buffer entry, wrapping to the maximum value if the new value is less than 0.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.DecrementSaturation">
      <summary>Decrements the stencil-buffer entry, clamping to 0.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Increment">
      <summary>Increments the stencil-buffer entry, wrapping to 0 if the new value exceeds the maximum value.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.IncrementSaturation">
      <summary>Increments the stencil-buffer entry, clamping to the maximum value.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Invert">
      <summary>Inverts the bits in the stencil-buffer entry.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Keep">
      <summary>Does not update the stencil-buffer entry. This is the default value.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Replace">
      <summary>Replaces the stencil-buffer entry with a reference value.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Zero">
      <summary>Sets the stencil-buffer entry to 0.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SurfaceFormat">
      <summary>Defines various types of surface formats.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Alpha8">
      <summary>(Unsigned format) 8-bit alpha only.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgr565">
      <summary>(Unsigned format) 16-bit BGR pixel format with 5 bits for blue, 6 bits for green, and 5 bits for red.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgra4444">
      <summary>(Unsigned format) 16-bit BGRA pixel format with 4 bits for each channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgra5551">
      <summary>(Unsigned format) 16-bit BGRA pixel format where 5 bits are reserved for each color and 1 bit is reserved for alpha.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Color">
      <summary>(Unsigned format) 32-bit ARGB pixel format with alpha, using 8 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt1">
      <summary>DXT1 compression texture format. The runtime will not allow an application to create a surface using a DXTn format unless the surface dimensions are multiples of 4. This applies to offscreen-plain surfaces, render targets, 2D textures, cube textures, and volume textures.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt3">
      <summary>DXT3 compression texture format. The runtime will not allow an application to create a surface using a DXTn format unless the surface dimensions are multiples of 4. This applies to offscreen-plain surfaces, render targets, 2D textures, cube textures, and volume textures.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt5">
      <summary>DXT5 compression texture format. The runtime will not allow an application to create a surface using a DXTn format unless the surface dimensions are multiples of 4. This applies to offscreen-plain surfaces, render targets, 2D textures, cube textures, and volume textures.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfSingle">
      <summary>(Floating-point format) 16-bit float format using 16 bits for the red channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfVector2">
      <summary>(Floating-point format) 32-bit float format using 16 bits for the red channel and 16 bits for the green channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfVector4">
      <summary>(Floating-point format) 64-bit float format using 16 bits for each channel (alpha, blue, green, red).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HdrBlendable">
      <summary>(Floating-point format) for high dynamic range data.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.NormalizedByte2">
      <summary>(Signed format) 16-bit bump-map format using 8 bits each for u and v data.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.NormalizedByte4">
      <summary>(Signed format) 32-bit bump-map format using 8 bits for each channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rg32">
      <summary>(Unsigned format) 32-bit pixel format using 16 bits each for red and green.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rgba1010102">
      <summary>(Unsigned format) 32-bit RGBA pixel format using 10 bits for each color and 2 bits for alpha.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rgba64">
      <summary>(Unsigned format) 64-bit RGBA pixel format using 16 bits for each component.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Single">
      <summary>(IEEE format) 32-bit float format using 32 bits for the red channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Vector2">
      <summary>(IEEE format) 64-bit float format using 32 bits for the red channel and 32 bits for the green channel.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Vector4">
      <summary>(IEEE format) 128-bit float format using 32 bits for each channel (alpha, blue, green, red).</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Texture">
      <summary>Represents a texture resource.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture.Format">
      <summary>Gets the format of the texture data.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture.LevelCount">
      <summary>Gets the number of texture levels in a multilevel texture.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Texture2D">
      <summary>Represents a 2D grid of texels.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32)">
      <summary>Creates a new instance of this object.</summary>
      <param name="graphicsDevice">The device.</param>
      <param name="width">Texture width.</param>
      <param name="height">Texture height.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Creates a new instance of this object.</summary>
      <param name="graphicsDevice">The device.</param>
      <param name="width">Texture width.</param>
      <param name="height">Texture height.</param>
      <param name="mipMap">[MarshalAsAttribute(U1)] True to generate a full mipmap chain; false otherwise.</param>
      <param name="format">Texture data format.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.Bounds">
      <summary>Gets the size of this resource.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.FromStream(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream)">
      <summary>Loads texture data from a stream.</summary>
      <param name="graphicsDevice">A graphics device.</param>
      <param name="stream">Data stream from one of the following file types: .gif, .jpg or .png.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.FromStream(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,System.Int32,System.Int32,System.Boolean)">
      <summary>Loads texture data from a stream.</summary>
      <param name="graphicsDevice">A graphics device.</param>
      <param name="stream">Data stream from one of the following file types: .gif, .jpg or .png.</param>
      <param name="width">The requested image width.</param>
      <param name="height">The requested image height.</param>
      <param name="zoom">Control the aspect ratio when zooming (scaling); set to false to maintain a constant aspect ratio, true otherwise. See remarks.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetData``1(System.Int32,System.Nullable{Microsoft.Xna.Framework.Rectangle},``0[],System.Int32,System.Int32)">
      <summary>Gets a copy of 2D texture data, specifying a mipmap level, source rectangle, start index, and number of elements.  Reference page contains code sample.</summary>
      <param name="level">Mipmap level.</param>
      <param name="rect">The section of the texture to copy. null indicates the data will be copied from the entire texture.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to get.</param>
      <param name="elementCount">Number of elements to get.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetData``1(``0[])">
      <summary>Gets a copy of 2D texture data.  Reference page contains code sample.</summary>
      <param name="data">Array of data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetData``1(``0[],System.Int32,System.Int32)">
      <summary>Gets a copy of 2D texture data, specifying a start index and number of elements.  Reference page contains code sample.</summary>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to get.</param>
      <param name="elementCount">Number of elements to get.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.Height">
      <summary>Gets the height of this texture resource, in pixels.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SaveAsJpeg(System.IO.Stream,System.Int32,System.Int32)">
      <summary>Saves texture data as a .jpg.</summary>
      <param name="stream">Data stream number.</param>
      <param name="width">Image width.</param>
      <param name="height">Image height.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SaveAsPng(System.IO.Stream,System.Int32,System.Int32)">
      <summary>Saves texture data as a .png.</summary>
      <param name="stream">Data stream number.</param>
      <param name="width">Image width.</param>
      <param name="height">Image height.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(System.Int32,System.Nullable{Microsoft.Xna.Framework.Rectangle},``0[],System.Int32,System.Int32)">
      <summary>Sets 2D texture data, specifying a mipmap level, source rectangle, start index, and number of elements.</summary>
      <param name="level">Mipmap level.</param>
      <param name="rect">A bounding box that defines the position and location (in pixels) of the data.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to set.</param>
      <param name="elementCount">Number of elements to set.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(``0[])">
      <summary>Sets 2D texture data. Reference page contains links to related conceptual articles.</summary>
      <param name="data">Array of data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(``0[],System.Int32,System.Int32)">
      <summary>Sets 2D texture data, specifying a start index, and number of elements.</summary>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to set.</param>
      <param name="elementCount">Number of elements to set.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.Width">
      <summary>Gets the width of this texture resource, in pixels.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Texture3D">
      <summary>Represents a 3D volume of texels.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Creates a new instance of this object.</summary>
      <param name="graphicsDevice">A device.</param>
      <param name="width">Texture width.</param>
      <param name="height">Texture height.</param>
      <param name="depth">Texture depth.</param>
      <param name="mipMap">[MarshalAsAttribute(U1)] True to generate a full mipmap chain; false otherwise.</param>
      <param name="format">Data format.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3D.Depth">
      <summary>Gets the depth of this volume texture resource, in pixels.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.GetData``1(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0[],System.Int32,System.Int32)">
      <summary>Gets a copy of 3D texture data, specifying a mimap level, source rectangle, start index, and number of elements.</summary>
      <param name="level">Mipmap level.</param>
      <param name="left">Position of the left side of the box on the x-axis.</param>
      <param name="top">Position of the top of the box on the y-axis.</param>
      <param name="right">Position of the right side of the box on the x-axis.</param>
      <param name="bottom">Position of the bottom of the box on the y-axis.</param>
      <param name="front">Position of the front of the box on the z-axis.</param>
      <param name="back">Position of the back of the box on the z-axis.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to get.</param>
      <param name="elementCount">Number of elements to get.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.GetData``1(``0[])">
      <summary>Gets a copy of 3D texture data.</summary>
      <param name="data">Array of data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.GetData``1(``0[],System.Int32,System.Int32)">
      <summary>Gets a copy of 3D texture data, specifying a start index and number of elements.</summary>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to get.</param>
      <param name="elementCount">Number of elements to get.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3D.Height">
      <summary>Gets the height of this texture resource, in pixels.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.SetData``1(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0[],System.Int32,System.Int32)">
      <summary>Sets 3D texture data, specifying a mipmap level, source box, start index, and number of elements.</summary>
      <param name="level">Mipmap level.</param>
      <param name="left">X coordinate of the left face of the 3D bounding cube.</param>
      <param name="top">Y coordinate of the top face of the 3D bounding cube.</param>
      <param name="right">X coordinate of the right face of the 3D bounding cube.</param>
      <param name="bottom">Y coordinate of the bottom face of the 3D bounding cube.</param>
      <param name="front">Z coordinate of the front face of the 3D bounding cube.</param>
      <param name="back">Z coordinate of the back face of the 3D bounding cube.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to set.</param>
      <param name="elementCount">Number of elements to set.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.SetData``1(``0[])">
      <summary>Sets 3D texture data.</summary>
      <param name="data">Array of data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.SetData``1(``0[],System.Int32,System.Int32)">
      <summary>Sets 3D texture data, specifying a start index and number of elements.</summary>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to set.</param>
      <param name="elementCount">Number of elements to set.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3D.Width">
      <summary>Gets the width of this texture resource, in pixels.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureAddressMode">
      <summary>Defines modes for addressing texels using texture coordinates that are outside of the typical range of 0.0 to 1.0.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Clamp">
      <summary>Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Mirror">
      <summary>Similar to Wrap, except that the texture is flipped at every integer junction. For u values between 0 and 1, for example, the texture is addressed normally; between 1 and 2, the texture is flipped (mirrored); between 2 and 3, the texture is normal again, and so on.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Wrap">
      <summary>Tile the texture at every integer junction. For example, for u values between 0 and 3, the texture is repeated three times; no mirroring is performed.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureCollection">
      <summary>Represents a collection of Texture objects.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCollection.Item(System.Int32)">
      <summary>Gets or sets the Texture at the specified sampler number.</summary>
      <param name="index">Zero-based sampler number. Textures are bound to samplers; samplers define sampling state such as the filtering mode and the address wrapping mode. Programmable shaders reference textures using this sampler number.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureCube">
      <summary>Represents a set of six 2D textures, one for each face of a cube.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Creates a new instance of this object.</summary>
      <param name="graphicsDevice">The device.</param>
      <param name="size">The size (in pixels) of the top-level faces of the cube texture. Subsequent levels of each face will be the truncated value of half of the previous level's pixel dimension (independently). Each dimension is clamped to a minimum of 1 pixel.</param>
      <param name="mipMap">[MarshalAsAttribute(U1)] True to generate a full mipmap chain, false otherwise.</param>
      <param name="format">Surface data format.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.GetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,System.Int32,System.Nullable{Microsoft.Xna.Framework.Rectangle},``0[],System.Int32,System.Int32)">
      <summary>Gets a copy of cube texture data, specifying a cubemap face, mimap level, source rectangle, start index, and number of elements.</summary>
      <param name="cubeMapFace">Cube map face.</param>
      <param name="level">Mipmap level.</param>
      <param name="rect">The section of the texture where the data will be placed. null indicates the data will be copied over the entire texture.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to get.</param>
      <param name="elementCount">Number of elements to get.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.GetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,``0[])">
      <summary>Gets a copy of cube texture data specifying a cubemap face.</summary>
      <param name="cubeMapFace">Cubemap face.</param>
      <param name="data">Array of data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.GetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,``0[],System.Int32,System.Int32)">
      <summary>Gets a copy of cube texture data, specifying a cubemap face, start index, and number of elements.</summary>
      <param name="cubeMapFace">Cubemap face.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to get.</param>
      <param name="elementCount">Number of elements to get.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.SetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,System.Int32,System.Nullable{Microsoft.Xna.Framework.Rectangle},``0[],System.Int32,System.Int32)">
      <summary>Sets cube texture data, specifying a cubemap face, mipmap level, source rectangle, start index, and number of elements.</summary>
      <param name="cubeMapFace">Cubemap face.</param>
      <param name="level">Mipmap level.</param>
      <param name="rect">Region in the texture to set the data; use null to set data to the entire texture.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to set.</param>
      <param name="elementCount">Number of elements to set.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.SetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,``0[])">
      <summary>Sets cube texture data, specifying a cubemap face.</summary>
      <param name="cubeMapFace">The cubemap face.</param>
      <param name="data">Array of data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.SetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,``0[],System.Int32,System.Int32)">
      <summary>Sets cube texture data, specifying a cubemap face, start index, and number of elements.</summary>
      <param name="cubeMapFace">The cubemap face.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to set.</param>
      <param name="elementCount">Number of elements to set.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCube.Size">
      <summary>Gets the width and height of this texture resource, in pixels.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureFilter">
      <summary>Defines filtering types during texture sampling.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.Anisotropic">
      <summary>Use anisotropic filtering.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.Linear">
      <summary>Use linear filtering.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.LinearMipPoint">
      <summary>Use linear filtering to shrink or expand, and point filtering between mipmap levels (mip).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.MinLinearMagPointMipLinear">
      <summary>Use linear filtering to shrink, point filtering to expand, and linear filtering between mipmap levels.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.MinLinearMagPointMipPoint">
      <summary>Use linear filtering to shrink, point filtering to expand, and point filtering between mipmap levels.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.MinPointMagLinearMipLinear">
      <summary>Use point filtering to shrink, linear filtering to expand, and linear filtering between mipmap levels.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.MinPointMagLinearMipPoint">
      <summary>Use point filtering to shrink, linear filtering to expand, and point filtering between mipmap levels.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.Point">
      <summary>Use point filtering.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.PointMipLinear">
      <summary>Use point filtering to shrink (minify) or expand (magnify), and linear filtering between mipmap levels.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexBuffer">
      <summary>Represents a list of 3D vertices to be streamed to the graphics device.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.VertexDeclaration,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Creates an instance of this object.</summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="vertexDeclaration">The vertex declaration, which describes per-vertex data.</param>
      <param name="vertexCount">The number of vertices.</param>
      <param name="usage">Behavior options; it is good practice for this to match the createOptions parameter in the GraphicsDevice constructor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Type,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>Creates an instance of this object.</summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="vertexType">The data type.</param>
      <param name="vertexCount">The number of vertices.</param>
      <param name="usage">Behavior options; it is good practice for this to match the createOptions parameter in the GraphicsDevice constructor.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexBuffer.BufferUsage">
      <summary>Gets the state of the related BufferUsage enumeration.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="disposing">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)">
      <summary>Gets a copy of the vertex buffer data, specifying the starting offset, start index, number of elements, and vertex stride.</summary>
      <param name="offsetInBytes">Offset in bytes from the beginning of the buffer to the data.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to get.</param>
      <param name="elementCount">Number of elements to get.</param>
      <param name="vertexStride">Size, in bytes, of an element in the vertex buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData``1(``0[])">
      <summary>Gets a copy of the vertex buffer data.</summary>
      <param name="data">Array of data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData``1(``0[],System.Int32,System.Int32)">
      <summary>Gets a copy of the vertex buffer data, specifying the start index and number of elements.</summary>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to get.</param>
      <param name="elementCount">Number of elements to get.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)">
      <summary>Sets vertex buffer data, specifying the offset, start index, number of elements, and the vertex stride.</summary>
      <param name="offsetInBytes">Offset in bytes from the beginning of the buffer to the data.</param>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to set.</param>
      <param name="elementCount">Number of elements to set.</param>
      <param name="vertexStride">Stride, or size, of a vertex.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(``0[])">
      <summary>Sets vertex buffer data.  Reference page contains code sample.</summary>
      <param name="data">Array of data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(``0[],System.Int32,System.Int32)">
      <summary>Sets vertex buffer data, specifying the start index and number of elements.</summary>
      <param name="data">Array of data.</param>
      <param name="startIndex">Index of the first element to set.</param>
      <param name="elementCount">Number of elements to set.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexCount">
      <summary>Gets the number of vertices.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexBuffer.VertexDeclaration">
      <summary>Defines per-vertex data in a buffer.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexBufferBinding">
      <summary>Binding structure that specifies a vertex buffer and other per-vertex parameters (such as offset and instancing) for a graphics device.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.#ctor(Microsoft.Xna.Framework.Graphics.VertexBuffer)">
      <summary>Creates an instance of this object.</summary>
      <param name="vertexBuffer">The vertex buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.#ctor(Microsoft.Xna.Framework.Graphics.VertexBuffer,System.Int32)">
      <summary>Creates an instance of this object.</summary>
      <param name="vertexBuffer">The vertex buffer.</param>
      <param name="vertexOffset">Offset (in vertices) from the beginning of the buffer to the first vertex to use.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.#ctor(Microsoft.Xna.Framework.Graphics.VertexBuffer,System.Int32,System.Int32)">
      <summary>Creates an instance of this object.</summary>
      <param name="vertexBuffer">The vertex buffer.</param>
      <param name="vertexOffset">Offset (in vertices) from the beginning of the buffer to the first vertex to use.</param>
      <param name="instanceFrequency">Number (or frequency) of instances to draw for each draw call; 1 means draw one instance, 2 means draw 2 instances, etc. Use 0 if you are not instancing.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.InstanceFrequency">
      <summary>Gets the instancing frequency.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.VertexBuffer">
      <summary>Gets a vertex buffer.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.VertexOffset">
      <summary>Gets the offset between the beginning of the buffer and the vertex data to use.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration">
      <summary>A vertex declaration, which defines per-vertex data.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.#ctor(Microsoft.Xna.Framework.Graphics.VertexElement[])">
      <summary>Creates an instance of this object.</summary>
      <param name="elements">[ParamArrayAttribute] An array of per-vertex elements.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.#ctor(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElement[])">
      <summary>Creates an instance of this object.</summary>
      <param name="vertexStride">The number of bytes per element.</param>
      <param name="elements">[ParamArrayAttribute] An array of per-vertex elements.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.Dispose(System.Boolean)">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
      <param name="disposing">[MarshalAsAttribute(U1)] true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.GetVertexElements">
      <summary>Gets the vertex shader declaration.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexDeclaration.VertexStride">
      <summary>The number of bytes from one vertex to the next.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexElement">
      <summary>Defines input vertex data to the pipeline.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.#ctor(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementFormat,Microsoft.Xna.Framework.Graphics.VertexElementUsage,System.Int32)">
      <summary>Initializes a new instance of the VertexElement class.</summary>
      <param name="offset">Offset (if any) from the beginning of the stream to the beginning of the vertex data.</param>
      <param name="elementFormat">One of several predefined types that define the vertex data size.</param>
      <param name="elementUsage">The intended use of the vertex data.</param>
      <param name="usageIndex">Modifies the usage data to allow the user to specify multiple usage types.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The Object to compare with the current VertexElement.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.Offset">
      <summary>Retrieves or sets the offset (if any) from the beginning of the stream to the beginning of the vertex data.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.op_Equality(Microsoft.Xna.Framework.Graphics.VertexElement,Microsoft.Xna.Framework.Graphics.VertexElement)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexElement,Microsoft.Xna.Framework.Graphics.VertexElement)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex">
      <summary>Modifies the usage data to allow the user to specify multiple usage types.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementFormat">
      <summary>Gets or sets the format of this vertex element.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementUsage">
      <summary>Gets or sets a value describing how the vertex element is to be used.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexElementFormat">
      <summary>Defines vertex element formats.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Byte4">
      <summary>Four-component, unsigned byte.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Color">
      <summary>Four-component, packed, unsigned byte, mapped to 0 to 1 range. Input is in Int32 format (ARGB) expanded to (R, G, B, A).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.HalfVector2">
      <summary>Two-component, 16-bit floating point expanded to (value, value, value, value). This type is valid for vertex shader version 2.0 or higher.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.HalfVector4">
      <summary>Four-component, 16-bit floating-point expanded to (value, value, value, value). This type is valid for vertex shader version 2.0 or higher.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.NormalizedShort2">
      <summary>Normalized, two-component, signed short, expanded to (first short/32767.0, second short/32767.0, 0, 1). This type is valid for vertex shader version 2.0 or higher.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.NormalizedShort4">
      <summary>Normalized, four-component, signed short, expanded to (first short/32767.0, second short/32767.0, third short/32767.0, fourth short/32767.0). This type is valid for vertex shader version 2.0 or higher.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Short2">
      <summary>Two-component, signed short expanded to (value, value, 0, 1).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Short4">
      <summary>Four-component, signed short expanded to (value, value, value, value).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Single">
      <summary>Single-component, 32-bit floating-point, expanded to (float, 0, 0, 1).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Vector2">
      <summary>Two-component, 32-bit floating-point, expanded to (float, Float32 value, 0, 1).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Vector3">
      <summary>Three-component, 32-bit floating point, expanded to (float, float, float, 1).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Vector4">
      <summary>Four-component, 32-bit floating point, expanded to (float, float, float, float).</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexElementUsage">
      <summary>Defines usage for vertex elements.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Binormal">
      <summary>Vertex binormal data.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.BlendIndices">
      <summary>Blending indices data. (BlendIndices with UsageIndex = 0) specifies matrix indices for fixed-function vertex processing using indexed paletted skinning.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.BlendWeight">
      <summary>Blending weight data. (BlendWeight with UsageIndex = 0) specifies the blend weights in fixed-function vertex processing.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Color">
      <summary>Vertex data contains diffuse or specular color. (Color with UsageIndex = 0) specifies the diffuse color in the fixed-function vertex shader and in pixel shaders prior to ps_3_0. (Color with UsageIndex = 1) specifies the specular color in the fixed-function vertex shader and in pixel shaders prior to ps_3_0.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Depth">
      <summary>Vertex data contains depth data.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Fog">
      <summary>Vertex data contains fog data. (Fog with UsageIndex = 0) specifies a fog blend value to use after pixel shading is finished. This flag applies to pixel shaders prior to version ps_3_0.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Normal">
      <summary>Vertex normal data. (Normal with UsageIndex = 0) specifies vertex normals for fixed-function vertex processing and the N-patch tessellator. (Normal with UsageIndex = 1) specifies vertex normals for fixed-function vertex processing for skinning.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.PointSize">
      <summary>Point size data. (PointSize with UsageIndex = 0) specifies the point-size attribute used by the setup engine of the rasterizer to expand a point into a quad for the point-sprite functionality.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Position">
      <summary>Position data. (Position with UsageIndex = 0 ) specifies the nontransformed position in fixed-function vertex processing and the N-patch tessellator. (Position with UsageIndex = 1) specifies the nontransformed position in the fixed-function vertex shader for skinning.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Sample">
      <summary>Vertex data contains sampler data. (Sample with UsageIndex = 0) specifies the displacement value to look up.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Tangent">
      <summary>Vertex tangent data.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.TessellateFactor">
      <summary>Single, positive floating-point value. (TessellateFactor with UsageIndex = 0) specifies a tessellation factor used in the tessellation unit to control the rate of tessellation.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.TextureCoordinate">
      <summary>Texture coordinate data. (TextureCoordinate, n) specifies texture coordinates in fixed-function vertex processing and in pixel shaders prior to ps_3_0. These coordinates can be used to pass user-defined data.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexPositionColor">
      <summary>Describes a custom vertex format structure that contains position and color information.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColor.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color)">
      <summary>Initializes a new instance of the VertexPositionColor class.</summary>
      <param name="position">The position of the vertex.</param>
      <param name="color">The color of the vertex.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionColor.Color">
      <summary>The vertex color.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColor.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The Object to compare with the current VertexPositionColor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColor.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionColor.Microsoft#Xna#Framework#Graphics#IVertexType#VertexDeclaration">
      <summary>Gets a vertex declaration.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColor.op_Equality(Microsoft.Xna.Framework.Graphics.VertexPositionColor,Microsoft.Xna.Framework.Graphics.VertexPositionColor)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColor.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexPositionColor,Microsoft.Xna.Framework.Graphics.VertexPositionColor)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionColor.Position">
      <summary>XYZ position.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColor.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionColor.VertexDeclaration">
      <summary>Vertex declaration, which defines per-vertex data.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture">
      <summary>Describes a custom vertex format structure that contains position, color, and one set of texture coordinates.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the VertexPositionColorTexture class.</summary>
      <param name="position">Position of the vertex.</param>
      <param name="color">Color of the vertex.</param>
      <param name="textureCoordinate">Texture coordinate of the vertex.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.Color">
      <summary>The vertex color.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The Object to compare with the current VertexPositionColorTexture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.Microsoft#Xna#Framework#Graphics#IVertexType#VertexDeclaration">
      <summary>Gets a vertex declaration.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.op_Equality(Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture,Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture,Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.Position">
      <summary>XYZ position.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.TextureCoordinate">
      <summary>UV texture coordinates.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.VertexDeclaration">
      <summary>Vertex declaration, which defines per-vertex data.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture">
      <summary>Describes a custom vertex format structure that contains position, normal data, and one set of texture coordinates.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the VertexPositionNormalTexture class.</summary>
      <param name="position">Position of the vertex.</param>
      <param name="normal">The vertex normal.</param>
      <param name="textureCoordinate">The texture coordinate.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The Object to compare with the current VertexPositionNormalTexture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.Microsoft#Xna#Framework#Graphics#IVertexType#VertexDeclaration">
      <summary>Gets a vertex declaration.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.Normal">
      <summary>XYZ surface normal.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.op_Equality(Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture,Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture,Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.Position">
      <summary>XYZ position.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.TextureCoordinate">
      <summary>UV texture coordinates.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.VertexDeclaration">
      <summary>Vertex declaration, which defines per-vertex data.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexPositionTexture">
      <summary>Describes a custom vertex format structure that contains position and one set of texture coordinates.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the VertexPositionTexture class.</summary>
      <param name="position">Position of the vertex.</param>
      <param name="textureCoordinate">Texture coordinate of the vertex.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The Object to compare with the current VertexPositionTexture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.Microsoft#Xna#Framework#Graphics#IVertexType#VertexDeclaration">
      <summary>Gets a vertex declaration.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.op_Equality(Microsoft.Xna.Framework.Graphics.VertexPositionTexture,Microsoft.Xna.Framework.Graphics.VertexPositionTexture)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexPositionTexture,Microsoft.Xna.Framework.Graphics.VertexPositionTexture)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.Position">
      <summary>XYZ position.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.TextureCoordinate">
      <summary>UV texture coordinates.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.VertexDeclaration">
      <summary>Vertex declaration, which defines per-vertex data.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Viewport">
      <summary>Defines the window dimensions of a render-target surface onto which a 3D volume projects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.#ctor(Microsoft.Xna.Framework.Rectangle)">
      <summary>Creates an instance of this object.</summary>
      <param name="bounds">A bounding box that defines the location and size of the viewport in a render target.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Creates an instance of this object.</summary>
      <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
      <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
      <param name="width">The width of the viewport in pixels.</param>
      <param name="height">The height of the viewport in pixels.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.AspectRatio">
      <summary>Gets the aspect ratio used by the viewport</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Bounds">
      <summary>Gets the size of this resource.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Height">
      <summary>Gets or sets the height dimension of the viewport on the render-target surface, in pixels.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth">
      <summary>Gets or sets the maximum depth of the clip volume.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth">
      <summary>Gets or sets the minimum depth of the clip volume.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.Project(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Projects a 3D vector from object space into screen space.</summary>
      <param name="source">The vector to project.</param>
      <param name="projection">The projection matrix.</param>
      <param name="view">The view matrix.</param>
      <param name="world">The world matrix.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.TitleSafeArea">
      <summary>Returns the title safe area of the current viewport.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.ToString">
      <summary>Retrieves a string representation of this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.Unproject(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Converts a screen space point into a corresponding point in world space.</summary>
      <param name="source">The vector to project.</param>
      <param name="projection">The projection matrix.</param>
      <param name="view">The view matrix.</param>
      <param name="world">The world matrix.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Width">
      <summary>Gets or sets the width dimension of the viewport on the render-target surface, in pixels.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.X">
      <summary>Gets or sets the pixel coordinate of the upper-left corner of the viewport on the render-target surface.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Y">
      <summary>Gets or sets the pixel coordinate of the upper-left corner of the viewport on the render-target surface.</summary>
    </member>
  </members>
</doc>