<?xml version="1.0"?>
<project name="Installer Build Script" default="build" basedir=".">
  <description>Default Installer Automated Build script</description>
  <property name="os" value="${operating-system::get-platform(environment::get-operating-system())}" />

  <!-- The build version number we can get from the environment variable -->
  <property name="buildNumber" value="0.0.0.0"/>
  <if test="${environment::variable-exists('BUILD_NUMBER')}">
    <property name="buildNumber" value="${environment::get-variable('BUILD_NUMBER')}"/>
  </if>
  
  <target name="checkos" description="check the operating system">
    <property name="os" value="${operating-system::get-platform(environment::get-operating-system())}"/>
    <if test="${os == 'Unix'}">
      <if test="${directory::exists('/Applications') and directory::exists('/Library')}">
        <property name="os" value="MacOS"/>
      </if>
    </if>
    <echo message="Detected : ${os}"/>
  </target>

  <target name="download" description="Downloads iOS binaries">
    <if test="${environment::variable-exists('MACBUILDJOB')}">
      <property name="macbuildjob" value="${environment::get-variable('MACBUILDJOB')}"/>
      <property name="latestArtifactUrl" value="http://build.monogame.net/job/${macbuildjob}/lastSuccessfulBuild/artifact/"/>

      <mkdir dir="Windows/iOS" failonerror="false"/>
      <get src="${latestArtifactUrl}MonoGame.Framework/bin/iOS/iPhoneSimulator/Release/MonoGame.Framework.dll" dest="Windows/iOS/MonoGame.Framework.dll" failonerror="false"/>
    </if>
  </target>


  <target name="build" description="Build Installers" depends="checkos">
    <if test="${os == 'Win32NT'}">
      <if test="${file::exists('C:\Program Files (x86)\NSIS\makensis.exe')}">

        <echo append="false" file="Windows/header.nsh">
!define FrameworkPath "${project::get-base-directory()}"
!define VERSION "3.0"
!define INSTALLERVERSION "${buildNumber}"
        </echo>
        <call target="download"/>
        <exec program="makensis" workingdir="Windows" basedir="C:\Program Files (x86)\NSIS">
		      <arg value="MonoGame.nsi"/>
		    </exec>
      </if>
    </if>
    <if test="${os == 'MacOS'}">
      <!-- Build Pipeline.Installer.pkg -->
      <delete failonerror="false">
         <fileset>
            <include name="${project::get-base-directory()}\*.pkg"/>
            <include name="${project::get-base-directory()}\..\Tools\Pipeline\bin\MacOS\AnyCPU\Release\*.pkg" />
         </fileset>
      </delete>
      <mkdir dir="root/tmp" />
      <copy file="../IDE/MonoDevelop/MonoDevelop.MonoGame_${buildNumber}.mpack" tofile="./root/tmp/MonoDevelop.MonoGame_${buildNumber}.mpack" overwrite="true"/>
      <exec program="pkgbuild" workingdir="../Tools/Pipeline/bin/MacOS/AnyCPU/Release" commandline=" --component ./Pipeline.app --identifier com.monogame.pipeline --version ${buildNumber} --scripts ${project::get-base-directory()}/MacOS/Scripts/Pipeline --install-location /Applications ${project::get-base-directory()}/Pipeline.MacOS.pkg" />
      <exec program="pkgbuild" workingdir="." commandline=" --root ./root --identifier com.monogame.xsaddin --version ${buildNumber} --scripts ${project::get-base-directory()}/MacOS/Scripts/Addin ${project::get-base-directory()}/MonoGame.XamarinStudio.Addin.pkg" />
      <copy tofile="./distribution.xml" file="./MacOS/distribution.xml" />
      <copy tofile="./MacOS/Resources/LICENSE.html" file="./../LICENSE.txt" />
      <xmlpoke file="./distribution.xml" xpath="/installer-gui-script/title" value="MonoGame ${buildNumber}" />
      <exec program="productbuild" workingdir="${project::get-base-directory()}" commandline=" --distribution ./distribution.xml --resources ./MacOS/Resources --package-path ./ MonoGame.pkg" />
      <delete dir="./root"/>
      <delete file="./distribution.xml"/>
      <delete file="./MacOS/Resources/LICENSE.html"/>
    </if>

    <!-- Linux Installer -->
    <if test="${directory::exists('../Tools/Pipeline/bin/Linux/AnyCPU/Release')}">
      <delete dir="Linux/InstallerData" failonerror="false"/>
      <mkdir dir="Linux/InstallerData"/>
      <copy todir="Linux/InstallerData/Data">
        <fileset basedir="Linux/Data"/>
      </copy>
      <mkdir dir="Linux/InstallerData/Data/Pipeline/"/>
      <copy todir="Linux/InstallerData/Data/Pipeline/">
      <fileset basedir="../Tools/Pipeline/bin/Linux/AnyCPU/Release"/>
      </copy>
      <copy tofile="Linux/InstallerData/generate_run.sh" file="Linux/Generate/generate_run.sh" />
      <copy tofile="Linux/InstallerData/generate_deb.sh" file="Linux/Generate/generate_deb.sh" />
      <mkdir dir="Linux/InstallerData/Makeself"/>
      <copy todir="Linux/InstallerData/Makeself">
        <fileset basedir="../ThirdParty/Dependencies/makeself"/>
      </copy>
      <copy tofile="Linux/InstallerData/Data/Main/libstdc++.so.6" file="../ThirdParty/Dependencies/assimp/libstdc++.so.6" />
      <echo file="Linux/InstallerData/Data/DEBIAN/control" append="true">version: ${buildNumber}&#xa;</echo>
      <get src="http://addins.monodevelop.com/Stable/Linux/5.0/MonoDevelop.MonoGame-3.4.0.455.mpack" dest="Linux/InstallerData/Data/Main/MonoDevelop.MonoGame.mpack" failonerror="false"/>
      
      <choose>
        <when test="${os == 'Unix'}">
          <exec program="Linux/InstallerData/generate_run.sh" workingdir="Linux/InstallerData/"/>
          <exec program="Linux/InstallerData/generate_deb.sh" workingdir="Linux/InstallerData/"/>
          <copy tofile="Linux/monogame-sdk.run" file="Linux/InstallerData/monogame-sdk.run" />
          <copy tofile="Linux/monogame-sdk.deb" file="Linux/InstallerData/monogame-sdk.deb" />
          <delete dir="Linux/InstallerData" failonerror="false"/>
        </when>
        <otherwise>
          <if test="${directory::exists('Linux/InstallerData')}">
            <zip zipfile="Linux/LinuxInstaller.zip">
              <fileset basedir="Linux/InstallerData">
                <include name="**/*" />
              </fileset>
            </zip>
            <delete dir="Linux/InstallerData" failonerror="false"/>
          </if>
        </otherwise>
      </choose>
    </if>

  </target>
</project>
