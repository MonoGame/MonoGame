<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpDX.DXGI</name>
    </assembly>
    <members>
        <member name="T:SharpDX.DXGI.Adapter">
            <summary>	
            The  <see cref="T:SharpDX.DXGI.Adapter"/> interface represents a display sub-system (including one or more GPU's, DACs and video memory).	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter']/*"/>	
            <unmanaged>IDXGIAdapter</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.DXGIObject">
            <summary>	
            An <see cref="T:SharpDX.DXGI.DXGIObject"/> interface is a base interface for all DXGI objects; <see cref="T:SharpDX.DXGI.DXGIObject"/> supports associating caller-defined (private data) with an object and retrieval of an interface to the parent object.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIObject']/*"/>	
            <unmanaged>IDXGIObject</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.DXGIObject.GetParent``1">
            <summary>
            </summary>
            <typeparam name = "T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SharpDX.DXGI.DXGIObject.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.DXGIObject"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.DXGIObject.SetPrivateData(System.Guid,System.Int32,System.IntPtr)">
            <summary>	
            Sets application-defined data to the object and associates that data with a <see cref="T:System.Guid"/>.	
            </summary>	
            <param name="name"><para>A <see cref="T:System.Guid"/> that identifies the data. Use this <see cref="T:System.Guid"/> in a call to GetPrivateData to get the data.</para></param>	
            <param name="dataSize"><para>The size of the object's data.</para></param>	
            <param name="dataRef"><para>A reference to the object's data.</para></param>	
            <returns>Returns one of the DXGI_ERROR values.</returns>	
            <remarks>	
            SetPrivateData makes a copy of the specified data and stores it with the object.Private data that SetPrivateData stores in the object occupies the same storage space as private data that is stored by associated Direct3D objects (for example, by a Microsoft Direct3D?11 device through <see cref="!:SharpDX.Direct3D11.Device.SetPrivateData"/> or by a Direct3D?11 child device through <see cref="!:SharpDX.Direct3D11.DeviceChild.SetPrivateData"/>).The debug layer reports memory leaks by outputting a list of object interface references along with their friendly names. The default friendly name is "&lt;unnamed&gt;". You can set the friendly name so that you can determine if the corresponding object interface reference caused the leak. To set the friendly name, use the SetPrivateData method and the well-known private data <see cref="T:System.Guid"/> (<see cref="F:SharpDX.Direct3D.CommonGuid.DebugObjectName"/>) that is in D3Dcommon.h. For example, to give pContext a friendly name of My name, use the following code:<code>	
             static const char c_szName[] = "My name";	
            hr = pContext-&gt;SetPrivateData( <see cref="F:SharpDX.Direct3D.CommonGuid.DebugObjectName"/>, sizeof( c_szName ) - 1, c_szName );	
            	
            </code>You can use <see cref="F:SharpDX.Direct3D.CommonGuid.DebugObjectName"/> to track down memory leaks and understand performance characteristics of your applications. This information is reflected in the output of the debug layer that is related to memory leaks (ID3D11Debug::ReportLiveDeviceObjects) and with the event tracing for Windows events that we've added to Windows Developer Preview.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIObject::SetPrivateData']/*"/>	
            <unmanaged>HRESULT IDXGIObject::SetPrivateData([In] const GUID&amp; Name,[In] unsigned int DataSize,[In, Buffer] const void* pData)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.DXGIObject.SetPrivateDataInterface(System.Guid,SharpDX.ComObject)">
            <summary>	
            Set an interface in the object's private data.	
            </summary>	
            <param name="name"><para>A <see cref="T:System.Guid"/> identifying the interface.</para></param>	
            <param name="unknownRef"><para>The interface to set.</para></param>	
            <returns>Returns one of the following DXGI_ERROR.</returns>	
            <remarks>	
            This API associates an interface reference with the object.When the interface is set its reference count is incremented. When the data are overwritten (by calling SPD or SPDI with the same <see cref="T:System.Guid"/>) or the object is destroyed, ::Release() is called and the interface's reference count is decremented.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIObject::SetPrivateDataInterface']/*"/>	
            <unmanaged>HRESULT IDXGIObject::SetPrivateDataInterface([In] const GUID&amp; Name,[In] const IUnknown* pUnknown)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.DXGIObject.GetPrivateData(System.Guid,System.Int32@,System.IntPtr)">
            <summary>	
            Get a reference to the object's data.	
            </summary>	
            <param name="name"><para>A <see cref="T:System.Guid"/> identifying the data.</para></param>	
            <param name="dataSizeRef"><para>The size of the data.</para></param>	
            <param name="dataRef"><para>Pointer to the data.</para></param>	
            <returns>Returns one of the following DXGI_ERROR.</returns>	
            <remarks>	
            If the data returned is a reference to an <see cref="T:SharpDX.ComObject"/>, or one of its derivative classes, previously set by <see cref="M:SharpDX.DXGI.DXGIObject.SetPrivateDataInterface(System.Guid,SharpDX.ComObject)"/>, then ::Release() must be called on the reference before the reference is freed to decrement the reference count.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIObject::GetPrivateData']/*"/>	
            <unmanaged>HRESULT IDXGIObject::GetPrivateData([In] const GUID&amp; Name,[InOut] unsigned int* pDataSize,[Out, Buffer] void* pData)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.DXGIObject.GetParent(System.Guid,System.IntPtr@)">
            <summary>	
            Gets the parent of the object.	
            </summary>	
            <param name="riid"><para>The ID of the requested interface.</para></param>	
            <param name="parentOut"><para>The address of a reference to the parent object.</para></param>	
            <returns>Returns one of the DXGI_ERROR values.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIObject::GetParent']/*"/>	
            <unmanaged>HRESULT IDXGIObject::GetParent([In] const GUID&amp; riid,[Out] void** ppParent)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.IsInterfaceSupported(System.Type)">
            <summary>	
            Checks to see if a device interface for a graphics component is supported by the system.	
            </summary>	
            <param name="type">The GUID of the interface of the device version for which support is being checked. For example, typeof(ID3D10Device).GUID. </param>
            <returns>
            	<c>true</c> if the interface is supported; otherwise, <c>false</c>.
            </returns>
            <unmanaged>HRESULT IDXGIAdapter::CheckInterfaceSupport([In] GUID* InterfaceName,[Out] __int64* pUMDVersion)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.Adapter.IsInterfaceSupported``1">
            <summary>	
            Checks to see if a device interface for a graphics component is supported by the system.	
            </summary>	
            <typeparam name="T">the interface of the device version for which support is being checked.</typeparam>
            <returns>
            	<c>true</c> if the interface is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Adapter.IsInterfaceSupported``1(System.Int64@)">
            <summary>	
            Checks to see if a device interface for a graphics component is supported by the system.	
            </summary>	
            <typeparam name="T">the interface of the device version for which support is being checked.</typeparam>
            <param name="userModeVersion">The user mode driver version of InterfaceName. This is only returned if the interface is supported.</param>
            <returns>
            	<c>true</c> if the interface is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Adapter.IsInterfaceSupported(System.Type,System.Int64@)">
            <summary>	
            Checks to see if a device interface for a graphics component is supported by the system.	
            </summary>	
            <param name="type">The GUID of the interface of the device version for which support is being checked. For example, typeof(ID3D10Device).GUID. </param>
            <param name="userModeVersion">The user mode driver version of InterfaceName. This is only returned if the interface is supported.</param>
            <returns>
            	<c>true</c> if the interface is supported; otherwise, <c>false</c>.
            </returns>
            <unmanaged>HRESULT IDXGIAdapter::CheckInterfaceSupport([In] GUID* InterfaceName,[Out] __int64* pUMDVersion)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.Adapter.GetOutputCount">
            <summary>
              Return the number of available outputs from this adapter.
            </summary>
            <returns>The number of outputs</returns>
        </member>
        <member name="M:SharpDX.DXGI.Adapter.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Adapter"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.GetOutput(System.Int32)">
            <summary>	
            Enumerate adapter (video card) outputs.	
            </summary>	
            <param name="output"><para>The index of the output.</para></param>	
            <returns><para>The address of a reference to an <see cref="T:SharpDX.DXGI.Output"/> interface at the position specified by the Output parameter.</para></returns>	
            <remarks>	
            When the EnumOutputs method succeeds and fills the ppOutput parameter with the address of the reference to the output interface, EnumOutputs increments the output interface's reference count. To avoid a memory leak, when you finish using the  output interface, call the Release method to decrement the reference count.EnumOutputs first returns the output on which the desktop primary is displayed. This adapter corresponds with an index of zero. EnumOutputs then returns other outputs.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter::EnumOutputs']/*"/>	
            <unmanaged>HRESULT IDXGIAdapter::EnumOutputs([In] unsigned int Output,[Out] IDXGIOutput** ppOutput)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.GetDescription(SharpDX.DXGI.AdapterDescription@)">
            <summary>	
            Gets a DXGI 1.0 description of an adapter (or video card).	
            </summary>	
            <param name="descRef"><para>A reference to a <see cref="T:SharpDX.DXGI.AdapterDescription"/> structure that describes the adapter. This parameter must not be <c>null</c>.</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise returns E_INVALIDARG if the pDesc parameter is <c>null</c>.</returns>	
            <remarks>	
            Graphics applications can use the DXGI API to retrieve an accurate set of graphics memory  values on systems that have WDDM drivers. The following are the critical steps involved.Graphics driver model determination ? Because DXGI is only available on systems with WDDM drivers, the application must first confirm the driver model by using the following API.  	
            <code>	
             HasWDDMDriver()	
            { LPDIRECT3DCREATE9EX pD3D9Create9Ex = <c>null</c>; HMODULE             hD3D9          = <c>null</c>; hD3D9 = LoadLibrary( L"d3d9.dll" ); if ( <c>null</c> == hD3D9 ) { return false; } // /*  Try to create IDirect3D9Ex interface (also known as a DX9L interface). This interface can only be created if the driver is a WDDM driver. */ // pD3D9Create9Ex = (LPDIRECT3DCREATE9EX) GetProcAddress( hD3D9, "Direct3DCreate9Ex" ); return pD3D9Create9Ex != <c>null</c>;	
            } 	
            </code>	
                Retrieval of graphics memory values.? After the driver model is determined to be WDDM, the application can use the DirectX 10 or later API and DXGI to get the amount of graphics memory.  After creating a Direct3D device the following code can be used to obtain  a <see cref="T:SharpDX.DXGI.AdapterDescription"/> structure containing the amount of available graphics memory.  	
            <code>	
             <see cref="T:SharpDX.DXGI.Device"/> * pDXGIDevice;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice);	
            <see cref="T:SharpDX.DXGI.Adapter"/> * pDXGIAdapter;	
            pDXGIDevice-&gt;GetAdapter(&amp;pDXGIAdapter);	
            <see cref="T:SharpDX.DXGI.AdapterDescription"/> adapterDesc;	
            pDXGIAdapter-&gt;GetDesc(&amp;adapterDesc); 	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter::GetDesc']/*"/>	
            <unmanaged>HRESULT IDXGIAdapter::GetDesc([Out] DXGI_ADAPTER_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.CheckInterfaceSupport(System.Guid,System.Int64@)">
            <summary>	
            Checks whether the system supports a device interface for a graphics component.	
            </summary>	
            <param name="interfaceName"><para>The <see cref="T:System.Guid"/> of the interface of the device version for which support is being checked. For example, __uuidof(<see cref="!:SharpDX.Direct3D10.Device"/>).</para></param>	
            <param name="uMDVersionRef"><para>The user mode driver version of InterfaceName. This is  returned only if the interface is supported. This parameter can be <c>null</c>.</para></param>	
            <returns>S_OK indicates that the interface is supported, otherwise <see cref="F:SharpDX.DXGI.DXGIError.Unsupported"/> is returned (For more information, see DXGI_ERROR).</returns>	
            <remarks>	
            Note??You can  use CheckInterfaceSupport only to  check whether a Direct3D 10.x interface is supported, and only on Windows Vista SP1 and later versions of the operating system. If you try to use CheckInterfaceSupport to check whether a Direct3D 11.x and later version interface is supported, CheckInterfaceSupport returns <see cref="F:SharpDX.DXGI.DXGIError.Unsupported"/>. Therefore, do not use CheckInterfaceSupport. Instead, to verify whether the operating system supports a particular interface, try to create the interface. For example, if you call the <see cref="!:SharpDX.Direct3D11.Device.CreateBlendState"/> method and it fails, the operating system does not support the <see cref="!:SharpDX.Direct3D11.BlendState"/> interface.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter::CheckInterfaceSupport']/*"/>	
            <unmanaged>HRESULT IDXGIAdapter::CheckInterfaceSupport([In] const GUID&amp; InterfaceName,[Out] LARGE_INTEGER* pUMDVersion)</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.Adapter.Description">
            <summary>	
            Gets a DXGI 1.0 description of an adapter (or video card).	
            </summary>	
            <remarks>	
            Graphics applications can use the DXGI API to retrieve an accurate set of graphics memory  values on systems that have WDDM drivers. The following are the critical steps involved.Graphics driver model determination ? Because DXGI is only available on systems with WDDM drivers, the application must first confirm the driver model by using the following API.  	
            <code>	
             HasWDDMDriver()	
            { LPDIRECT3DCREATE9EX pD3D9Create9Ex = <c>null</c>; HMODULE             hD3D9          = <c>null</c>; hD3D9 = LoadLibrary( L"d3d9.dll" ); if ( <c>null</c> == hD3D9 ) { return false; } // /*  Try to create IDirect3D9Ex interface (also known as a DX9L interface). This interface can only be created if the driver is a WDDM driver. */ // pD3D9Create9Ex = (LPDIRECT3DCREATE9EX) GetProcAddress( hD3D9, "Direct3DCreate9Ex" ); return pD3D9Create9Ex != <c>null</c>;	
            } 	
            </code>	
                Retrieval of graphics memory values.? After the driver model is determined to be WDDM, the application can use the DirectX 10 or later API and DXGI to get the amount of graphics memory.  After creating a Direct3D device the following code can be used to obtain  a <see cref="T:SharpDX.DXGI.AdapterDescription"/> structure containing the amount of available graphics memory.  	
            <code>	
             <see cref="T:SharpDX.DXGI.Device"/> * pDXGIDevice;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice);	
            <see cref="T:SharpDX.DXGI.Adapter"/> * pDXGIAdapter;	
            pDXGIDevice-&gt;GetAdapter(&amp;pDXGIAdapter);	
            <see cref="T:SharpDX.DXGI.AdapterDescription"/> adapterDesc;	
            pDXGIAdapter-&gt;GetDesc(&amp;adapterDesc); 	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter::GetDesc']/*"/>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged>HRESULT IDXGIAdapter::GetDesc([Out] DXGI_ADAPTER_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.Device">
            <summary>	
            An <see cref="T:SharpDX.DXGI.Device"/> interface implements a derived class for DXGI objects that produce image data.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice']/*"/>	
            <unmanaged>IDXGIDevice</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Device.QueryResourceResidency(SharpDX.ComObject[])">
            <summary>	
            Gets the residency status of an array of resources.	
            </summary>	
            <remarks>	
            The information returned by the pResidencyStatus argument array describes the residency status at the time that the QueryResourceResidency method was called.   Note that the residency status will constantly change. If you call the QueryResourceResidency method during a device removed state, the pResidencyStatus argument will return the DXGI_RESIDENCY_EVICTED_TO_DISK flag. Note??This method should not be called every frame as it incurs a non-trivial amount of overhead. 	
            </remarks>	
            <param name="comObjects">An array of <see cref="T:SharpDX.DXGI.Resource"/> interfaces. </param>
            <returns>Returns an array of <see cref="T:SharpDX.DXGI.Residency"/> flags. Each element describes the residency status for corresponding element in  the ppResources argument array. </returns>
            <unmanaged>HRESULT IDXGIDevice::QueryResourceResidency([In, Buffer] const IUnknown** ppResources,[Out, Buffer] DXGI_RESIDENCY* pResidencyStatus,[None] int NumResources)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.Device.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Device"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Device.GetAdapter(SharpDX.DXGI.Adapter@)">
            <summary>	
            Returns the adapter for the specified device.	
            </summary>	
            <param name="adapterRef"><para>The address of an <see cref="T:SharpDX.DXGI.Adapter"/> interface reference to the adapter.  This parameter must not be <c>null</c>.</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the DXGI_ERROR that indicates failure. If the pAdapter parameter is <c>null</c> this method returns E_INVALIDARG.</returns>	
            <remarks>	
            If the GetAdapter method succeeds, the reference count on the adapter interface will be incremented. To avoid a memory leak, be sure to release the interface when you are finished using it.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::GetAdapter']/*"/>	
            <unmanaged>HRESULT IDXGIDevice::GetAdapter([Out] IDXGIAdapter** pAdapter)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Device.CreateSurface(SharpDX.DXGI.SurfaceDescription@,System.Int32,System.Int32,System.Nullable{SharpDX.DXGI.SharedResource},SharpDX.DXGI.Surface@)">
            <summary>	
            Returns a surface. This method is used internally and you should not call it directly in your application.	
            </summary>	
            <param name="descRef"><para>A reference to a <see cref="T:SharpDX.DXGI.SurfaceDescription"/> structure that describes the surface.</para></param>	
            <param name="numSurfaces"><para>The number of surfaces to create.</para></param>	
            <param name="usage"><para>A DXGI_USAGE flag that specifies how the surface is expected to be used.</para></param>	
            <param name="sharedResourceRef"><para>An optional reference to a <see cref="T:SharpDX.DXGI.SharedResource"/> structure that contains shared resource information for opening views of such resources.</para></param>	
            <param name="surfaceOut"><para>The address of an <see cref="T:SharpDX.DXGI.Surface"/> interface reference to the first created surface.</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise.  For a list of error codes, see DXGI_ERROR.</returns>	
            <remarks>	
            The CreateSurface method creates a buffer to exchange data between one or more devices. It is used internally, and you should not directly call it.The runtime automatically creates an <see cref="T:SharpDX.DXGI.Surface"/> interface when it creates a Direct3D resource object that represents a surface. For example, the runtime creates an <see cref="T:SharpDX.DXGI.Surface"/> interface when it calls <see cref="!:SharpDX.Direct3D11.Device.CreateTexture2D"/> or <see cref="!:SharpDX.Direct3D10.Device.CreateTexture2D"/> to create a 2D texture. To retrieve the <see cref="T:SharpDX.DXGI.Surface"/> interface that represents the 2D texture surface, call ID3D11Texture2D::QueryInterface or ID3D10Texture2D::QueryInterface. In this call, you must pass the identifier of <see cref="T:SharpDX.DXGI.Surface"/>. If the 2D texture has only a single MIP-map level and does not consist of an array of textures, QueryInterface succeeds and returns a reference to the <see cref="T:SharpDX.DXGI.Surface"/> interface reference. Otherwise, QueryInterface fails and does not return the reference to <see cref="T:SharpDX.DXGI.Surface"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::CreateSurface']/*"/>	
            <unmanaged>HRESULT IDXGIDevice::CreateSurface([In] const DXGI_SURFACE_DESC* pDesc,[In] unsigned int NumSurfaces,[In] unsigned int Usage,[In, Optional] const DXGI_SHARED_RESOURCE* pSharedResource,[Out] IDXGISurface** ppSurface)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Device.QueryResourceResidency(SharpDX.ComObject[],SharpDX.DXGI.Residency[],System.Int32)">
            <summary>	
            Gets the residency status of an array of resources.	
            </summary>	
            <param name="resourcesOut"><para>An array of <see cref="T:SharpDX.DXGI.Resource"/> interfaces.</para></param>	
            <param name="residencyStatusRef"><para>An array of <see cref="T:SharpDX.DXGI.Residency"/> flags. Each element describes the residency status for corresponding element in  the ppResources argument array.</para></param>	
            <param name="numResources"><para>The number of resources in the ppResources argument array and pResidencyStatus argument array.</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successfull; otherwise, returns <see cref="F:SharpDX.DXGI.DXGIError.DeviceRemoved"/>, E_INVALIDARG, or  E_POINTER (see WinError.h for more information).</returns>	
            <remarks>	
            The information returned by the pResidencyStatus argument array describes the residency status at the time that the QueryResourceResidency method was called.   Note that the residency status will constantly change.If you call the QueryResourceResidency method during a device removed state, the pResidencyStatus argument will return the <see cref="F:SharpDX.DXGI.Residency.EvictedToDisk"/> flag.Note??This method should not be called every frame as it incurs a non-trivial amount of overhead.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::QueryResourceResidency']/*"/>	
            <unmanaged>HRESULT IDXGIDevice::QueryResourceResidency([In, Buffer] const IUnknown** ppResources,[Out, Buffer] DXGI_RESIDENCY* pResidencyStatus,[In] unsigned int NumResources)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Device.QueryResourceResidency(SharpDX.ComArray{SharpDX.ComObject},SharpDX.DXGI.Residency[],System.Int32)">
            <summary>	
            Gets the residency status of an array of resources.	
            </summary>	
            <param name="resourcesOut"><para>An array of <see cref="T:SharpDX.DXGI.Resource"/> interfaces.</para></param>	
            <param name="residencyStatusRef"><para>An array of <see cref="T:SharpDX.DXGI.Residency"/> flags. Each element describes the residency status for corresponding element in  the ppResources argument array.</para></param>	
            <param name="numResources"><para>The number of resources in the ppResources argument array and pResidencyStatus argument array.</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successfull; otherwise, returns <see cref="F:SharpDX.DXGI.DXGIError.DeviceRemoved"/>, E_INVALIDARG, or  E_POINTER (see WinError.h for more information).</returns>	
            <remarks>	
            The information returned by the pResidencyStatus argument array describes the residency status at the time that the QueryResourceResidency method was called.   Note that the residency status will constantly change.If you call the QueryResourceResidency method during a device removed state, the pResidencyStatus argument will return the <see cref="F:SharpDX.DXGI.Residency.EvictedToDisk"/> flag.Note??This method should not be called every frame as it incurs a non-trivial amount of overhead.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::QueryResourceResidency']/*"/>	
            <unmanaged>HRESULT IDXGIDevice::QueryResourceResidency([In, Buffer] const IUnknown** ppResources,[Out, Buffer] DXGI_RESIDENCY* pResidencyStatus,[In] unsigned int NumResources)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Device.SetGPUThreadPriority(System.Int32)">
            <summary>	
            Sets the GPU thread priority.	
            </summary>	
            <param name="priority"><para>A value that specifies the required GPU thread priority. This value must be between -7 and 7, inclusive, where 0 represents normal priority.</para></param>	
            <returns>Return <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns E_INVALIDARG if the Priority parameter is invalid.</returns>	
            <remarks>	
            The values for the Priority parameter function as follows:Positive values increase the likelihood that the GPU scheduler will grant GPU execution cycles to the device when rendering. Negative values lessen the likelihood that the device will receive GPU execution cycles when devices compete for them. The device is guaranteed to receive some GPU execution cycles at all settings.To use the SetGPUThreadPriority method, you should have a comprehensive understanding of GPU scheduling. You should profile your application to ensure that it behaves as intended. If used inappropriately, the SetGPUThreadPriority method can impede rendering speed and result in a poor user experience.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::SetGPUThreadPriority']/*"/>	
            <unmanaged>HRESULT IDXGIDevice::SetGPUThreadPriority([In] int Priority)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Device.GetGPUThreadPriority(System.Int32@)">
            <summary>	
            Gets the GPU thread priority.	
            </summary>	
            <param name="priorityRef"><para>A reference to a variable that receives a value that indicates the current GPU thread priority. The value will be between -7 and 7, inclusive, where 0 represents normal priority.</para></param>	
            <returns>Return <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns E_POINTER if the pPriority parameter is <c>null</c>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::GetGPUThreadPriority']/*"/>	
            <unmanaged>HRESULT IDXGIDevice::GetGPUThreadPriority([Out] int* pPriority)</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.Device.Adapter">
            <summary>	
            Returns the adapter for the specified device.	
            </summary>	
            <remarks>	
            If the GetAdapter method succeeds, the reference count on the adapter interface will be incremented. To avoid a memory leak, be sure to release the interface when you are finished using it.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::GetAdapter']/*"/>	
            <unmanaged>GetAdapter</unmanaged>	
            <unmanaged>HRESULT IDXGIDevice::GetAdapter([Out] IDXGIAdapter** pAdapter)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.Device.GPUThreadPriority">
            <summary>	
            Gets the GPU thread priority.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::GetGPUThreadPriority']/*"/>	
            <unmanaged>GetGPUThreadPriority</unmanaged>	
            <unmanaged>HRESULT IDXGIDevice::GetGPUThreadPriority([Out] int* pPriority)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.DeviceChild">
            <summary>	
            Inherited from objects that are tied to the device so that they can retrieve a reference to it.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDeviceSubObject']/*"/>	
            <unmanaged>IDXGIDeviceSubObject</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.DeviceChild.GetDevice``1">
            <summary>
            Retrieves the device.
            </summary>
            <typeparam name="T">The interface that is returned can be any interface published by the device.</typeparam>
            <returns>The associated device. </returns>
            <unmanaged>HRESULT IDXGIDeviceSubObject::GetDevice([In] GUID* riid,[Out] void** ppDevice)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.DeviceChild.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.DeviceChild"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.DeviceChild.GetDevice(System.Guid,System.IntPtr@)">
            <summary>	
            Retrieves the device.	
            </summary>	
            <param name="riid"><para>The reference id for the device.</para></param>	
            <param name="deviceOut"><para>The address of a reference to the device.</para></param>	
            <returns>A code that indicates success or failure (see DXGI_ERROR).</returns>	
            <remarks>	
            The type of interface that is returned can be any interface published by the device. For example, it could be an <see cref="T:SharpDX.DXGI.Device"/> * called pDevice, and therefore the REFIID would be obtained by calling __uuidof(pDevice).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDeviceSubObject::GetDevice']/*"/>	
            <unmanaged>HRESULT IDXGIDeviceSubObject::GetDevice([In] const GUID&amp; riid,[Out] void** ppDevice)</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.DeviceChild.DebugName">
            <summary>
            Gets or sets the debug-name for this object.
            </summary>
            <value>
            The debug name.
            </value>
        </member>
        <member name="T:SharpDX.DXGI.Factory">
            <summary>	
            An <see cref="T:SharpDX.DXGI.Factory"/> interface implements methods for generating DXGI objects (which handle full screen transitions).	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory']/*"/>	
            <unmanaged>IDXGIFactory</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory.#ctor">
            <summary>
              Default Constructor for Factory
            </summary>
        </member>
        <member name="M:SharpDX.DXGI.Factory.GetAdapterCount">
            <summary>
              Return the number of available adapters from this factory.
            </summary>
            <returns>The number of adapters</returns>
        </member>
        <member name="M:SharpDX.DXGI.Factory.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Factory"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Factory.GetAdapter(System.Int32)">
            <summary>	
            Enumerates the adapters (video cards).	
            </summary>	
            <param name="adapter"><para>The index of the adapter to enumerate.</para></param>	
            <returns><para>The address of a reference to an <see cref="T:SharpDX.DXGI.Adapter"/> interface at the position specified by the Adapter parameter.  This parameter must not be <c>null</c>.</para></returns>	
            <remarks>	
            When you create a factory, the factory enumerates the set of adapters that are available in the system. Therefore, if you change the adapters in a system, you must destroy  and recreate the <see cref="T:SharpDX.DXGI.Factory"/> object. The number of adapters in a system changes when you add or remove a display card, or dock or undock a laptop.When the EnumAdapters method succeeds and fills the ppAdapter parameter with the address of the reference to the adapter interface, EnumAdapters increments the adapter interface's reference count. When you finish using the  adapter interface, call the Release method to decrement the reference count before you destroy the reference.EnumAdapters first returns the local adapter with the output on which the desktop primary is displayed. This adapter corresponds with an index of zero. EnumAdapters then returns other adapters with outputs.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory::EnumAdapters']/*"/>	
            <unmanaged>HRESULT IDXGIFactory::EnumAdapters([In] unsigned int Adapter,[Out] IDXGIAdapter** ppAdapter)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory.MakeWindowAssociation(System.IntPtr,SharpDX.DXGI.WindowAssociationFlags)">
            <summary>	
            Allows DXGI to monitor an application's message queue for the alt-enter key sequence (which causes the application to switch from windowed to full screen or vice versa).	
            </summary>	
            <param name="windowHandle"><para>The handle of the window that is to be monitored. This parameter can be <c>null</c>; but only if the flags are also 0. </para></param>	
            <param name="flags"><para>One or more of the following values:</para>  <see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAll"/> - Prevent DXGI from monitoring an applications message queue; this makes DXGI unable to respond to mode changes. <see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAltEnter"/> - Prevent DXGI from responding to an alt-enter sequence. <see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnorePrintScreen"/> - Prevent DXGI from responding to a print-screen key.</param>	
            <returns>if WindowHandle is invalid, or E_OUTOFMEMORY.</returns>	
            <remarks>	
            The combination of WindowHandle and Flags informs DXGI to stop monitoring window messages for the previously-associated window.If the application switches to full-screen mode, DXGI will choose a full-screen resolution to be the smallest supported resolution that is larger or the same size as the current back buffer size.Applications can make some changes to make the transition from windowed to full screen more efficient. For example, on a WM_SIZE message, the application should release any outstanding swap-chain back buffers, call <see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,System.Int32)"/>, then re-acquire the back buffers from the swap chain(s). This gives the swap chain(s) an opportunity to resize the back buffers, and/or recreate them to enable full-screen flipping operation. If the application does not perform this sequence, DXGI will still make the full-screen/windowed transition, but may be forced to use a stretch operation (since the back buffers may not be the correct size), which may be less efficient. Even if a stretch is not required, presentation may not be optimal because the back buffers might not be directly interchangeable with the front buffer. Thus, a call to ResizeBuffers on WM_SIZE is always recommended, since WM_SIZE is always sent during a fullscreen transition.While windowed, the application can, if it chooses, restrict the size of its window's client area to sizes to which it is comfortable rendering. A fully flexible application would make no such restriction, but UI elements or other design considerations can, of course, make this flexibility untenable. If the application further chooses to restrict its window's client area to just those that match supported full-screen resolutions, the application can field WM_SIZING, then check against <see cref="M:SharpDX.DXGI.Output.FindClosestMatchingMode(SharpDX.DXGI.ModeDescription@,SharpDX.DXGI.ModeDescription@,SharpDX.ComObject)"/>. If a matching mode is found, allow the resize. (The <see cref="T:SharpDX.DXGI.Output"/> can be retrieved from <see cref="M:SharpDX.DXGI.SwapChain.GetContainingOutput(SharpDX.DXGI.Output@)"/>. Absent subsequent changes to desktop topology, this will be the same output that will be chosen when alt-enter is fielded and fullscreen mode is begun for that swap chain.)Applications that want to handle mode changes or Alt+Enter themselves should call MakeWindowAssociation with the <see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAll"/> flag after swap chain creation. The WindowHandle argument, if non-<c>null</c>, specifies that the application message queues will not be handled by the DXGI runtime for all swap chains of a particular target <see cref="T:System.IntPtr"/>.  Calling MakeWindowAssociation with the <see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAll"/> flag after swapchain creation ensures that DXGI will not interfere with application's handling of window mode changes or Alt+Enter.Notes for Metro style appsIf a Metro style app calls MakeWindowAssociation, it fails with <see cref="F:SharpDX.DXGI.DXGIError.NotCurrentlyAvailable"/>.A Microsoft Win32 application can use MakeWindowAssociation to control full-screen transitions through the Alt+Enter key combination and print screen behavior for full screen.  For Metro style apps, because DXGI cannot perform full-screen transitions, Metro style app have no way to control full-screen transitions.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory::MakeWindowAssociation']/*"/>	
            <unmanaged>HRESULT IDXGIFactory::MakeWindowAssociation([In] HWND WindowHandle,[In] DXGI_MWA_FLAGS Flags)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory.GetWindowAssociation">
            <summary>	
            Get the window through which the user controls the transition to and from full screen.	
            </summary>	
            <returns><para>A reference to a window handle.</para></returns>	
            <remarks>	
            Notes for Metro style appsIf a Metro style app calls GetWindowAssociation, it fails with <see cref="F:SharpDX.DXGI.DXGIError.NotCurrentlyAvailable"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory::GetWindowAssociation']/*"/>	
            <unmanaged>HRESULT IDXGIFactory::GetWindowAssociation([Out] HWND* pWindowHandle)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)">
            <summary>	
            [Starting with Direct3D 11.1, we recommend not to use CreateSwapChain anymore to create a swap chain. Instead, use CreateSwapChainForHwnd, CreateSwapChainForImmersiveWindow, or CreateSwapChainForCompositionSurface depending on how you want to create the swap chain.]	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="descRef">No documentation.</param>	
            <param name="swapChainOut">No documentation.</param>	
            <returns>if pDesc or ppSwapChain is <c>null</c>, <see cref="F:SharpDX.DXGI.DXGIStatus.Occluded"/> if you request full-screen mode and it is unavailable, or E_OUTOFMEMORY. Other error codes defined by the type of device passed in may also be returned.</returns>	
            <remarks>	
            If you attempt to create a swap chain in full-screen mode, and full-screen mode is unavailable, the swap chain will be created in windowed mode and <see cref="F:SharpDX.DXGI.DXGIStatus.Occluded"/> will be returned.If the buffer width or the buffer height is zero, the sizes will be inferred from the output window size in the swap-chain description.Because the target output cannot be chosen explicitly when the swap-chain is created, you should not create a full-screen swap chain. This can reduce presentation performance if the swap chain size and the output window size do not match. Here are two ways to ensure that the sizes match:Create a windowed swap chain and then set it full-screen using <see cref="M:SharpDX.DXGI.SwapChain.SetFullscreenState(System.Boolean,SharpDX.DXGI.Output)"/>. Save a reference to the swap chain immediately after creation, and use it to get the output window size during a WM_SIZE event. Then resize the swap chain buffers (with <see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,System.Int32)"/>) during the transition from windowed to full-screen.If the swap chain is in full-screen mode, before you release it you must use SetFullscreenState to switch it to windowed mode. For more information about releasing a swap chain, see the "Destroying a Swap Chain" section of DXGI Overview.You can specify <see cref="T:SharpDX.DXGI.SwapEffect"/> and <see cref="T:SharpDX.DXGI.SwapChainFlags"/> values in the swap-chain description that pDesc points to. These values allow you to use features like flip-model presentation and content protection by using pre-Windows Developer Preview APIs.However, to use stereo presentation and to change resize behavior for the flip model, applications must use the <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullscreenDescription},SharpDX.DXGI.Output)"/> method. Otherwise, the back-buffer contents implicitly scale to fit the presentation target size; that is, you can't turn off scaling.Notes for Metro style appsIf a Metro style app calls CreateSwapChain with full screen specified, CreateSwapChain fails.Metro style apps call the  <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForImmersiveWindow(SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/> method to create a swap chain.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory::CreateSwapChain']/*"/>	
            <unmanaged>HRESULT IDXGIFactory::CreateSwapChain([In] IUnknown* pDevice,[In] DXGI_SWAP_CHAIN_DESC* pDesc,[Out, Fast] IDXGISwapChain** ppSwapChain)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory.CreateSoftwareAdapter(System.IntPtr)">
            <summary>	
            Create an adapter interface that represents a software adapter.	
            </summary>	
            <param name="module"><para>Handle to the software adapter's dll. HMODULE can be obtained with GetModuleHandle or LoadLibrary.</para></param>	
            <returns><para>Address of a reference to an adapter (see <see cref="T:SharpDX.DXGI.Adapter"/>).</para></returns>	
            <remarks>	
            A software adapter is a DLL that implements the entirety of a device driver interface, plus emulation, if necessary, of kernel-mode graphics components for Windows. Details on implementing a software adapter can be found in the Windows Vista Driver Development Kit. This is a very complex development task, and is not recommended for general readers.Calling this method will increment the module's reference count by one. The reference count can be decremented by calling FreeLibrary.The typical calling scenario is to call LoadLibrary, pass the handle to CreateSoftwareAdapter, then immediately call FreeLibrary on the DLL and forget the DLL's HMODULE. Since the software adapter calls FreeLibrary when it is destroyed, the lifetime of the DLL will now be owned by the adapter, and the application is free of any further consideration of its lifetime.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory::CreateSoftwareAdapter']/*"/>	
            <unmanaged>HRESULT IDXGIFactory::CreateSoftwareAdapter([In] HINSTANCE Module,[Out] IDXGIAdapter** ppAdapter)</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.Factory1">
            <summary>	
            The <see cref="T:SharpDX.DXGI.Factory1"/> interface implements methods for generating DXGI objects.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory1']/*"/>	
            <unmanaged>IDXGIFactory1</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory1.#ctor">
            <summary>
              Default Constructor for Factory1.
            </summary>
        </member>
        <member name="M:SharpDX.DXGI.Factory1.GetAdapterCount1">
            <summary>
              Return the number of available adapters from this factory.
            </summary>
            <returns>The number of adapters</returns>
        </member>
        <member name="M:SharpDX.DXGI.Factory1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Factory1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Factory1.GetAdapter1(System.Int32)">
            <summary>	
            Enumerates both adapters (video cards) with or without outputs.	
            </summary>	
            <param name="adapter"><para>The index of the adapter to enumerate.</para></param>	
            <returns><para>The address of a reference to an <see cref="T:SharpDX.DXGI.Adapter1"/> interface at the position specified by the Adapter parameter.   This parameter must not be <c>null</c>.</para></returns>	
            <remarks>	
            This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).When you create a factory, the factory enumerates the set of adapters that are available in the system. Therefore, if you change the adapters in a system, you must destroy  and recreate the <see cref="T:SharpDX.DXGI.Factory1"/> object. The number of adapters in a system changes when you add or remove a display card, or dock or undock a laptop.When the EnumAdapters1 method succeeds and fills the ppAdapter parameter with the address of the reference to the adapter interface, EnumAdapters1 increments the adapter interface's reference count. When you finish using the  adapter interface, call the Release method to decrement the reference count before you destroy the reference.EnumAdapters1 first returns the local adapter with the output on which the desktop primary is displayed. This adapter corresponds with an index of zero. EnumAdapters1 next returns other adapters with outputs. EnumAdapters1 finally returns adapters without outputs.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory1::EnumAdapters1']/*"/>	
            <unmanaged>HRESULT IDXGIFactory1::EnumAdapters1([In] unsigned int Adapter,[Out] IDXGIAdapter1** ppAdapter)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory1.IsCurrent_">
            <summary>	
            Informs an application of the possible need to re-enumerate adapters.	
            </summary>	
            <returns>FALSE, if a new adapter is becoming available or the current adapter is going away. TRUE, no adapter changes.IsCurrent returns <see cref="F:SharpDX.Result.False"/> to inform the calling application to re-enumerate adapters.</returns>	
            <remarks>	
            This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory1::IsCurrent']/*"/>	
            <unmanaged>BOOL IDXGIFactory1::IsCurrent()</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.Factory1.IsCurrent">
            <summary>	
            Informs an application of the possible need to re-enumerate adapters.	
            </summary>	
            <remarks>	
            This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory1::IsCurrent']/*"/>	
            <unmanaged>IsCurrent</unmanaged>	
            <unmanaged>BOOL IDXGIFactory1::IsCurrent()</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.FormatHelper">
            <summary>
            Helper to use with <see cref="T:SharpDX.DXGI.Format"/>.
            </summary>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.SizeOfInBytes(SharpDX.DXGI.Format)">
            <summary>
            Calculates the size of a <see cref="T:SharpDX.DXGI.Format"/> in bytes.
            </summary>
            <param name="format">The dxgi format.</param>
            <returns>size of in bytes</returns>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.SizeOfInBits(SharpDX.DXGI.Format)">
            <summary>
            Calculates the size of a <see cref="T:SharpDX.DXGI.Format"/> in bits.
            </summary>
            <param name="format">The dxgi format.</param>
            <returns>size of in bits</returns>
        </member>
        <member name="T:SharpDX.DXGI.AdapterFlags">
            <summary>	
            Identifies the type of DXGI adapter.	
            </summary>	
            <remarks>	
            The <see cref="T:SharpDX.DXGI.AdapterFlags"/> enumerated type is used by the Flags member of the <see cref="T:SharpDX.DXGI.AdapterDescription1"/> or <see cref="T:SharpDX.DXGI.AdapterDesc2"/> structure to  identify the type of DXGI adapter.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_FLAG']/*"/>	
            <unmanaged>DXGI_ADAPTER_FLAG</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterFlags.None">
            <summary>	
            <para>Specifies no flags.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_FLAG_NONE']/*"/>	
            <unmanaged>DXGI_ADAPTER_FLAG_NONE</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterFlags.Remote">
            <summary>	
            <para>Value always set to 0. This flag is reserved.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_FLAG_REMOTE']/*"/>	
            <unmanaged>DXGI_ADAPTER_FLAG_REMOTE</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterFlags.Software">
            <summary>	
            <para>Specifies a software adapter.</para>	
             Direct3D 11:??This enumeration value is supported starting with Windows Developer Preview.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_FLAG_SOFTWARE']/*"/>	
            <unmanaged>DXGI_ADAPTER_FLAG_SOFTWARE</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.AlphaMode">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            For more information about alpha mode, see <see cref="!:SharpDX.Direct2D1.AlphaMode"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ALPHA_MODE']/*"/>	
            <unmanaged>DXGI_ALPHA_MODE</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AlphaMode.Unspecified">
            <summary>	
            <para>Indicates that the transparency behavior is not specified.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ALPHA_MODE_UNSPECIFIED']/*"/>	
            <unmanaged>DXGI_ALPHA_MODE_UNSPECIFIED</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AlphaMode.Premultiplied">
            <summary>	
            <para>Indicates that the transparency behavior is premultiplied. Each color is first scaled by the alpha value. The alpha value itself is the same in both straight and premultiplied alpha. Typically, no color channel value is greater than the alpha channel value. If a color channel value in a premultiplied format is greater than the alpha channel, the standard source-over blending math results in an additive blend.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ALPHA_MODE_PREMULTIPLIED']/*"/>	
            <unmanaged>DXGI_ALPHA_MODE_PREMULTIPLIED</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AlphaMode.Straight">
            <summary>	
            <para>Indicates that the transparency behavior is not premultiplied. The alpha channel indicates the transparency of the color.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ALPHA_MODE_STRAIGHT']/*"/>	
            <unmanaged>DXGI_ALPHA_MODE_STRAIGHT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AlphaMode.Ignore">
            <summary>	
            <para>Indicates to ignore the transparency behavior.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ALPHA_MODE_IGNORE']/*"/>	
            <unmanaged>DXGI_ALPHA_MODE_IGNORE</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.ComputePreemptionGranularity">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            You call the <see cref="M:SharpDX.DXGI.Adapter2.GetDesc2(SharpDX.DXGI.AdapterDesc2@)"/> method to retrieve the granularity level at which the GPU can be preempted from performing its current compute task. The operating system specifies the compute granularity level in the  ComputePreemptionGranularity member of the <see cref="T:SharpDX.DXGI.AdapterDesc2"/> structure.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COMPUTE_PREEMPTION_GRANULARITY']/*"/>	
            <unmanaged>DXGI_COMPUTE_PREEMPTION_GRANULARITY</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ComputePreemptionGranularity.DmaBufferBoundary">
            <summary>	
            <para>Indicates the preemption granularity as a compute packet.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COMPUTE_PREEMPTION_DMA_BUFFER_BOUNDARY']/*"/>	
            <unmanaged>DXGI_COMPUTE_PREEMPTION_DMA_BUFFER_BOUNDARY</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ComputePreemptionGranularity.DispatchBoundary">
            <summary>	
            <para>Indicates the preemption granularity as a dispatch (for example, a call to the <see cref="!:SharpDX.Direct3D11.DeviceContext.Dispatch"/> method). A dispatch is a part of a compute packet.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COMPUTE_PREEMPTION_DISPATCH_BOUNDARY']/*"/>	
            <unmanaged>DXGI_COMPUTE_PREEMPTION_DISPATCH_BOUNDARY</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ComputePreemptionGranularity.ThreadGroupBoundary">
            <summary>	
            <para>Indicates the preemption granularity as a thread group. A thread group is a part of a dispatch.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COMPUTE_PREEMPTION_THREAD_GROUP_BOUNDARY']/*"/>	
            <unmanaged>DXGI_COMPUTE_PREEMPTION_THREAD_GROUP_BOUNDARY</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ComputePreemptionGranularity.ThreadBoundary">
            <summary>	
            <para>Indicates the preemption granularity as a thread in a thread group. A thread is a part of a thread group.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COMPUTE_PREEMPTION_THREAD_BOUNDARY']/*"/>	
            <unmanaged>DXGI_COMPUTE_PREEMPTION_THREAD_BOUNDARY</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ComputePreemptionGranularity.InstructionBoundary">
            <summary>	
            <para>Indicates the preemption granularity as a compute instruction in a thread.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_COMPUTE_PREEMPTION_INSTRUCTION_BOUNDARY']/*"/>	
            <unmanaged>DXGI_COMPUTE_PREEMPTION_INSTRUCTION_BOUNDARY</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.DisplayModeEnumerationFlags">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ENUM_MODES_FLAGS']/*"/>	
            <unmanaged>DXGI_ENUM_MODES_FLAGS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Interlaced">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ENUM_MODES_INTERLACED']/*"/>	
            <unmanaged>DXGI_ENUM_MODES_INTERLACED</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Scaling">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ENUM_MODES_SCALING']/*"/>	
            <unmanaged>DXGI_ENUM_MODES_SCALING</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Stereo">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ENUM_MODES_STEREO']/*"/>	
            <unmanaged>DXGI_ENUM_MODES_STEREO</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeEnumerationFlags.DisabledStereo">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ENUM_MODES_DISABLED_STEREO']/*"/>	
            <unmanaged>DXGI_ENUM_MODES_DISABLED_STEREO</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.DisplayModeRotation">
            <summary>	
            Flags that indicate how the back buffers should be rotated to fit the physical rotation of a monitor.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_ROTATION']/*"/>	
            <unmanaged>DXGI_MODE_ROTATION</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeRotation.Unspecified">
            <summary>	
            <para>Unspecified rotation.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_ROTATION_UNSPECIFIED']/*"/>	
            <unmanaged>DXGI_MODE_ROTATION_UNSPECIFIED</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeRotation.Identity">
            <summary>	
            <para>Specifies no rotation.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_ROTATION_IDENTITY']/*"/>	
            <unmanaged>DXGI_MODE_ROTATION_IDENTITY</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeRotation.Rotate90">
            <summary>	
            <para>Specifies 90 degrees of rotation.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_ROTATION_ROTATE90']/*"/>	
            <unmanaged>DXGI_MODE_ROTATION_ROTATE90</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeRotation.Rotate180">
            <summary>	
            <para>Specifies 180 degrees of rotation.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_ROTATION_ROTATE180']/*"/>	
            <unmanaged>DXGI_MODE_ROTATION_ROTATE180</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeRotation.Rotate270">
            <summary>	
            <para>Specifies 270 degrees of rotation.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_ROTATION_ROTATE270']/*"/>	
            <unmanaged>DXGI_MODE_ROTATION_ROTATE270</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.DisplayModeScaling">
            <summary>	
            Flags indicating how an image is stretched to fit a given monitor's resolution.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCALING']/*"/>	
            <unmanaged>DXGI_MODE_SCALING</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeScaling.Unspecified">
            <summary>	
            <para>Unspecified scaling.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCALING_UNSPECIFIED']/*"/>	
            <unmanaged>DXGI_MODE_SCALING_UNSPECIFIED</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeScaling.Centered">
            <summary>	
            <para>Specifies no scaling. The image is centered on the display. This flag is typically used for a fixed-dot-pitch display (such as an LED display).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCALING_CENTERED']/*"/>	
            <unmanaged>DXGI_MODE_SCALING_CENTERED</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeScaling.Stretched">
            <summary>	
            <para>Specifies stretched scaling.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCALING_STRETCHED']/*"/>	
            <unmanaged>DXGI_MODE_SCALING_STRETCHED</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.DisplayModeScanlineOrder">
            <summary>	
            Flags indicating the method the raster uses to create an image on a surface.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCANLINE_ORDER']/*"/>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeScanlineOrder.Unspecified">
            <summary>	
            <para>Scanline order is unspecified.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED']/*"/>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeScanlineOrder.Progressive">
            <summary>	
            <para>The image is created from the first scanline to the last without skipping any.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE']/*"/>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeScanlineOrder.UpperFieldFirst">
            <summary>	
            <para>The image is created beginning with the upper field.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST']/*"/>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeScanlineOrder.LowerFieldFirst">
            <summary>	
            <para>The image is created beginning with the lower field.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST']/*"/>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.DXGIStatus">
            <summary>	
            Status codes that can be returned by DXGI functions.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS']/*"/>	
            <unmanaged>DXGI_STATUS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.Occluded">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_OCCLUDED']/*"/>	
            <unmanaged>DXGI_STATUS_OCCLUDED</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.Clipped">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_CLIPPED']/*"/>	
            <unmanaged>DXGI_STATUS_CLIPPED</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.NoRedirection">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_NO_REDIRECTION']/*"/>	
            <unmanaged>DXGI_STATUS_NO_REDIRECTION</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.NoDesktopAccess">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_NO_DESKTOP_ACCESS']/*"/>	
            <unmanaged>DXGI_STATUS_NO_DESKTOP_ACCESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.GraphicsVidpnSourceInUse">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE']/*"/>	
            <unmanaged>DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.ModeChanged">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_MODE_CHANGED']/*"/>	
            <unmanaged>DXGI_STATUS_MODE_CHANGED</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.ModeChangeInProgress">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_MODE_CHANGE_IN_PROGRESS']/*"/>	
            <unmanaged>DXGI_STATUS_MODE_CHANGE_IN_PROGRESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.Unoccluded">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_UNOCCLUDED']/*"/>	
            <unmanaged>DXGI_STATUS_UNOCCLUDED</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.DdaWasStillDrawing">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_DDA_WAS_STILL_DRAWING']/*"/>	
            <unmanaged>DXGI_STATUS_DDA_WAS_STILL_DRAWING</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.Format">
            <summary>	
            Resource data formats which includes fully-typed and typeless formats. There is a list of format modifiers at the bottom of the page,  that more fully describes each format type.	
            </summary>	
            <remarks>	
            A few formats have additional restrictions.A resource declared with the DXGI_FORMAT_R32G32B32 family of formats cannot be used simultaneously for vertex and texture data. That is, you may not create a buffer resource with the DXGI_FORMAT_R32G32B32 family of formats that uses any of the following bind flags: <see cref="!:SharpDX.Direct3D10.BindFlags.VertexBuffer"/>, <see cref="!:SharpDX.Direct3D10.BindFlags.IndexBuffer"/>, <see cref="!:SharpDX.Direct3D10.BindFlags.ConstantBuffer"/>, or <see cref="!:SharpDX.Direct3D10.BindFlags.StreamOutput"/> (see <see cref="!:SharpDX.Direct3D10.BindFlags"/>). <see cref="F:SharpDX.DXGI.Format.R1_UNorm"/> is designed specifically for text filtering, and must be used with a format-specific, configurable 8x8 filter mode. When calling an HLSL sampling function using this format, the address offset parameter must be set to (0,0). A resource using a sub-sampled format (such as DXGI_FORMAT_R8G8_B8G8) must have a size that is a multiple of 2 in the x dimension. Format is not available in Direct3D 10 and Direct3D 10.1The following topics provide lists of the formats that particular hardware feature levels support:Hardware Support for Direct3D 11.1 Formats   Hardware Support for Direct3D 11 Formats   Hardware Support for Direct3D 10.1 Formats   Hardware Support for Direct3D 10 Formats   Hardware Support for Direct3D 10Level9 FormatsFor a list of the DirectXMath types that map to <see cref="T:SharpDX.DXGI.Format"/> values, see DirectXMath Library Internals.Format ModifiersEach enumeration value contains a format modifier which describes the data type.Format ModifiersDescription _FLOATA floating-point value; 32-bit floating-point formats use IEEE 754 single-precision (s23e8 format): sign bit, 8-bit biased (127) exponent,  and 23-bit mantissa. 16-bit floating-point formats use half-precision (s10e5 format): sign bit, 5-bit biased (15) exponent, and 10-bit mantissa. _SINTTwo's complement signed integer. For example, a 3-bit SINT represents the values -4, -3, -2, -1, 0, 1, 2, 3. _SNORMSigned normalized integer; which is interpreted in a resource as a signed integer, and is interpreted in a shader as a signed normalized floating-point value in the range [-1, 1]. For an 2's complement number, the maximum value is 1.0f (a 5-bit value 01111 maps to 1.0f), and the minimum value is -1.0f (a 5-bit value 10000 maps to -1.0f). In addition, the second-minimum number maps to -1.0f (a 5-bit value 10001 maps to -1.0f). The resulting integer representations are evenly spaced floating-point values in the range (-1.0f...0.0f), and also a complementary set of representations for numbers in the range (0.0f...1.0f). _SRGBStandard RGB data, which roughly displays colors in a linear ramp of luminosity levels such that an average observer, under average viewing conditions, can view them on an average display.  <para>All 0's maps to 0.0f, and all 1's maps to 1.0f. The sequence of unsigned integer encodings between all 0's and all 1's represent a nonlinear progression in the floating-point interpretation of the numbers between 0.0f to 1.0f. For more detail, see the SRGB color standard, IEC 61996-2-1, at IEC (International Electrotechnical Commission).</para>	
             Conversion to or from sRGB space is automatically done by D3DX10 or D3DX9 texture-load functions. If the format has an alpha channel, the alpha data is also stored in sRGB color space.  _TYPELESSTypeless data, with a defined number of bits. Typeless formats are designed for creating typeless resources; that is, a resource whose size is known, but whose data type is not yet fully defined. When a typeless resource is bound to a shader, the application or shader must resolve the format type (which must match the number of bits per component in the typeless format). <para>A typeless format contains one or more subformats; each subformat resolves the data type. For example, in the R32G32B32 group, which defines types for three-component 96-bit data, there is one typeless format and three fully typed subformats.</para>	
              	
            <code>	
             <see cref="F:SharpDX.DXGI.Format.R32G32B32_Typeless"/>, <see cref="F:SharpDX.DXGI.Format.R32G32B32_Float"/>, <see cref="F:SharpDX.DXGI.Format.R32G32B32_UInt"/>, <see cref="F:SharpDX.DXGI.Format.R32G32B32_SInt"/>,	
            	
            </code>	
               _UINTUnsigned integer. For instance, a 3-bit UINT represents the values 0, 1, 2, 3, 4, 5, 6, 7. _UNORMUnsigned normalized integer; which is interpreted in a resource as an unsigned integer, and is interpreted in a shader as an unsigned normalized floating-point value in the range [0, 1]. All 0's maps to 0.0f, and all 1's maps to 1.0f. A sequence of evenly spaced floating-point values from 0.0f to 1.0f are represented. For instance, a 2-bit UNORM represents 0.0f, 1/3, 2/3, and 1.0f.?New Resource FormatsDirect3D 10 offers new data compression formats for compressing high-dynamic range (HDR) lighting data, normal maps and heightfields to a fraction of their original size. These compression types include:Shared-Exponent high-dynamic range (HDR) format (RGBE) New Block-Compressed 1-2 channel UNORM/SNORM formatsThe block compression formats can be used for any of the 2D or 3D texture types ( Texture2D, Texture2DArray, Texture3D, or TextureCube) including mipmap surfaces. The block compression techniques require texture dimensions to be a multiple of 4 (since the implementation compresses on blocks of 4x4 texels). In the texture sampler, compressed formats are always decompressed before texture filtering.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT']/*"/>	
            <unmanaged>DXGI_FORMAT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.Unknown">
            <summary>	
            <para>The format is not known.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_UNKNOWN']/*"/>	
            <unmanaged>DXGI_FORMAT_UNKNOWN</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32A32_Typeless">
            <summary>	
            <para>A four-component, 128-bit typeless format that supports 32 bits per channel including alpha. 1</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32A32_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_R32G32B32A32_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32A32_Float">
            <summary>	
            <para>A four-component, 128-bit floating-point format that supports 32 bits per channel including alpha. 1</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32A32_FLOAT']/*"/>	
            <unmanaged>DXGI_FORMAT_R32G32B32A32_FLOAT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32A32_UInt">
            <summary>	
            <para>A four-component, 128-bit unsigned-integer format that supports 32 bits per channel including alpha. 1</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32A32_UINT']/*"/>	
            <unmanaged>DXGI_FORMAT_R32G32B32A32_UINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32A32_SInt">
            <summary>	
            <para>A four-component, 128-bit signed-integer format that supports 32 bits per channel including alpha. 1</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32A32_SINT']/*"/>	
            <unmanaged>DXGI_FORMAT_R32G32B32A32_SINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32_Typeless">
            <summary>	
            <para>A three-component, 96-bit typeless format that supports 32 bits per color channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_R32G32B32_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32_Float">
            <summary>	
            <para>A three-component, 96-bit floating-point format that supports 32 bits per color channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32_FLOAT']/*"/>	
            <unmanaged>DXGI_FORMAT_R32G32B32_FLOAT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32_UInt">
            <summary>	
            <para>A three-component, 96-bit unsigned-integer format that supports 32 bits per color channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32_UINT']/*"/>	
            <unmanaged>DXGI_FORMAT_R32G32B32_UINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32_SInt">
            <summary>	
            <para>A three-component, 96-bit signed-integer format that supports 32 bits per color channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32_SINT']/*"/>	
            <unmanaged>DXGI_FORMAT_R32G32B32_SINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16B16A16_Typeless">
            <summary>	
            <para>A four-component, 64-bit typeless format that supports 16 bits per channel including alpha.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_R16G16B16A16_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16B16A16_Float">
            <summary>	
            <para>A four-component, 64-bit floating-point format that supports 16 bits per channel including alpha.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_FLOAT']/*"/>	
            <unmanaged>DXGI_FORMAT_R16G16B16A16_FLOAT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16B16A16_UNorm">
            <summary>	
            <para>A four-component, 64-bit unsigned-normalized-integer format that supports 16 bits per channel including alpha.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_R16G16B16A16_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16B16A16_UInt">
            <summary>	
            <para>A four-component, 64-bit unsigned-integer format that supports 16 bits per channel including alpha.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_UINT']/*"/>	
            <unmanaged>DXGI_FORMAT_R16G16B16A16_UINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16B16A16_SNorm">
            <summary>	
            <para>A four-component, 64-bit signed-normalized-integer format that supports 16 bits per channel including alpha.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_SNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_R16G16B16A16_SNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16B16A16_SInt">
            <summary>	
            <para>A four-component, 64-bit signed-integer format that supports 16 bits per channel including alpha.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_SINT']/*"/>	
            <unmanaged>DXGI_FORMAT_R16G16B16A16_SINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32_Typeless">
            <summary>	
            <para>A two-component, 64-bit typeless format that supports 32 bits for the red channel and 32 bits for the green channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_R32G32_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32_Float">
            <summary>	
            <para>A two-component, 64-bit floating-point format that supports 32 bits for the red channel and 32 bits for the green channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32_FLOAT']/*"/>	
            <unmanaged>DXGI_FORMAT_R32G32_FLOAT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32_UInt">
            <summary>	
            <para>A two-component, 64-bit unsigned-integer format that supports 32 bits for the red channel and 32 bits for the green channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32_UINT']/*"/>	
            <unmanaged>DXGI_FORMAT_R32G32_UINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32_SInt">
            <summary>	
            <para>A two-component, 64-bit signed-integer format that supports 32 bits for the red channel and 32 bits for the green channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32_SINT']/*"/>	
            <unmanaged>DXGI_FORMAT_R32G32_SINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G8X24_Typeless">
            <summary>	
            <para>A two-component, 64-bit typeless format that supports 32 bits for the red channel, 8 bits for the green channel, and 24 bits are unused.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G8X24_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_R32G8X24_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.D32_Float_S8X24_UInt">
            <summary>	
            <para>A 32-bit floating-point component, and two unsigned-integer components (with an additional 32 bits). This format supports 32-bit depth, 8-bit stencil, and 24 bits are unused.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_D32_FLOAT_S8X24_UINT']/*"/>	
            <unmanaged>DXGI_FORMAT_D32_FLOAT_S8X24_UINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32_Float_X8X24_Typeless">
            <summary>	
            <para>A 32-bit floating-point component, and two typeless components (with an additional 32 bits). This format supports 32-bit red channel, 8 bits are unused, and 24 bits are unused.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.X32_Typeless_G8X24_UInt">
            <summary>	
            <para>A 32-bit typeless component, and two unsigned-integer components (with an additional 32 bits). This format has 32 bits unused, 8 bits for green channel, and 24 bits are unused.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_X32_TYPELESS_G8X24_UINT']/*"/>	
            <unmanaged>DXGI_FORMAT_X32_TYPELESS_G8X24_UINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R10G10B10A2_Typeless">
            <summary>	
            <para>A four-component, 32-bit typeless format that supports 10 bits for each color and 2 bits for alpha.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R10G10B10A2_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_R10G10B10A2_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R10G10B10A2_UNorm">
            <summary>	
            <para>A four-component, 32-bit unsigned-normalized-integer format that supports 10 bits for each color and 2 bits for alpha.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R10G10B10A2_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_R10G10B10A2_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R10G10B10A2_UInt">
            <summary>	
            <para>A four-component, 32-bit unsigned-integer format that supports 10 bits for each color and 2 bits for alpha.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R10G10B10A2_UINT']/*"/>	
            <unmanaged>DXGI_FORMAT_R10G10B10A2_UINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R11G11B10_Float">
            <summary>	
            <para>Three partial-precision floating-point numbers encoded into a single 32-bit value (a variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent).  There are no sign bits, and there is a 5-bit biased (15) exponent for each channel, 6-bit mantissa  for R and G, and a 5-bit mantissa for B, as shown in the following illustration.</para>	
             <para></para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R11G11B10_FLOAT']/*"/>	
            <unmanaged>DXGI_FORMAT_R11G11B10_FLOAT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8B8A8_Typeless">
            <summary>	
            <para>A four-component, 32-bit typeless format that supports 8 bits per channel including alpha.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_R8G8B8A8_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm">
            <summary>	
            <para>A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits per channel including alpha.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_R8G8B8A8_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm_SRgb">
            <summary>	
            <para>A four-component, 32-bit unsigned-normalized integer sRGB format that supports 8 bits per channel including alpha.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_UNORM_SRGB']/*"/>	
            <unmanaged>DXGI_FORMAT_R8G8B8A8_UNORM_SRGB</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8B8A8_UInt">
            <summary>	
            <para>A four-component, 32-bit unsigned-integer format that supports 8 bits per channel including alpha.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_UINT']/*"/>	
            <unmanaged>DXGI_FORMAT_R8G8B8A8_UINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8B8A8_SNorm">
            <summary>	
            <para>A four-component, 32-bit signed-normalized-integer format that supports 8 bits per channel including alpha.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_SNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_R8G8B8A8_SNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8B8A8_SInt">
            <summary>	
            <para>A four-component, 32-bit signed-integer format that supports 8 bits per channel including alpha.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_SINT']/*"/>	
            <unmanaged>DXGI_FORMAT_R8G8B8A8_SINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16_Typeless">
            <summary>	
            <para>A two-component, 32-bit typeless format that supports 16 bits for the red channel and 16 bits for the green channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_R16G16_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16_Float">
            <summary>	
            <para>A two-component, 32-bit floating-point format that supports 16 bits for the red channel and 16 bits for the green channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16_FLOAT']/*"/>	
            <unmanaged>DXGI_FORMAT_R16G16_FLOAT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16_UNorm">
            <summary>	
            <para>A two-component, 32-bit unsigned-normalized-integer format that supports 16 bits each for the green and red channels.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_R16G16_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16_UInt">
            <summary>	
            <para>A two-component, 32-bit unsigned-integer format that supports 16 bits for the red channel and 16 bits for the green channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16_UINT']/*"/>	
            <unmanaged>DXGI_FORMAT_R16G16_UINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16_SNorm">
            <summary>	
            <para>A two-component, 32-bit signed-normalized-integer format that supports 16 bits for the red channel and 16 bits for the green channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16_SNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_R16G16_SNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16_SInt">
            <summary>	
            <para>A two-component, 32-bit signed-integer format that supports 16 bits for the red channel and 16 bits for the green channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16_SINT']/*"/>	
            <unmanaged>DXGI_FORMAT_R16G16_SINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32_Typeless">
            <summary>	
            <para>A single-component, 32-bit typeless format that supports 32 bits for the red channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_R32_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.D32_Float">
            <summary>	
            <para>A single-component, 32-bit floating-point format that supports 32 bits for depth.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_D32_FLOAT']/*"/>	
            <unmanaged>DXGI_FORMAT_D32_FLOAT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32_Float">
            <summary>	
            <para>A single-component, 32-bit floating-point format that supports 32 bits for the red channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32_FLOAT']/*"/>	
            <unmanaged>DXGI_FORMAT_R32_FLOAT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32_UInt">
            <summary>	
            <para>A single-component, 32-bit unsigned-integer format that supports 32 bits for the red channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32_UINT']/*"/>	
            <unmanaged>DXGI_FORMAT_R32_UINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32_SInt">
            <summary>	
            <para>A single-component, 32-bit signed-integer format that supports 32 bits for the red channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32_SINT']/*"/>	
            <unmanaged>DXGI_FORMAT_R32_SINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R24G8_Typeless">
            <summary>	
            <para>A two-component, 32-bit typeless format that supports 24 bits for the red channel and 8 bits for the green channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R24G8_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_R24G8_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.D24_UNorm_S8_UInt">
            <summary>	
            <para>A 32-bit z-buffer format that supports 24 bits for depth and 8 bits for stencil.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_D24_UNORM_S8_UINT']/*"/>	
            <unmanaged>DXGI_FORMAT_D24_UNORM_S8_UINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R24_UNorm_X8_Typeless">
            <summary>	
            <para>A 32-bit format, that contains a 24 bit, single-component, unsigned-normalized integer, with an additional typeless 8 bits. This format has 24 bits red channel and 8 bits unused.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R24_UNORM_X8_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_R24_UNORM_X8_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.X24_Typeless_G8_UInt">
            <summary>	
            <para>A 32-bit format, that contains a 24 bit, single-component, typeless format,  with an additional 8 bit unsigned integer component. This format has 24 bits unused and 8 bits green channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_X24_TYPELESS_G8_UINT']/*"/>	
            <unmanaged>DXGI_FORMAT_X24_TYPELESS_G8_UINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8_Typeless">
            <summary>	
            <para>A two-component, 16-bit typeless format that supports 8 bits for the red channel and 8 bits for the green channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_R8G8_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8_UNorm">
            <summary>	
            <para>A two-component, 16-bit unsigned-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_R8G8_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8_UInt">
            <summary>	
            <para>A two-component, 16-bit unsigned-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8_UINT']/*"/>	
            <unmanaged>DXGI_FORMAT_R8G8_UINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8_SNorm">
            <summary>	
            <para>A two-component, 16-bit signed-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8_SNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_R8G8_SNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8_SInt">
            <summary>	
            <para>A two-component, 16-bit signed-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8_SINT']/*"/>	
            <unmanaged>DXGI_FORMAT_R8G8_SINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16_Typeless">
            <summary>	
            <para>A single-component, 16-bit typeless format that supports 16 bits for the red channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_R16_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16_Float">
            <summary>	
            <para>A single-component, 16-bit floating-point format that supports 16 bits for the red channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16_FLOAT']/*"/>	
            <unmanaged>DXGI_FORMAT_R16_FLOAT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.D16_UNorm">
            <summary>	
            <para>A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for depth.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_D16_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_D16_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16_UNorm">
            <summary>	
            <para>A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for the red channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_R16_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16_UInt">
            <summary>	
            <para>A single-component, 16-bit unsigned-integer format that supports 16 bits for the red channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16_UINT']/*"/>	
            <unmanaged>DXGI_FORMAT_R16_UINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16_SNorm">
            <summary>	
            <para>A single-component, 16-bit signed-normalized-integer format that supports 16 bits for the red channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16_SNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_R16_SNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16_SInt">
            <summary>	
            <para>A single-component, 16-bit signed-integer format that supports 16 bits for the red channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16_SINT']/*"/>	
            <unmanaged>DXGI_FORMAT_R16_SINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8_Typeless">
            <summary>	
            <para>A single-component, 8-bit typeless format that supports 8 bits for the red channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_R8_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8_UNorm">
            <summary>	
            <para>A single-component, 8-bit unsigned-normalized-integer format that supports 8 bits for the red channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_R8_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8_UInt">
            <summary>	
            <para>A single-component, 8-bit unsigned-integer format that supports 8 bits for the red channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8_UINT']/*"/>	
            <unmanaged>DXGI_FORMAT_R8_UINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8_SNorm">
            <summary>	
            <para>A single-component, 8-bit signed-normalized-integer format that supports 8 bits for the red channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8_SNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_R8_SNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8_SInt">
            <summary>	
            <para>A single-component, 8-bit signed-integer format that supports 8 bits for the red channel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8_SINT']/*"/>	
            <unmanaged>DXGI_FORMAT_R8_SINT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.A8_UNorm">
            <summary>	
            <para>A single-component, 8-bit unsigned-normalized-integer format for alpha only.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_A8_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_A8_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R1_UNorm">
            <summary>	
            <para>A single-component, 1-bit unsigned-normalized integer format that supports 1 bit for the red channel. 2.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R1_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_R1_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R9G9B9E5_Sharedexp">
            <summary>	
            <para>Three partial-precision floating-point numbers encoded into a single 32-bit value all sharing the same 5-bit exponent (variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent).  There is no sign bit, and there is a shared 5-bit biased (15) exponent and a 9-bit mantissa for each channel, as shown in the following illustration. 2.</para>	
             <para></para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R9G9B9E5_SHAREDEXP']/*"/>	
            <unmanaged>DXGI_FORMAT_R9G9B9E5_SHAREDEXP</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8_B8G8_UNorm">
            <summary>	
            <para>A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the UYVY format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. 3</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8_B8G8_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_R8G8_B8G8_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.G8R8_G8B8_UNorm">
            <summary>	
            <para>A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the YUY2 format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. 3</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_G8R8_G8B8_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_G8R8_G8B8_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC1_Typeless">
            <summary>	
            <para>Four-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC1_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_BC1_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC1_UNorm">
            <summary>	
            <para>Four-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC1_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_BC1_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC1_UNorm_SRgb">
            <summary>	
            <para>Four-component block-compression format for sRGB data. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC1_UNORM_SRGB']/*"/>	
            <unmanaged>DXGI_FORMAT_BC1_UNORM_SRGB</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC2_Typeless">
            <summary>	
            <para>Four-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC2_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_BC2_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC2_UNorm">
            <summary>	
            <para>Four-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC2_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_BC2_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC2_UNorm_SRgb">
            <summary>	
            <para>Four-component block-compression format for sRGB data. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC2_UNORM_SRGB']/*"/>	
            <unmanaged>DXGI_FORMAT_BC2_UNORM_SRGB</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC3_Typeless">
            <summary>	
            <para>Four-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC3_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_BC3_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC3_UNorm">
            <summary>	
            <para>Four-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC3_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_BC3_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC3_UNorm_SRgb">
            <summary>	
            <para>Four-component block-compression format for sRGB data. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC3_UNORM_SRGB']/*"/>	
            <unmanaged>DXGI_FORMAT_BC3_UNORM_SRGB</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC4_Typeless">
            <summary>	
            <para>One-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC4_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_BC4_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC4_UNorm">
            <summary>	
            <para>One-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC4_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_BC4_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC4_SNorm">
            <summary>	
            <para>One-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC4_SNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_BC4_SNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC5_Typeless">
            <summary>	
            <para>Two-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC5_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_BC5_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC5_UNorm">
            <summary>	
            <para>Two-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC5_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_BC5_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC5_SNorm">
            <summary>	
            <para>Two-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC5_SNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_BC5_SNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B5G6R5_UNorm">
            <summary>	
            <para>A three-component, 16-bit unsigned-normalized-integer format that supports 5 bits for blue, 6 bits for green, and 5 bits for red.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B5G6R5_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_B5G6R5_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B5G5R5A1_UNorm">
            <summary>	
            <para>A four-component, 16-bit unsigned-normalized-integer format that supports 5 bits for each color channel and 1-bit alpha.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B5G5R5A1_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_B5G5R5A1_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm">
            <summary>	
            <para>A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8-bit alpha.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B8G8R8A8_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_B8G8R8A8_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B8G8R8X8_UNorm">
            <summary>	
            <para>A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8 bits unused.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B8G8R8X8_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_B8G8R8X8_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R10G10B10_Xr_Bias_A2_UNorm">
            <summary>	
            <para>A four-component, 32-bit 2.8-biased fixed-point format that supports 10 bits for each color channel and 2-bit alpha.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B8G8R8A8_Typeless">
            <summary>	
            <para>A four-component, 32-bit typeless format that supports 8 bits for each channel including alpha. 4</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B8G8R8A8_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_B8G8R8A8_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb">
            <summary>	
            <para>A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each channel including alpha. 4</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B8G8R8A8_UNORM_SRGB']/*"/>	
            <unmanaged>DXGI_FORMAT_B8G8R8A8_UNORM_SRGB</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B8G8R8X8_Typeless">
            <summary>	
            <para>A four-component, 32-bit typeless format that supports 8 bits for each color channel, and 8 bits are unused. 4</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B8G8R8X8_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_B8G8R8X8_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B8G8R8X8_UNorm_SRgb">
            <summary>	
            <para>A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each color channel, and 8 bits are unused. 4</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B8G8R8X8_UNORM_SRGB']/*"/>	
            <unmanaged>DXGI_FORMAT_B8G8R8X8_UNORM_SRGB</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC6H_Typeless">
            <summary>	
            <para>A typeless block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC6H_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_BC6H_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC6H_Uf16">
            <summary>	
            <para>A block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC6H_UF16']/*"/>	
            <unmanaged>DXGI_FORMAT_BC6H_UF16</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC6H_Sf16">
            <summary>	
            <para>A block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC6H_SF16']/*"/>	
            <unmanaged>DXGI_FORMAT_BC6H_SF16</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC7_Typeless">
            <summary>	
            <para>A typeless block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC7_TYPELESS']/*"/>	
            <unmanaged>DXGI_FORMAT_BC7_TYPELESS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC7_UNorm">
            <summary>	
            <para>A block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC7_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_BC7_UNORM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC7_UNorm_SRgb">
            <summary>	
            <para>A block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC7_UNORM_SRGB']/*"/>	
            <unmanaged>DXGI_FORMAT_BC7_UNORM_SRGB</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.Ayuv">
            <summary>	
            <para>Most common YUV 4:4:4 video resource format. Valid view formats for this video resource format are <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UInt"/>. For UAVs, an additional valid view format is <see cref="F:SharpDX.DXGI.Format.R32_UInt"/>. By using <see cref="F:SharpDX.DXGI.Format.R32_UInt"/> for UAVs, you can both read and write as opposed to just write for <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UInt"/>. Supported view types are SRV, RTV, and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is V-&gt;R8, 	
            U-&gt;G8, 	
            Y-&gt;B8, 	
            and A-&gt;A8.</para>	
             Direct3D 11:??This value is not supported until Windows Developer Preview.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_AYUV']/*"/>	
            <unmanaged>DXGI_FORMAT_AYUV</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.Y410">
            <summary>	
            <para>10-bit per channel packed YUV 4:4:4 video resource format. Valid view formats for this video resource format are <see cref="F:SharpDX.DXGI.Format.R10G10B10A2_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R10G10B10A2_UInt"/>. For UAVs, an additional valid view format is <see cref="F:SharpDX.DXGI.Format.R32_UInt"/>. By using <see cref="F:SharpDX.DXGI.Format.R32_UInt"/> for UAVs, you can both read and write as opposed to just write for <see cref="F:SharpDX.DXGI.Format.R10G10B10A2_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R10G10B10A2_UInt"/>. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is U-&gt;R10,	
            Y-&gt;G10,	
            V-&gt;B10,	
            and A-&gt;A2.</para>	
             Direct3D 11:??This value is not supported until Windows Developer Preview.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_Y410']/*"/>	
            <unmanaged>DXGI_FORMAT_Y410</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.Y416">
            <summary>	
            <para>16-bit per channel packed YUV 4:4:4 video resource format. Valid view formats for this video resource format are <see cref="F:SharpDX.DXGI.Format.R16G16B16A16_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R16G16B16A16_UInt"/>. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is U-&gt;R16,	
            Y-&gt;G16,	
            V-&gt;B16,	
            and A-&gt;A16.</para>	
             Direct3D 11:??This value is not supported until Windows Developer Preview.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_Y416']/*"/>	
            <unmanaged>DXGI_FORMAT_Y416</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.Nv12">
            <summary>	
            <para>Most common YUV 4:2:0 video resource format. Valid luminance data view formats for this video resource format are <see cref="F:SharpDX.DXGI.Format.R8_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R8_UInt"/>. Valid chrominance data view formats (width and height are each 1/2 of luminance view) for this video resource format are <see cref="F:SharpDX.DXGI.Format.R8G8_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R8G8_UInt"/>. Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping to the view channel is Y-&gt;R8. For chrominance data view, the mapping to the view channel is U-&gt;R8 and	
            V-&gt;G8.</para>	
             Direct3D 11:??This value is not supported until Windows Developer Preview.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_NV12']/*"/>	
            <unmanaged>DXGI_FORMAT_NV12</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.P010">
            <summary>	
            <para>10-bit per channel planar YUV 4:2:0 video resource format. Valid luminance data view formats for this video resource format are <see cref="F:SharpDX.DXGI.Format.R16_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R16_UInt"/>. The runtime does not enforce whether the lowest 6 bits are 0 (given that this video resource format is a 10-bit format that uses 16 bits). If required, application shader code would have to enforce this manually.  From the runtime's point of view, <see cref="F:SharpDX.DXGI.Format.P010"/> is no different than <see cref="F:SharpDX.DXGI.Format.P016"/>. Valid chrominance data view formats (width and height are each 1/2 of luminance view) for this video resource format are <see cref="F:SharpDX.DXGI.Format.R16G16_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R16G16_UInt"/>. For UAVs, an additional valid chrominance data view format is <see cref="F:SharpDX.DXGI.Format.R32_UInt"/>. By using <see cref="F:SharpDX.DXGI.Format.R32_UInt"/> for UAVs, you can both read and write as opposed to just write for <see cref="F:SharpDX.DXGI.Format.R16G16_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R16G16_UInt"/>. Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping to the view channel is Y-&gt;R16. For chrominance data view, the mapping to the view channel is U-&gt;R16 and	
            V-&gt;G16.</para>	
             Direct3D 11:??This value is not supported until Windows Developer Preview.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_P010']/*"/>	
            <unmanaged>DXGI_FORMAT_P010</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.P016">
            <summary>	
            <para>16-bit per channel planar YUV 4:2:0 video resource format. Valid luminance data view formats for this video resource format are <see cref="F:SharpDX.DXGI.Format.R16_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R16_UInt"/>. Valid chrominance data view formats (width and height are each 1/2 of luminance view) for this video resource format are <see cref="F:SharpDX.DXGI.Format.R16G16_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R16G16_UInt"/>. For UAVs, an additional valid chrominance data view format is <see cref="F:SharpDX.DXGI.Format.R32_UInt"/>. By using <see cref="F:SharpDX.DXGI.Format.R32_UInt"/> for UAVs, you can both read and write as opposed to just write for <see cref="F:SharpDX.DXGI.Format.R16G16_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R16G16_UInt"/>. Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping to the view channel is Y-&gt;R16. For chrominance data view, the mapping to the view channel is U-&gt;R16 and	
            V-&gt;G16.</para>	
             Direct3D 11:??This value is not supported until Windows Developer Preview.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_P016']/*"/>	
            <unmanaged>DXGI_FORMAT_P016</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.Opaque420">
            <summary>	
            <para>8-bit per channel planar YUV 4:2:0 video resource format. This format is subsampled where each pixel has its own Y value, but each 2x2 pixel block shares a single U and V value. The runtime requires that the width and height of all resources that are created with this format are multiples of 2. The runtime also requires that the left, right, top, and bottom members of any <see cref="T:SharpDX.Rectangle"/> that are used for this format are multiples of 2. This format differs from <see cref="F:SharpDX.DXGI.Format.Nv12"/> in that the layout of the data within the resource is completely opaque to applications. Applications cannot use the CPU to map the resource and then access the data within the resource. You cannot use shaders with this format. Because of this behavior, legacy hardware that supports a non-NV12 4:2:0 layout (for example, YV12, and so on) can be used. Also, new hardware that has a 4:2:0 implementation better than NV12 can be used when the application does not need the data to be in a standard layout. </para>	
             Direct3D 11:??This value is not supported until Windows Developer Preview.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_420_OPAQUE']/*"/>	
            <unmanaged>DXGI_FORMAT_420_OPAQUE</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.Yuy2">
            <summary>	
            <para>Most common YUV 4:2:2 video resource format. Valid view formats for this video resource format are <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UInt"/>. For UAVs, an additional valid view format is <see cref="F:SharpDX.DXGI.Format.R32_UInt"/>. By using <see cref="F:SharpDX.DXGI.Format.R32_UInt"/> for UAVs, you can both read and write as opposed to just write for <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UInt"/>. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is Y0-&gt;R8, 	
            U0-&gt;G8, 	
            Y1-&gt;B8, 	
            and V0-&gt;A8.</para>	
             <para>A unique valid view format for this video resource format is <see cref="F:SharpDX.DXGI.Format.R8G8_B8G8_UNorm"/>. With this view format, the width of the view appears to be twice what the <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/> or <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UInt"/> view would be when hardware reconstructs RGBA automatically on read and before filtering.  This Direct3D hardware behavior is legacy and is likely not useful any more. With this view format, the mapping to the view channel is Y0-&gt;R8, 	
            U0-&gt;	
            G8[0], 	
            Y1-&gt;B8, 	
            and V0-&gt;	
            G8[1].</para>	
             Direct3D 11:??This value is not supported until Windows Developer Preview.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_YUY2']/*"/>	
            <unmanaged>DXGI_FORMAT_YUY2</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.Y210">
            <summary>	
            <para>10-bit per channel packed YUV 4:2:2 video resource format. Valid view formats for this video resource format are <see cref="F:SharpDX.DXGI.Format.R16G16B16A16_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R16G16B16A16_UInt"/>. The runtime does not enforce whether the lowest 6 bits are 0 (given that this video resource format is a 10-bit format that uses 16 bits). If required, application shader code would have to enforce this manually.  From the runtime's point of view, <see cref="F:SharpDX.DXGI.Format.Y210"/> is no different than <see cref="F:SharpDX.DXGI.Format.Y216"/>. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is Y0-&gt;R16,	
            U-&gt;G16,	
            Y1-&gt;B16,	
            and V-&gt;A16.</para>	
             Direct3D 11:??This value is not supported until Windows Developer Preview.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_Y210']/*"/>	
            <unmanaged>DXGI_FORMAT_Y210</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.Y216">
            <summary>	
            <para>16-bit per channel packed YUV 4:2:2 video resource format. Valid view formats for this video resource format are <see cref="F:SharpDX.DXGI.Format.R16G16B16A16_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R16G16B16A16_UInt"/>. Supported view types are SRV and UAV. One view provides a straightforward mapping of the entire surface. The mapping to the view channel is Y0-&gt;R16,	
            U-&gt;G16,	
            Y1-&gt;B16,	
            and V-&gt;A16.</para>	
             Direct3D 11:??This value is not supported until Windows Developer Preview.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_Y216']/*"/>	
            <unmanaged>DXGI_FORMAT_Y216</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.Nv11">
            <summary>	
            <para>Most common planar YUV 4:1:1 video resource format. Valid luminance data view formats for this video resource format are <see cref="F:SharpDX.DXGI.Format.R8_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R8_UInt"/>. Valid chrominance data view formats (width and height are each 1/4 of luminance view) for this video resource format are <see cref="F:SharpDX.DXGI.Format.R8G8_UNorm"/> and <see cref="F:SharpDX.DXGI.Format.R8G8_UInt"/>. Supported view types are SRV, RTV, and UAV. For luminance data view, the mapping to the view channel is Y-&gt;R8. For chrominance data view, the mapping to the view channel is U-&gt;R8 and	
            V-&gt;G8.</para>	
             Direct3D 11:??This value is not supported until Windows Developer Preview.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_NV11']/*"/>	
            <unmanaged>DXGI_FORMAT_NV11</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.Ai44">
            <summary>	
            <para>4-bit palletized YUV format that is commonly used for DVD subpicture.</para>	
             Direct3D 11:??This value is not supported until Windows Developer Preview.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_AI44']/*"/>	
            <unmanaged>DXGI_FORMAT_AI44</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.Ia44">
            <summary>	
            <para>4-bit palletized YUV format that is commonly used for DVD subpicture.</para>	
             Direct3D 11:??This value is not supported until Windows Developer Preview.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_IA44']/*"/>	
            <unmanaged>DXGI_FORMAT_IA44</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.P8">
            <summary>	
            <para>8-bit palletized format that is used for palletized RGB data when the processor processes ISDB-T data and for palletized YUV data when the processor processes BluRay data.</para>	
             Direct3D 11:??This value is not supported until Windows Developer Preview.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_P8']/*"/>	
            <unmanaged>DXGI_FORMAT_P8</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.A8P8">
            <summary>	
            <para>8-bit palletized format with 8 bits of alpha that is used for palletized YUV data when the processor processes BluRay data.</para>	
             Direct3D 11:??This value is not supported until Windows Developer Preview.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_A8P8']/*"/>	
            <unmanaged>DXGI_FORMAT_A8P8</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B4G4R4A4_UNorm">
            <summary>	
            <para>A four-component, 16-bit unsigned-normalized integer format that supports 4 bits for each channel including alpha.</para>	
             Direct3D 11:??This value is not supported until Windows Developer Preview.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B4G4R4A4_UNORM']/*"/>	
            <unmanaged>DXGI_FORMAT_B4G4R4A4_UNORM</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.GraphicsPreemptionGranularity">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            You call the <see cref="M:SharpDX.DXGI.Adapter2.GetDesc2(SharpDX.DXGI.AdapterDesc2@)"/> method to retrieve the granularity level at which the GPU can be preempted from performing its current graphics rendering task. The operating system specifies the graphics granularity level in the  GraphicsPreemptionGranularity member of the <see cref="T:SharpDX.DXGI.AdapterDesc2"/> structure.The following figure shows granularity of graphics rendering tasks.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GRAPHICS_PREEMPTION_GRANULARITY']/*"/>	
            <unmanaged>DXGI_GRAPHICS_PREEMPTION_GRANULARITY</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.GraphicsPreemptionGranularity.DmaBufferBoundary">
            <summary>	
            <para>Indicates the preemption granularity as a DMA buffer.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GRAPHICS_PREEMPTION_DMA_BUFFER_BOUNDARY']/*"/>	
            <unmanaged>DXGI_GRAPHICS_PREEMPTION_DMA_BUFFER_BOUNDARY</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.GraphicsPreemptionGranularity.PrimitiveBoundary">
            <summary>	
            <para>Indicates the preemption granularity as a graphics primitive. A primitive is a section in a DMA buffer and can be a group of triangles.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GRAPHICS_PREEMPTION_PRIMITIVE_BOUNDARY']/*"/>	
            <unmanaged>DXGI_GRAPHICS_PREEMPTION_PRIMITIVE_BOUNDARY</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.GraphicsPreemptionGranularity.TriangleBoundary">
            <summary>	
            <para>Indicates the preemption granularity as a triangle. A triangle is a part of a primitive.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GRAPHICS_PREEMPTION_TRIANGLE_BOUNDARY']/*"/>	
            <unmanaged>DXGI_GRAPHICS_PREEMPTION_TRIANGLE_BOUNDARY</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.GraphicsPreemptionGranularity.PixelBoundary">
            <summary>	
            <para>Indicates the preemption granularity as a pixel. A pixel is a part of a triangle.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GRAPHICS_PREEMPTION_PIXEL_BOUNDARY']/*"/>	
            <unmanaged>DXGI_GRAPHICS_PREEMPTION_PIXEL_BOUNDARY</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.GraphicsPreemptionGranularity.InstructionBoundary">
            <summary>	
            <para>Indicates the preemption granularity as a graphics instruction. A graphics instruction operates on a pixel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GRAPHICS_PREEMPTION_INSTRUCTION_BOUNDARY']/*"/>	
            <unmanaged>DXGI_GRAPHICS_PREEMPTION_INSTRUCTION_BOUNDARY</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.MapFlags">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MAP_FLAGS']/*"/>	
            <unmanaged>DXGI_MAP_FLAGS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.MapFlags.Read">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MAP_READ']/*"/>	
            <unmanaged>DXGI_MAP_READ</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.MapFlags.Write">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MAP_WRITE']/*"/>	
            <unmanaged>DXGI_MAP_WRITE</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.MapFlags.Discard">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MAP_DISCARD']/*"/>	
            <unmanaged>DXGI_MAP_DISCARD</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.OfferResourcePriority">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            Priority determines how likely the operating system is to discard an offered resource.  Resources offered with lower priority are discarded first.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OFFER_RESOURCE_PRIORITY']/*"/>	
            <unmanaged>DXGI_OFFER_RESOURCE_PRIORITY</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OfferResourcePriority.Low">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OFFER_RESOURCE_PRIORITY_LOW']/*"/>	
            <unmanaged>DXGI_OFFER_RESOURCE_PRIORITY_LOW</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OfferResourcePriority.Normal">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OFFER_RESOURCE_PRIORITY_NORMAL']/*"/>	
            <unmanaged>DXGI_OFFER_RESOURCE_PRIORITY_NORMAL</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OfferResourcePriority.High">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OFFER_RESOURCE_PRIORITY_HIGH']/*"/>	
            <unmanaged>DXGI_OFFER_RESOURCE_PRIORITY_HIGH</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.OutduplPointerShapeType">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_TYPE']/*"/>	
            <unmanaged>DXGI_OUTDUPL_POINTER_SHAPE_TYPE</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutduplPointerShapeType.Monochrome">
            <summary>	
            <para>The reference type is a monochrome mouse reference, which is  a monochrome bitmap. The bitmap's size is specified by width and height in a 1 bits per pixel (bpp) device independent bitmap (DIB) format AND mask that is followed by another 1 bpp DIB format XOR mask of the same size.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MONOCHROME']/*"/>	
            <unmanaged>DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MONOCHROME</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutduplPointerShapeType.Color">
            <summary>	
            <para>The reference type is a color mouse reference, which is  a color bitmap. The bitmap's size is specified by width and height in a 32 bpp ARGB DIB format.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_TYPE_COLOR']/*"/>	
            <unmanaged>DXGI_OUTDUPL_POINTER_SHAPE_TYPE_COLOR</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutduplPointerShapeType.MaskedColor">
            <summary>	
            <para>The reference type is a masked color mouse reference.  A masked color mouse reference is a 32 bpp ARGB format bitmap with the mask value in the alpha bits. The only allowed mask values are 0 and 0xFF. When the mask value is 0, the RGB value should replace the screen pixel. When the mask value is 0xFF, an XOR operation is performed on the RGB value and the screen pixel; the result replaces the screen pixel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MASKED_COLOR']/*"/>	
            <unmanaged>DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MASKED_COLOR</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.PresentFlags">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_FLAGS']/*"/>	
            <unmanaged>DXGI_PRESENT_FLAGS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.PresentFlags.Test">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_TEST']/*"/>	
            <unmanaged>DXGI_PRESENT_TEST</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.PresentFlags.DoNotSequence">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_DO_NOT_SEQUENCE']/*"/>	
            <unmanaged>DXGI_PRESENT_DO_NOT_SEQUENCE</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.PresentFlags.Restart">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_RESTART']/*"/>	
            <unmanaged>DXGI_PRESENT_RESTART</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.PresentFlags.DoNotWait">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_DO_NOT_WAIT']/*"/>	
            <unmanaged>DXGI_PRESENT_DO_NOT_WAIT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.PresentFlags.StereoPreferRight">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_STEREO_PREFER_RIGHT']/*"/>	
            <unmanaged>DXGI_PRESENT_STEREO_PREFER_RIGHT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.PresentFlags.StereoTemporaryMono">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_STEREO_TEMPORARY_MONO']/*"/>	
            <unmanaged>DXGI_PRESENT_STEREO_TEMPORARY_MONO</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.PresentFlags.RestrictToOutput">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_RESTRICT_TO_OUTPUT']/*"/>	
            <unmanaged>DXGI_PRESENT_RESTRICT_TO_OUTPUT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.PresentFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.Residency">
            <summary>	
            Flags indicating the memory location of a resource.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESIDENCY']/*"/>	
            <unmanaged>DXGI_RESIDENCY</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Residency.FullyResident">
            <summary>	
            <para>The resource is located in video memory.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESIDENCY_FULLY_RESIDENT']/*"/>	
            <unmanaged>DXGI_RESIDENCY_FULLY_RESIDENT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Residency.ResidentInSharedMemory">
            <summary>	
            <para>At least some of the resource is located in CPU memory.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY']/*"/>	
            <unmanaged>DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Residency.EvictedToDisk">
            <summary>	
            <para>At least some of the resource has been paged out to the hard drive.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESIDENCY_EVICTED_TO_DISK']/*"/>	
            <unmanaged>DXGI_RESIDENCY_EVICTED_TO_DISK</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.ResourcePriority">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY']/*"/>	
            <unmanaged>DXGI_RESOURCE_PRIORITY</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ResourcePriority.Minimum">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY_MINIMUM']/*"/>	
            <unmanaged>DXGI_RESOURCE_PRIORITY_MINIMUM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ResourcePriority.Low">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY_LOW']/*"/>	
            <unmanaged>DXGI_RESOURCE_PRIORITY_LOW</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ResourcePriority.Normal">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY_NORMAL']/*"/>	
            <unmanaged>DXGI_RESOURCE_PRIORITY_NORMAL</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ResourcePriority.High">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY_HIGH']/*"/>	
            <unmanaged>DXGI_RESOURCE_PRIORITY_HIGH</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ResourcePriority.Maximum">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY_MAXIMUM']/*"/>	
            <unmanaged>DXGI_RESOURCE_PRIORITY_MAXIMUM</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.Scaling">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            The <see cref="F:SharpDX.DXGI.Scaling.None"/> value is supported only for flip presentation model swap chains that you create with the <see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/> value. You pass these values in a call to <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullscreenDescription},SharpDX.DXGI.Output)"/>, <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForImmersiveWindow(SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/>, or  <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCompositionSurface(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SCALING']/*"/>	
            <unmanaged>DXGI_SCALING</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Scaling.Stretch">
            <summary>	
            <para>Directs DXGI to make the back-buffer contents scale to fit the presentation target size. This is the implicit behavior of DXGI when you call the <see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/> method.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SCALING_STRETCH']/*"/>	
            <unmanaged>DXGI_SCALING_STRETCH</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Scaling.None">
            <summary>	
            <para>Directs DXGI to make the back-buffer contents appear without any scaling when the presentation target size is not equal to the back-buffer size. The top edges of the back buffer and presentation target are aligned together. If the WS_EX_LAYOUTRTL style is associated with the <see cref="T:System.IntPtr"/> handle to the target output window, the right edges of the back buffer and presentation target are aligned together; otherwise, the left edges are aligned together. All target area outside the back buffer is filled with window background color.</para>	
             <para>This value effects all target areas outside the back buffer of a swap chain that you fill with the background color by using <see cref="M:SharpDX.DXGI.SwapChain1.SetBackgroundColor(SharpDX.Color4)"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SCALING_NONE']/*"/>	
            <unmanaged>DXGI_SCALING_NONE</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.SwapChainFlags">
            <summary>	
            Options for swap-chain behavior.	
            </summary>	
            <remarks>	
            This enumeration is used by the <see cref="T:SharpDX.DXGI.SwapChainDescription"/> structure and the <see cref="M:SharpDX.DXGI.SwapChain.ResizeTarget(SharpDX.DXGI.ModeDescription@)"/> method.This enumeration is also used by the  <see cref="T:SharpDX.DXGI.SwapChainDescription1"/> structure.Swap chains that you create in full-screen mode with the <see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/> method behave as if <see cref="F:SharpDX.DXGI.SwapChainFlags.DisplayOnly"/> is set even though the flag is not set. That is, presented content is not accessible by remote access or through the desktop duplication APIs.Swap chains that you create with the <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullscreenDescription},SharpDX.DXGI.Output)"/>, <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForImmersiveWindow(SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/>, and  <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCompositionSurface(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/> methods are not protected if <see cref="F:SharpDX.DXGI.SwapChainFlags.DisplayOnly"/> is not set and are protected if <see cref="F:SharpDX.DXGI.SwapChainFlags.DisplayOnly"/> is set. When swap chains are protected, screen scraping is prevented and, in full-screen mode, presented content is not accessible through the desktop duplication APIs.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG']/*"/>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.Nonprerotated">
            <summary>	
            <para>Set this flag to turn off automatic image rotation; that is, do not perform a rotation when transferring the contents of the front buffer to the monitor.  Use this flag to avoid a bandwidth penalty when an application expects to handle rotation. This option is valid only during full-screen mode. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_NONPREROTATED']/*"/>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_NONPREROTATED</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.AllowModeSwitch">
            <summary>	
            <para>Set this flag to enable an application to switch modes by calling <see cref="M:SharpDX.DXGI.SwapChain.ResizeTarget(SharpDX.DXGI.ModeDescription@)"/>.  When switching from windowed to full-screen mode, the display mode (or monitor resolution) will be changed to match the dimensions of the application window.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH']/*"/>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.GdiCompatible">
            <summary>	
            <para>Set this flag to enable an application to render using GDI on a swap chain or a surface.  This will allow the application to call <see cref="M:SharpDX.DXGI.Surface1.GetDC(System.Boolean)"/> on the 0th back buffer or a surface.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE']/*"/>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.RestrictedContent">
            <summary>	
            <para>Set this flag to indicate that the swap chain might contain protected content; therefore, the operating system supports the creation of the swap chain only when driver and hardware protection is used.  If the driver and hardware do not support content protection, the call to create a resource for the swap chain fails.</para>	
             Direct3D 11:??This enumeration value is supported starting with Windows Developer Preview.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT']/*"/>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.RestrictSharedResourceDriver">
            <summary>	
            <para>Set this flag to indicate that shared resources that are created within the swap chain must be protected by using the driver?s mechanism for restricting access to shared surfaces.</para>	
             Direct3D 11:??This enumeration value is supported starting with Windows Developer Preview.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER']/*"/>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.DisplayOnly">
            <summary>	
            <para>Set this flag to restrict presented content to the local displays. Therefore, the presented content is not accessible via remote accessing or through the desktop duplication APIs.  </para>	
             <para>This flag supports the window content protection features of Windows. Applications can use this flag to protect their own onscreen window content from being captured or copied through a specific set of public operating system features and APIs.</para>	
             <para>If you use this flag with windowed (<see cref="T:System.IntPtr"/> or IWindow) swap chains where another process created the <see cref="T:System.IntPtr"/>, the owner of the <see cref="T:System.IntPtr"/> must use the  SetWindowDisplayAffinity function appropriately in order to allow calls to <see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/> or <see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,System.Int32,SharpDX.DXGI.PresentParameters)"/> to succeed.	
            </para>	
             Direct3D 11:??This enumeration value is supported starting with Windows Developer Preview.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY']/*"/>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.SwapEffect">
            <summary>	
            Options for handling pixels in a display surface after calling <see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/>.	
            </summary>	
            <remarks>	
            This enumeration is used by the <see cref="T:SharpDX.DXGI.SwapChainDescription"/> structure.This enumeration is also used by the  <see cref="T:SharpDX.DXGI.SwapChainDescription1"/> structure.The primary difference between presentation models is how back-buffer contents get to the Desktop Window Manager (DWM) for composition. In the bitblt model, which is used with the <see cref="F:SharpDX.DXGI.SwapEffect.Discard"/> and <see cref="F:SharpDX.DXGI.SwapEffect.Sequential"/> values, contents of the back buffer get copied into the redirection surface on each call to <see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/>. In the flip model, which is used with the <see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/> value, all back buffers are shared with the DWM. Therefore, the DWM can compose straight from those back buffers without any additional copy operations.	
            In general, the flip model is the more efficient model. The flip model also provides more features, such as enhanced present statistics.Regardless of whether the flip model is more efficient, an application still might choose the bitblt model for the following reasons:<para>The bitblt model is the only way to mix GDI and DirectX presentation.</para>	
             <para>In the flip model, the application must create the swap chain with <see cref="F:SharpDX.DXGI.SwapChainFlags.GdiCompatible"/>, and then must use GetDC on the back buffer explicitly. After the first successful call to <see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/> on a flip-model swap chain, GDI no longer works with the <see cref="T:System.IntPtr"/> that is associated with that swap chain, even after the destruction of the swap chain. This restriction even extends to methods like ScrollWindowEx.</para>	
              The flip model requires at least three window-sized buffers if the application uses child windows. For the bitblt model, this minimum is two buffers.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_EFFECT']/*"/>	
            <unmanaged>DXGI_SWAP_EFFECT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapEffect.Discard">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_EFFECT_DISCARD']/*"/>	
            <unmanaged>DXGI_SWAP_EFFECT_DISCARD</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapEffect.Sequential">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_EFFECT_SEQUENTIAL']/*"/>	
            <unmanaged>DXGI_SWAP_EFFECT_SEQUENTIAL</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapEffect.FlipSequential">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL']/*"/>	
            <unmanaged>DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.Usage">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_ENUM']/*"/>	
            <unmanaged>DXGI_USAGE_ENUM</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Usage.ShaderInput">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_SHADER_INPUT']/*"/>	
            <unmanaged>DXGI_USAGE_SHADER_INPUT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Usage.RenderTargetOutput">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_RENDER_TARGET_OUTPUT']/*"/>	
            <unmanaged>DXGI_USAGE_RENDER_TARGET_OUTPUT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Usage.BackBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_BACK_BUFFER']/*"/>	
            <unmanaged>DXGI_USAGE_BACK_BUFFER</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Usage.Shared">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_SHARED']/*"/>	
            <unmanaged>DXGI_USAGE_SHARED</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Usage.ReadOnly">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_READ_ONLY']/*"/>	
            <unmanaged>DXGI_USAGE_READ_ONLY</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Usage.DiscardOnPresent">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_DISCARD_ON_PRESENT']/*"/>	
            <unmanaged>DXGI_USAGE_DISCARD_ON_PRESENT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Usage.UnorderedAccess">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_UNORDERED_ACCESS']/*"/>	
            <unmanaged>DXGI_USAGE_UNORDERED_ACCESS</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.WindowAssociationFlags">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MWA_FLAGS']/*"/>	
            <unmanaged>DXGI_MWA_FLAGS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAll">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MWA_NO_WINDOW_CHANGES']/*"/>	
            <unmanaged>DXGI_MWA_NO_WINDOW_CHANGES</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAltEnter">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MWA_NO_ALT_ENTER']/*"/>	
            <unmanaged>DXGI_MWA_NO_ALT_ENTER</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.WindowAssociationFlags.IgnorePrintScreen">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MWA_NO_PRINT_SCREEN']/*"/>	
            <unmanaged>DXGI_MWA_NO_PRINT_SCREEN</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.WindowAssociationFlags.Valid">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MWA_VALID']/*"/>	
            <unmanaged>DXGI_MWA_VALID</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.WindowAssociationFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.DXGI">
            <summary>	
            Functions	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='SharpDX.DXGI.DXGI']/*"/>	
        </member>
        <member name="M:SharpDX.DXGI.DXGI.CreateDXGIFactory1(System.Guid,System.IntPtr@)">
            <summary>	
            Creates a DXGI 1.1 factory that generates objects used to enumerate and specify video graphics settings.	
            </summary>	
            <param name="riid"><para>The globally unique identifier (<see cref="T:System.Guid"/>) of the <see cref="T:SharpDX.DXGI.Factory1"/> object referenced by  the ppFactory parameter.</para></param>	
            <param name="factoryOut"><para>Address of a reference to an <see cref="T:SharpDX.DXGI.Factory1"/> object.</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR.</returns>	
            <remarks>	
            Use a DXGI 1.1 factory to generate objects that enumerate adapters,  create swap chains, and associate a window with  the alt+enter key sequence for toggling to and from the full-screen display mode.If the CreateDXGIFactory1 function succeeds, the reference count on the <see cref="T:SharpDX.DXGI.Factory1"/> interface is incremented. To avoid a memory leak, when you finish using the interface, call the IDXGIFactory1::Release method to release the interface.This entry point is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).Note??Do not mix the use of DXGI 1.0 (<see cref="T:SharpDX.DXGI.Factory"/>) and DXGI 1.1 (<see cref="T:SharpDX.DXGI.Factory1"/>) in an application. Use <see cref="T:SharpDX.DXGI.Factory"/> or <see cref="T:SharpDX.DXGI.Factory1"/>, but not both in an application.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='CreateDXGIFactory1']/*"/>	
            <unmanaged>HRESULT CreateDXGIFactory1([In] const GUID&amp; riid,[Out] void** ppFactory)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.DXGI.CreateDXGIFactory(System.Guid,System.IntPtr@)">
            <summary>	
            Creates a DXGI 1.0 factory that generates objects used to enumerate and specify video graphics settings.	
            </summary>	
            <param name="riid"><para>The globally unique identifier (<see cref="T:System.Guid"/>) of the <see cref="T:SharpDX.DXGI.Factory"/> object referenced by the ppFactory parameter.</para></param>	
            <param name="factoryOut"><para>Address of a reference to an <see cref="T:SharpDX.DXGI.Factory"/> object.</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the following DXGI_ERROR.</returns>	
            <remarks>	
            Use a DXGI factory to generate objects that enumerate adapters, create swap chains, and associate a window with the alt+enter key sequence for toggling to and from the fullscreen display mode.If the CreateDXGIFactory function succeeds, the reference count on the <see cref="T:SharpDX.DXGI.Factory"/> interface is incremented. To avoid a memory leak, when you finish using the interface, call the IDXGIFactory::Release method to release the interface.Note??Do not mix the use of DXGI 1.0 (<see cref="T:SharpDX.DXGI.Factory"/>) and DXGI 1.1 (<see cref="T:SharpDX.DXGI.Factory1"/>) in an application. Use <see cref="T:SharpDX.DXGI.Factory"/> or <see cref="T:SharpDX.DXGI.Factory1"/>, but not both in an application.The CreateDXGIFactory function does not exist for Metro style apps. Instead, Metro style apps use the  CreateDXGIFactory1 function.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='CreateDXGIFactory']/*"/>	
            <unmanaged>HRESULT CreateDXGIFactory([In] const GUID&amp; riid,[Out] void** ppFactory)</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.DXGIError">
            <summary>	
            Functions	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='SharpDX.DXGI.DXGIError']/*"/>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.Unsupported">
            <summary>Constant Unsupported.</summary>
            <unmanaged>DXGI_ERROR_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.AccessLost">
            <summary>Constant AccessLost.</summary>
            <unmanaged>DXGI_ERROR_ACCESS_LOST</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.RemoteClientDisconnected">
            <summary>Constant RemoteClientDisconnected.</summary>
            <unmanaged>DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.DeviceRemoved">
            <summary>Constant DeviceRemoved.</summary>
            <unmanaged>DXGI_ERROR_DEVICE_REMOVED</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.Nonexclusive">
            <summary>Constant Nonexclusive.</summary>
            <unmanaged>DXGI_ERROR_NONEXCLUSIVE</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.FrameStatisticsDisjoint">
            <summary>Constant FrameStatisticsDisjoint.</summary>
            <unmanaged>DXGI_ERROR_FRAME_STATISTICS_DISJOINT</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.DeviceHung">
            <summary>Constant DeviceHung.</summary>
            <unmanaged>DXGI_ERROR_DEVICE_HUNG</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.AccessDenied">
            <summary>Constant AccessDenied.</summary>
            <unmanaged>DXGI_ERROR_ACCESS_DENIED</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.RemoteOutofmemory">
            <summary>Constant RemoteOutofmemory.</summary>
            <unmanaged>DXGI_ERROR_REMOTE_OUTOFMEMORY</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.RestrictToOutputStale">
            <summary>Constant RestrictToOutputStale.</summary>
            <unmanaged>DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.NotFound">
            <summary>Constant NotFound.</summary>
            <unmanaged>DXGI_ERROR_NOT_FOUND</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.DeviceReset">
            <summary>Constant DeviceReset.</summary>
            <unmanaged>DXGI_ERROR_DEVICE_RESET</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.MoreData">
            <summary>Constant MoreData.</summary>
            <unmanaged>DXGI_ERROR_MORE_DATA</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.SessionDisconnected">
            <summary>Constant SessionDisconnected.</summary>
            <unmanaged>DXGI_ERROR_SESSION_DISCONNECTED</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.CannotProtectContent">
            <summary>Constant CannotProtectContent.</summary>
            <unmanaged>DXGI_ERROR_CANNOT_PROTECT_CONTENT</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.DriverInternalError">
            <summary>Constant DriverInternalError.</summary>
            <unmanaged>DXGI_ERROR_DRIVER_INTERNAL_ERROR</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.InvalidCall">
            <summary>Constant InvalidCall.</summary>
            <unmanaged>DXGI_ERROR_INVALID_CALL</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.GraphicsVidpnSourceInUse">
            <summary>Constant GraphicsVidpnSourceInUse.</summary>
            <unmanaged>DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.WasStillDrawing">
            <summary>Constant WasStillDrawing.</summary>
            <unmanaged>DXGI_ERROR_WAS_STILL_DRAWING</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.WaitTimeout">
            <summary>Constant WaitTimeout.</summary>
            <unmanaged>DXGI_ERROR_WAIT_TIMEOUT</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.NotCurrentlyAvailable">
            <summary>Constant NotCurrentlyAvailable.</summary>
            <unmanaged>DXGI_ERROR_NOT_CURRENTLY_AVAILABLE</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.DXGIError.ModeChangeInProgress">
            <summary>Constant ModeChangeInProgress.</summary>
            <unmanaged>DXGI_ERROR_MODE_CHANGE_IN_PROGRESS</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.Adapter1">
            <summary>	
            The <see cref="T:SharpDX.DXGI.Adapter1"/> interface represents a display sub-system (including one or more GPU's, DACs and video memory).	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter1']/*"/>	
            <unmanaged>IDXGIAdapter1</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Adapter1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter1.GetDescription1(SharpDX.DXGI.AdapterDescription1@)">
            <summary>	
            Gets a DXGI 1.1 description of an adapter (or video card).	
            </summary>	
            <param name="descRef"><para>A reference to a <see cref="T:SharpDX.DXGI.AdapterDescription1"/> structure that describes the adapter.   This parameter must not be <c>null</c>.</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns E_INVALIDARG if the pDesc parameter is <c>null</c>.</returns>	
            <remarks>	
            This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).Use the GetDesc1 method to get a DXGI 1.1 description of an adapter.  To get a DXGI 1.0 description, use the <see cref="T:SharpDX.DXGI.Adapter"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter1::GetDesc1']/*"/>	
            <unmanaged>HRESULT IDXGIAdapter1::GetDesc1([Out] DXGI_ADAPTER_DESC1* pDesc)</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.Adapter1.Description1">
            <summary>	
            Gets a DXGI 1.1 description of an adapter (or video card).	
            </summary>	
            <remarks>	
            This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).Use the GetDesc1 method to get a DXGI 1.1 description of an adapter.  To get a DXGI 1.0 description, use the <see cref="T:SharpDX.DXGI.Adapter"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter1::GetDesc1']/*"/>	
            <unmanaged>GetDesc1</unmanaged>	
            <unmanaged>HRESULT IDXGIAdapter1::GetDesc1([Out] DXGI_ADAPTER_DESC1* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.Adapter2">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter2']/*"/>	
            <unmanaged>IDXGIAdapter2</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Adapter2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter2.GetDesc2(SharpDX.DXGI.AdapterDesc2@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="descRef"><para>A reference to a <see cref="T:SharpDX.DXGI.AdapterDesc2"/> structure that describes the adapter.   This parameter must not be <c>null</c>.</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns E_INVALIDARG if the pDesc parameter is <c>null</c>.</returns>	
            <remarks>	
            Use the GetDesc2 method to get a DXGI 1.2 description of an adapter.  To get a DXGI 1.1 description, use the <see cref="M:SharpDX.DXGI.Adapter1.GetDescription1(SharpDX.DXGI.AdapterDescription1@)"/> method. To get a DXGI 1.0 description, use the <see cref="M:SharpDX.DXGI.Adapter.GetDescription(SharpDX.DXGI.AdapterDescription@)"/> method.The Windows Display Driver Model (WDDM) scheduler can preempt the GPU's execution of application tasks. The granularity at which the GPU can be preempted from performing its current task in the WDDM 1.1 or earlier driver model is a direct memory access (DMA) buffer for graphics tasks or a compute packet for compute tasks. The GPU can switch between tasks only after it completes the currently executing unit of work, a DMA buffer or a compute packet.A DMA buffer is the largest independent unit of graphics work that the WDDM scheduler can submit to the GPU. This buffer contains a set of GPU instructions that the WDDM driver and GPU use. A compute packet is the largest independent unit of compute work that the WDDM scheduler can submit to the GPU. A compute packet contains dispatches (for example, calls to the <see cref="!:SharpDX.Direct3D11.DeviceContext.Dispatch"/> method), which contain thread groups. The WDDM 1.2 or later driver model allows the GPU to be preempted at finer granularity levels than a DMA buffer or compute packet. You can use the GetDesc2 method to retrieve the granularity levels for graphics and compute tasks.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter2::GetDesc2']/*"/>	
            <unmanaged>HRESULT IDXGIAdapter2::GetDesc2([Out] DXGI_ADAPTER_DESC2* pDesc)</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.Adapter2.Desc2">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            Use the GetDesc2 method to get a DXGI 1.2 description of an adapter.  To get a DXGI 1.1 description, use the <see cref="M:SharpDX.DXGI.Adapter1.GetDescription1(SharpDX.DXGI.AdapterDescription1@)"/> method. To get a DXGI 1.0 description, use the <see cref="M:SharpDX.DXGI.Adapter.GetDescription(SharpDX.DXGI.AdapterDescription@)"/> method.The Windows Display Driver Model (WDDM) scheduler can preempt the GPU's execution of application tasks. The granularity at which the GPU can be preempted from performing its current task in the WDDM 1.1 or earlier driver model is a direct memory access (DMA) buffer for graphics tasks or a compute packet for compute tasks. The GPU can switch between tasks only after it completes the currently executing unit of work, a DMA buffer or a compute packet.A DMA buffer is the largest independent unit of graphics work that the WDDM scheduler can submit to the GPU. This buffer contains a set of GPU instructions that the WDDM driver and GPU use. A compute packet is the largest independent unit of compute work that the WDDM scheduler can submit to the GPU. A compute packet contains dispatches (for example, calls to the <see cref="!:SharpDX.Direct3D11.DeviceContext.Dispatch"/> method), which contain thread groups. The WDDM 1.2 or later driver model allows the GPU to be preempted at finer granularity levels than a DMA buffer or compute packet. You can use the GetDesc2 method to retrieve the granularity levels for graphics and compute tasks.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter2::GetDesc2']/*"/>	
            <unmanaged>GetDesc2</unmanaged>	
            <unmanaged>HRESULT IDXGIAdapter2::GetDesc2([Out] DXGI_ADAPTER_DESC2* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.Device1">
            <summary>	
            An <see cref="T:SharpDX.DXGI.Device1"/> interface implements a derived class for DXGI objects that produce image data.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice1']/*"/>	
            <unmanaged>IDXGIDevice1</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Device1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Device1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Device1.SetMaximumFrameLatency(System.Int32)">
            <summary>	
            Sets the number of frames that the system is allowed to queue for rendering.	
            </summary>	
            <param name="maxLatency"><para>The maximum number of back buffer frames that a driver can queue. The value defaults to 3, but  can range from 1 to 16. A value of 0 will reset latency to the default.  For multi-head devices, this value is specified per-head.</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, <see cref="F:SharpDX.DXGI.DXGIError.DeviceRemoved"/> if the device was removed.</returns>	
            <remarks>	
            This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).Frame latency is the number of frames that are allowed to be stored in a queue before submission for rendering.  Latency is often used to  control how the CPU chooses between responding to user input and frames that are in the render queue.  It is often beneficial for applications that  have no user input (for example, video playback) to queue more than 3 frames of data.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice1::SetMaximumFrameLatency']/*"/>	
            <unmanaged>HRESULT IDXGIDevice1::SetMaximumFrameLatency([In] unsigned int MaxLatency)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Device1.GetMaximumFrameLatency(System.Int32@)">
            <summary>	
            Gets the number of frames that the system is allowed to queue for rendering.	
            </summary>	
            <param name="maxLatencyRef"><para>This value is set to the number of frames that can be queued for render.   This value defaults to 3, but can range from 1 to 16.</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the following members of the D3DERR enumerated type:D3DERR_DEVICELOST D3DERR_DEVICEREMOVED D3DERR_DRIVERINTERNALERROR D3DERR_INVALIDCALL D3DERR_OUTOFVIDEOMEMORY</returns>	
            <remarks>	
            This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).Frame latency is the number of frames that are allowed to be stored in a queue before submission for rendering.  Latency is often  used to control how the CPU chooses between responding to user input and frames that are in the render queue.  It is often beneficial for applications  that have no user input (for example, video playback) to queue more than 3 frames of data.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice1::GetMaximumFrameLatency']/*"/>	
            <unmanaged>HRESULT IDXGIDevice1::GetMaximumFrameLatency([Out] unsigned int* pMaxLatency)</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.Device1.MaximumFrameLatency">
            <summary>	
            Gets the number of frames that the system is allowed to queue for rendering.	
            </summary>	
            <remarks>	
            This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).Frame latency is the number of frames that are allowed to be stored in a queue before submission for rendering.  Latency is often  used to control how the CPU chooses between responding to user input and frames that are in the render queue.  It is often beneficial for applications  that have no user input (for example, video playback) to queue more than 3 frames of data.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice1::GetMaximumFrameLatency']/*"/>	
            <unmanaged>GetMaximumFrameLatency</unmanaged>	
            <unmanaged>HRESULT IDXGIDevice1::GetMaximumFrameLatency([Out] unsigned int* pMaxLatency)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.Device2">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice2']/*"/>	
            <unmanaged>IDXGIDevice2</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Device2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Device2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Device2.OfferResources(System.Int32,SharpDX.DXGI.Resource[],SharpDX.DXGI.OfferResourcePriority)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="numResources"><para>The number of resources in the ppResources argument array.</para></param>	
            <param name="resourcesOut"><para>An array of references to <see cref="T:SharpDX.DXGI.Resource"/> interfaces for the resources to offer.</para></param>	
            <param name="priority"><para>A <see cref="T:SharpDX.DXGI.OfferResourcePriority"/>-typed value that indicates how valuable data is.</para></param>	
            <returns>OfferResources returns:<see cref="F:SharpDX.Result.Ok"/> if resources were successfully offered E_INVALIDARG if a resource in the array or the priority is invalid</returns>	
            <remarks>	
            The priority value that the  Priority parameter specifies describes how valuable the caller considers the content to be.  The operating system uses the priority value to discard resources in order of priority. The operating system discards a resource that is offered with low priority before it discards a resource that is  offered with a higher priority.If you call OfferResources to offer a resource while the resource is bound to the pipeline, the resource is unbound.  You cannot call OfferResources on a resource that is mapped.  After you offer a resource, the resource cannot be mapped or bound to the pipeline until you call the IDXGIDevice2::ReclaimResource method to reclaim the resource. You cannot call OfferResources to offer immutable resources.To offer shared resources, call OfferResources on only one of the sharing devices.  To ensure exclusive access to the resources, you must use an <see cref="T:SharpDX.DXGI.KeyedMutex"/> object and then call OfferResources only while you hold the mutex.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice2::OfferResources']/*"/>	
            <unmanaged>HRESULT IDXGIDevice2::OfferResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[In] DXGI_OFFER_RESOURCE_PRIORITY Priority)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Device2.OfferResources(System.Int32,SharpDX.ComArray{SharpDX.DXGI.Resource},SharpDX.DXGI.OfferResourcePriority)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="numResources"><para>The number of resources in the ppResources argument array.</para></param>	
            <param name="resourcesOut"><para>An array of references to <see cref="T:SharpDX.DXGI.Resource"/> interfaces for the resources to offer.</para></param>	
            <param name="priority"><para>A <see cref="T:SharpDX.DXGI.OfferResourcePriority"/>-typed value that indicates how valuable data is.</para></param>	
            <returns>OfferResources returns:<see cref="F:SharpDX.Result.Ok"/> if resources were successfully offered E_INVALIDARG if a resource in the array or the priority is invalid</returns>	
            <remarks>	
            The priority value that the  Priority parameter specifies describes how valuable the caller considers the content to be.  The operating system uses the priority value to discard resources in order of priority. The operating system discards a resource that is offered with low priority before it discards a resource that is  offered with a higher priority.If you call OfferResources to offer a resource while the resource is bound to the pipeline, the resource is unbound.  You cannot call OfferResources on a resource that is mapped.  After you offer a resource, the resource cannot be mapped or bound to the pipeline until you call the IDXGIDevice2::ReclaimResource method to reclaim the resource. You cannot call OfferResources to offer immutable resources.To offer shared resources, call OfferResources on only one of the sharing devices.  To ensure exclusive access to the resources, you must use an <see cref="T:SharpDX.DXGI.KeyedMutex"/> object and then call OfferResources only while you hold the mutex.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice2::OfferResources']/*"/>	
            <unmanaged>HRESULT IDXGIDevice2::OfferResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[In] DXGI_OFFER_RESOURCE_PRIORITY Priority)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Device2.ReclaimResources(System.Int32,SharpDX.DXGI.Resource[],System.Int32[])">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="numResources">No documentation.</param>	
            <param name="resourcesOut">No documentation.</param>	
            <param name="discardedRef">No documentation.</param>	
            <returns>ReclaimResources returns:<see cref="F:SharpDX.Result.Ok"/> if resources were successfully reclaimed E_INVALIDARG if the resources are invalid</returns>	
            <remarks>	
            After you call <see cref="M:SharpDX.DXGI.Device2.OfferResources(System.Int32,SharpDX.DXGI.Resource[],SharpDX.DXGI.OfferResourcePriority)"/> to offer one or more resources, you must call ReclaimResources before you can use those resources again.  You must check the values in the array at pDiscarded to determine whether each resource?s content was discarded. If a resource?s content was discarded while it was offered, its current content is undefined. Therefore, you must overwrite the resource?s content before you use the resource.To reclaim shared resources, call ReclaimResources only on one of the sharing devices.  To ensure exclusive access to the resources, you must use an <see cref="T:SharpDX.DXGI.KeyedMutex"/> object and then call ReclaimResources only while you hold the mutex.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice2::ReclaimResources']/*"/>	
            <unmanaged>HRESULT IDXGIDevice2::ReclaimResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[Out, Buffer, Optional] BOOL* pDiscarded)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Device2.ReclaimResources(System.Int32,SharpDX.ComArray{SharpDX.DXGI.Resource},System.Int32[])">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="numResources">No documentation.</param>	
            <param name="resourcesOut">No documentation.</param>	
            <param name="discardedRef">No documentation.</param>	
            <returns>ReclaimResources returns:<see cref="F:SharpDX.Result.Ok"/> if resources were successfully reclaimed E_INVALIDARG if the resources are invalid</returns>	
            <remarks>	
            After you call <see cref="M:SharpDX.DXGI.Device2.OfferResources(System.Int32,SharpDX.DXGI.Resource[],SharpDX.DXGI.OfferResourcePriority)"/> to offer one or more resources, you must call ReclaimResources before you can use those resources again.  You must check the values in the array at pDiscarded to determine whether each resource?s content was discarded. If a resource?s content was discarded while it was offered, its current content is undefined. Therefore, you must overwrite the resource?s content before you use the resource.To reclaim shared resources, call ReclaimResources only on one of the sharing devices.  To ensure exclusive access to the resources, you must use an <see cref="T:SharpDX.DXGI.KeyedMutex"/> object and then call ReclaimResources only while you hold the mutex.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice2::ReclaimResources']/*"/>	
            <unmanaged>HRESULT IDXGIDevice2::ReclaimResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[Out, Buffer, Optional] BOOL* pDiscarded)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Device2.EnqueueSetEvent(System.IntPtr)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="hEvent"><para>A handle to the event object. The CreateEvent or OpenEvent function returns this handle. All types of event objects (manual-reset, auto-reset, and so on) are supported.</para> <para>The handle must have the EVENT_MODIFY_STATE access right. For more information about access rights, see Synchronization Object Security and Access Rights.</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the following values:E_OUTOFMEMORY if insufficient memory is available to complete the operation. E_INVALIDARG if the parameter was validated and determined to be incorrect.</returns>	
            <remarks>	
            EnqueueSetEvent calls the SetEvent function on the event object after all previously submitted rendering commands complete or the device is removed.After an application calls EnqueueSetEvent, it  can immediately call the WaitForSingleObject function to put itself to sleep until rendering commands complete.You cannot use EnqueueSetEvent to determine work completion that is associated with presentation (<see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/>); instead, we recommend that you use <see cref="M:SharpDX.DXGI.SwapChain.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice2::EnqueueSetEvent']/*"/>	
            <unmanaged>HRESULT IDXGIDevice2::EnqueueSetEvent([In] void* hEvent)</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.DisplayControl">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDisplayControl']/*"/>	
            <unmanaged>IDXGIDisplayControl</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.DisplayControl.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.DisplayControl"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.DisplayControl.IsStereoEnabled_">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <returns>IsStereoEnabled returns TRUE when the operating system's stereoscopic 3D display behavior is enabled and <see cref="F:SharpDX.Result.False"/> whenthis behavior is disabled.</returns>	
            <remarks>	
            You pass a Boolean value to the  <see cref="M:SharpDX.DXGI.DisplayControl.SetStereoEnabled(System.Boolean)"/> method to either enable or disable the operating system's stereoscopic 3D display behavior. TRUE enables the operating system's stereoscopic 3D display behavior and <see cref="F:SharpDX.Result.False"/> disables it.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDisplayControl::IsStereoEnabled']/*"/>	
            <unmanaged>BOOL IDXGIDisplayControl::IsStereoEnabled()</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.DisplayControl.SetStereoEnabled(System.Boolean)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="enabled"><para>A Boolean value that either enables or disables the operating system's stereoscopic 3D display behavior. TRUE enables the operating system's stereoscopic 3D display behavior and <see cref="F:SharpDX.Result.False"/> disables it.</para></param>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDisplayControl::SetStereoEnabled']/*"/>	
            <unmanaged>void IDXGIDisplayControl::SetStereoEnabled([In] BOOL enabled)</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.DisplayControl.IsStereoEnabled">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            You pass a Boolean value to the  <see cref="M:SharpDX.DXGI.DisplayControl.SetStereoEnabled(System.Boolean)"/> method to either enable or disable the operating system's stereoscopic 3D display behavior. TRUE enables the operating system's stereoscopic 3D display behavior and <see cref="F:SharpDX.Result.False"/> disables it.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDisplayControl::IsStereoEnabled']/*"/>	
            <unmanaged>IsStereoEnabled</unmanaged>	
            <unmanaged>BOOL IDXGIDisplayControl::IsStereoEnabled()</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.DisplayControl.StereoEnabled">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDisplayControl::SetStereoEnabled']/*"/>	
            <unmanaged>SetStereoEnabled</unmanaged>	
            <unmanaged>void IDXGIDisplayControl::SetStereoEnabled([In] BOOL enabled)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.Factory2">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2']/*"/>	
            <unmanaged>IDXGIFactory2</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Factory2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.IsWindowedStereoEnabled_">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <returns>Indicates whether to use stereo mode. TRUE indicates that you can use stereo mode; otherwise, <see cref="F:SharpDX.Result.False"/>.</returns>	
            <remarks>	
            We recommend that windowed applications call IsWindowedStereoEnabled before they attempt to use stereo.  IsWindowedStereoEnabled returns TRUE if both of the following items are true:All adapters in the computer have drivers that are capable of stereo.  This only means that the driver is implemented to the Windows Display Driver Model (WDDM) for Windows Developer Preview (WDDM 1.2).  However, the adapter does not necessarily have to be able to scan out stereo. The current desktop mode (desktop modes are mono) and system policy and hardware are configured so that the Desktop Window Manager (DWM) performs stereo composition on at least one adapter output.The creation of a windowed stereo swap chain succeeds if the first requirement is met. However, if the adapter can't scan out stereo, the output on that adapter is reduced to mono.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::IsWindowedStereoEnabled']/*"/>	
            <unmanaged>BOOL IDXGIFactory2::IsWindowedStereoEnabled()</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullscreenDescription},SharpDX.DXGI.Output)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="hWnd">No documentation.</param>	
            <param name="descRef">No documentation.</param>	
            <param name="fullscreenDescRef">No documentation.</param>	
            <param name="restrictToOutputRef">No documentation.</param>	
            <returns>No documentation.</returns>	
            <remarks>	
            Note??Do not use this method in Metro style apps. Instead, use <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForImmersiveWindow(SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/>.If you specify the width, height, or both (Width and Height members of <see cref="T:SharpDX.DXGI.SwapChainDescription1"/> that pDesc points to) of the swap chain as zero, the runtime obtains the size from the output window that the hWnd parameter specifies. You can subsequently call the <see cref="M:SharpDX.DXGI.SwapChain1.GetDescription1(SharpDX.DXGI.SwapChainDescription1@)"/> method to retrieve the assigned width or height value.Because you can associate only one flip presentation model swap chain at a time with an <see cref="T:System.IntPtr"/>, the Microsoft Direct3D?11 policy of deferring the destruction of objects can cause problems if you attempt to destroy a flip presentation model swap chain and replace it with another swap chain. For more info about this situation, see Deferred Destruction Issues with Flip Presentation Swap Chains.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::CreateSwapChainForHwnd']/*"/>	
            <unmanaged>HRESULT IDXGIFactory2::CreateSwapChainForHwnd([In] IUnknown* pDevice,[In] HWND hWnd,[In] const DXGI_SWAP_CHAIN_DESC1* pDesc,[In, Optional] const DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pFullscreenDesc,[In, Optional] IDXGIOutput* pRestrictToOutput,[Out] IDXGISwapChain1** ppSwapChain)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.CreateSwapChainForImmersiveWindow(SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="deviceRef"><para>A reference to the Direct3D device for the swap chain. This parameter cannot be <c>null</c>.</para></param>	
            <param name="windowRef"><para>A reference to the IWindow object that is associated with the swap chain that CreateSwapChainForImmersiveWindow creates.</para></param>	
            <param name="descRef"><para>A reference to a  <see cref="T:SharpDX.DXGI.SwapChainDescription1"/> structure for the swap-chain description. This parameter cannot be <c>null</c>.</para></param>	
            <param name="restrictToOutputRef"><para>A reference to the <see cref="T:SharpDX.DXGI.Output"/> interface that the swap chain is restricted to. If the swap chain is moved to a different output, the content is black. You can optionally set this parameter to an output target that uses <see cref="F:SharpDX.DXGI.PresentFlags.RestrictToOutput"/> to restrict the content on this output. If you do not set this parameter to restrict content on an output target, you can set it to <c>null</c>. </para></param>	
            <returns><para>A reference to a variable that receives a reference to the <see cref="T:SharpDX.DXGI.SwapChain1"/> interface for the swap chain that CreateSwapChainForImmersiveWindow creates.</para></returns>	
            <remarks>	
            Note??Use this method in Metro style apps rather than <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullscreenDescription},SharpDX.DXGI.Output)"/>.If you specify the width, height, or both (Width and Height members of <see cref="T:SharpDX.DXGI.SwapChainDescription1"/> that pDesc points to) of the swap chain as zero, the runtime obtains the size from the output window that the pWindow parameter specifies. You can subsequently call the <see cref="M:SharpDX.DXGI.SwapChain1.GetDescription1(SharpDX.DXGI.SwapChainDescription1@)"/> method to retrieve the assigned width or height value.Because you can associate only one flip presentation model swap chain at a time with an IWindow, the Microsoft Direct3D?11 policy of deferring the destruction of objects can cause problems if you attempt to destroy a flip presentation model swap chain and replace it with another swap chain. For more info about this situation, see Deferred Destruction Issues with Flip Presentation Swap Chains.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::CreateSwapChainForImmersiveWindow']/*"/>	
            <unmanaged>HRESULT IDXGIFactory2::CreateSwapChainForImmersiveWindow([In] IUnknown* pDevice,[In] IUnknown* pWindow,[In] const DXGI_SWAP_CHAIN_DESC1* pDesc,[In, Optional] IDXGIOutput* pRestrictToOutput,[Out] IDXGISwapChain1** ppSwapChain)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.CreateSwapChainForCompositionSurface(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="hSurface">No documentation.</param>	
            <param name="descRef">No documentation.</param>	
            <param name="restrictToOutputRef">No documentation.</param>	
            <returns>No documentation.</returns>	
            <remarks>	
            Because you can associate only one flip presentation model swap chain at a time with a composition surface, the Microsoft Direct3D?11 policy of deferring the destruction of objects can cause problems if you attempt to destroy a flip presentation model swap chain and replace it with another swap chain. For more info about this situation, see Deferred Destruction Issues with Flip Presentation Swap Chains.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::CreateSwapChainForCompositionSurface']/*"/>	
            <unmanaged>HRESULT IDXGIFactory2::CreateSwapChainForCompositionSurface([In] IUnknown* pDevice,[In, Optional] void* hSurface,[In] const DXGI_SWAP_CHAIN_DESC1* pDesc,[In, Optional] IDXGIOutput* pRestrictToOutput,[Out] IDXGISwapChain1** ppSwapChain)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.GetSharedResourceAdapterLuid(System.IntPtr,System.Int64@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="hResource"><para>A handle to a shared resource object. The <see cref="M:SharpDX.DXGI.Resource1.CreateSharedHandle(System.Nullable{SharpDX.Win32.SecurityAttributes},System.Int32,System.String,System.IntPtr@)"/> method returns this handle.</para></param>	
            <param name="luidRef"><para>A reference to a variable that receives a locally unique identifier (<see cref="T:System.Int64"/>) value that identifies the adapter. <see cref="T:System.Int64"/> is defined in Dxgi.h. An <see cref="T:System.Int64"/> is a 64-bit value that is guaranteed to be unique only on the operating system on which it was generated. The uniqueness of an <see cref="T:System.Int64"/> is guaranteed only until the operating system is restarted.</para></param>	
            <returns>GetSharedResourceAdapterLuid returns:<see cref="F:SharpDX.Result.Ok"/> if it  identified the adapter. <see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/> if hResource is invalid. Possibly other error codes that are described in the DXGI_ERROR topic.</returns>	
            <remarks>	
            You cannot share resources across adapters. Therefore, you cannot open a shared resource on an adapter other than the adapter on which the resource was created.  Call GetSharedResourceAdapterLuid before you open a shared resource to ensure that the resource was created on the appropriate adapter. To open a shared resource, call the <see cref="!:SharpDX.Direct3D11.Device1.OpenSharedResource1"/> or <see cref="!:SharpDX.Direct3D11.Device1.OpenSharedResourceByName"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::GetSharedResourceAdapterLuid']/*"/>	
            <unmanaged>HRESULT IDXGIFactory2::GetSharedResourceAdapterLuid([In] void* hResource,[Out] LUID* pLuid)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.RegisterStereoStatusWindow(System.IntPtr,System.Int32,System.Int32@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="windowHandle"><para>The handle of the window to send a notification message to when stereo status change occurs.</para></param>	
            <param name="wMsg"><para>Identifies the notification message to send. </para></param>	
            <param name="dwCookieRef"><para>A reference to a key value that an application can pass to the <see cref="M:SharpDX.DXGI.Factory2.UnregisterStereoStatus(System.Int32)"/> method  to unregister the notification message that wMsg specifies.</para></param>	
            <returns>RegisterStereoStatusWindow returns:<see cref="F:SharpDX.Result.Ok"/> if it successfully registered the window. E_OUTOFMEMORY if memory is unavailable to complete the operation. Possibly other error codes that are described in the DXGI_ERROR topic.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::RegisterStereoStatusWindow']/*"/>	
            <unmanaged>HRESULT IDXGIFactory2::RegisterStereoStatusWindow([In] HWND WindowHandle,[In] unsigned int wMsg,[Out] unsigned int* pdwCookie)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.RegisterStereoStatusEvent(System.IntPtr,System.Int32@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="hEvent"><para>A handle to the event object that the operating system sets when notification of stereo status change occurs. The CreateEvent or OpenEvent function returns this handle. </para></param>	
            <param name="dwCookieRef"><para>A reference to a key value that an application can pass to the <see cref="M:SharpDX.DXGI.Factory2.UnregisterStereoStatus(System.Int32)"/> method  to unregister the notification event that hEvent specifies.</para></param>	
            <returns>RegisterStereoStatusEvent returns:<see cref="F:SharpDX.Result.Ok"/> if it successfully registered the event. E_OUTOFMEMORY if memory is unavailable to complete the operation. Possibly other error codes that are described in the DXGI_ERROR topic.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::RegisterStereoStatusEvent']/*"/>	
            <unmanaged>HRESULT IDXGIFactory2::RegisterStereoStatusEvent([In] void* hEvent,[Out] unsigned int* pdwCookie)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.UnregisterStereoStatus(System.Int32)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="dwCookie"><para>A key value for the window or event to unregister. The  <see cref="M:SharpDX.DXGI.Factory2.RegisterStereoStatusWindow(System.IntPtr,System.Int32,System.Int32@)"/> or  <see cref="M:SharpDX.DXGI.Factory2.RegisterStereoStatusEvent(System.IntPtr,System.Int32@)"/> method returns this value. </para></param>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::UnregisterStereoStatus']/*"/>	
            <unmanaged>void IDXGIFactory2::UnregisterStereoStatus([In] unsigned int dwCookie)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.RegisterOcclusionStatusWindow(System.IntPtr,System.Int32,System.Int32@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="windowHandle"><para>The handle of the window to send a notification message to when occlusion status change occurs.</para></param>	
            <param name="wMsg"><para>Identifies the notification message to send. </para></param>	
            <param name="dwCookieRef"><para>A reference to a key value that an application can pass to the <see cref="M:SharpDX.DXGI.Factory2.UnregisterOcclusionStatus(System.Int32)"/> method  to unregister the notification message that wMsg specifies.</para></param>	
            <returns>RegisterOcclusionStatusWindow returns:<see cref="F:SharpDX.Result.Ok"/> if it successfully registered the window. E_OUTOFMEMORY if memory is unavailable to complete the operation.  <see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/> if WindowHandle is not a valid window handle or not the window handle that the current process owns. Possibly other error codes that are described in the DXGI_ERROR topic.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::RegisterOcclusionStatusWindow']/*"/>	
            <unmanaged>HRESULT IDXGIFactory2::RegisterOcclusionStatusWindow([In] HWND WindowHandle,[In] unsigned int wMsg,[Out] unsigned int* pdwCookie)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.RegisterOcclusionStatusEvent(System.IntPtr,System.Int32@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="hEvent"><para>A handle to the event object that the operating system sets when notification of occlusion status change occurs. The CreateEvent or OpenEvent function returns this handle.</para></param>	
            <param name="dwCookieRef"><para>A reference to a key value that an application can pass to the <see cref="M:SharpDX.DXGI.Factory2.UnregisterOcclusionStatus(System.Int32)"/> method  to unregister the notification event that hEvent specifies.</para></param>	
            <returns>RegisterOcclusionStatusEvent returns:<see cref="F:SharpDX.Result.Ok"/> if the method successfully registered the event. E_OUTOFMEMORY if memory is unavailable to complete the operation.  <see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/> if hEvent is not a valid handle or not an event handle.  Possibly other error codes that are described in the DXGI_ERROR topic.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::RegisterOcclusionStatusEvent']/*"/>	
            <unmanaged>HRESULT IDXGIFactory2::RegisterOcclusionStatusEvent([In] void* hEvent,[Out] unsigned int* pdwCookie)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory2.UnregisterOcclusionStatus(System.Int32)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="dwCookie"><para>A key value for the window or event to unregister. The  <see cref="M:SharpDX.DXGI.Factory2.RegisterOcclusionStatusWindow(System.IntPtr,System.Int32,System.Int32@)"/> or  <see cref="M:SharpDX.DXGI.Factory2.RegisterOcclusionStatusEvent(System.IntPtr,System.Int32@)"/> method returns this value. </para></param>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::UnregisterOcclusionStatus']/*"/>	
            <unmanaged>void IDXGIFactory2::UnregisterOcclusionStatus([In] unsigned int dwCookie)</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.Factory2.IsWindowedStereoEnabled">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            We recommend that windowed applications call IsWindowedStereoEnabled before they attempt to use stereo.  IsWindowedStereoEnabled returns TRUE if both of the following items are true:All adapters in the computer have drivers that are capable of stereo.  This only means that the driver is implemented to the Windows Display Driver Model (WDDM) for Windows Developer Preview (WDDM 1.2).  However, the adapter does not necessarily have to be able to scan out stereo. The current desktop mode (desktop modes are mono) and system policy and hardware are configured so that the Desktop Window Manager (DWM) performs stereo composition on at least one adapter output.The creation of a windowed stereo swap chain succeeds if the first requirement is met. However, if the adapter can't scan out stereo, the output on that adapter is reduced to mono.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory2::IsWindowedStereoEnabled']/*"/>	
            <unmanaged>IsWindowedStereoEnabled</unmanaged>	
            <unmanaged>BOOL IDXGIFactory2::IsWindowedStereoEnabled()</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.KeyedMutex">
            <summary>	
            Using a key, acquires exclusive rendering access to a shared resource.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIKeyedMutex']/*"/>	
            <unmanaged>IDXGIKeyedMutex</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.KeyedMutex.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.KeyedMutex"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.KeyedMutex.Acquire(System.Int64,System.Int32)">
            <summary>	
            Using a key, acquires exclusive rendering access to a shared resource.	
            </summary>	
            <param name="key"><para>A value that indicates which device to give access to. This method will succeed when the device that currently owns the surface calls  the <see cref="M:SharpDX.DXGI.KeyedMutex.Release(System.Int64)"/> method using the same value. This value can be any UINT64 value.</para></param>	
            <param name="dwMilliseconds"><para>The time-out interval, in milliseconds. This method will return if the interval elapses, and the keyed mutex has not been released  using the specified Key.  If this value is set to zero, the AcquireSync method will test to see if the keyed mutex has been released and returns immediately.  If this value is set to INFINITE, the time-out interval will never elapse.</para></param>	
            <returns>Return <see cref="F:SharpDX.Result.Ok"/> if successful.If the owning device attempted to create another keyed mutex on the same shared resource, AcquireSync returns E_FAIL.AcquireSync can also return the following DWORD constants. Therefore, you should explicitly check for these constants. If you only use the SUCCEEDED macro on the return value to determine if  AcquireSync succeeded, you will not catch these constants.WAIT_ABANDONED - The shared surface and keyed mutex are no longer in a consistent state.  If AcquireSync returns this value, you should release and recreate both the keyed mutex and the shared surface. WAIT_TIMEOUT - The time-out interval elapsed before the specified key was released.</returns>	
            <remarks>	
            The AcquireSync method creates a lock to a surface that is shared between multiple devices, allowing only one device to render to a surface at a time.   This method uses a key to determine which device currently has exclusive access to the surface.When a surface is created using the <see cref="!:SharpDX.Direct3D10.ResourceOptionFlags.SharedKeyedmutex"/> value of the <see cref="!:SharpDX.Direct3D10.ResourceOptionFlags"/> enumeration,  you must call the AcquireSync method before rendering to the surface.  You must call the ReleaseSync method when you are done  rendering to a surface.To acquire a reference to the keyed mutex object of a shared resource, call the QueryInterface method of the resource and pass in  the UUID of the <see cref="T:SharpDX.DXGI.KeyedMutex"/> interface.  For more information about acquiring this reference, see the following code example.The AcquireSync method uses the key as follows, depending on the state of the surface:On initial creation, the surface is unowned and any device can call the AcquireSync method to gain access.  For an unowned device, only a key of 0 will succeed. Calling the AcquireSync method for any other key will stall the  calling CPU thread. If the surface is owned by a device when you call the AcquireSync method, the CPU thread that called  the AcquireSync method will stall until the owning device calls the ReleaseSync method  using the same Key. If the surface is unowned when you call the AcquireSync method (for example, the last owning device has already called  the ReleaseSync method), the AcquireSync method will succeed if you specify the same key  that was specified when the ReleaseSync method was last called. Calling the AcquireSync method using  any other key will cause a stall. When the owning device calls the ReleaseSync method with a particular key, and more than one device is waiting after  calling the  AcquireSync method using the same key, any one of the waiting devices could be woken up first.  The order in which devices are woken up is undefined. A keyed mutex does not support recursive calls to the AcquireSync method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIKeyedMutex::AcquireSync']/*"/>	
            <unmanaged>HRESULT IDXGIKeyedMutex::AcquireSync([In] unsigned longlong Key,[In] unsigned int dwMilliseconds)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.KeyedMutex.Release(System.Int64)">
            <summary>	
            Using a key, releases exclusive rendering access to a shared resource.	
            </summary>	
            <param name="key"><para>A value that indicates which device to give access to. This method succeeds when the device that currently owns the surface calls the ReleaseSync method using the same value. This value can be any UINT64 value.</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successful.If the device attempted to release a keyed mutex that is not valid or owned by the device, ReleaseSync returns E_FAIL.</returns>	
            <remarks>	
            The ReleaseSync method releases a lock to a surface that is shared between multiple devices.  This method uses a key to determine which device currently has exclusive access to the surface.When a surface is created using the <see cref="!:SharpDX.Direct3D10.ResourceOptionFlags.SharedKeyedmutex"/> value of the <see cref="!:SharpDX.Direct3D10.ResourceOptionFlags"/> enumeration,  you must call the <see cref="M:SharpDX.DXGI.KeyedMutex.Acquire(System.Int64,System.Int32)"/> method before rendering to the surface.  You must call the ReleaseSync method when you are done  rendering to a surface.After you call the ReleaseSync method, the shared resource is unset from the rendering pipeline.To acquire a reference to the keyed mutex object of a shared resource, call the QueryInterface method of the resource and pass in  the UUID of the <see cref="T:SharpDX.DXGI.KeyedMutex"/> interface.  For more information about acquiring this reference, see the following code example.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIKeyedMutex::ReleaseSync']/*"/>	
            <unmanaged>HRESULT IDXGIKeyedMutex::ReleaseSync([In] unsigned longlong Key)</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.Output">
            <summary>	
            An <see cref="T:SharpDX.DXGI.Output"/> interface represents an adapter output (such as a monitor).	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput']/*"/>	
            <unmanaged>IDXGIOutput</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Output.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Output"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Output.GetDescription(SharpDX.DXGI.OutputDescription@)">
            <summary>	
            Get a description of the output.	
            </summary>	
            <param name="descRef"><para>A reference to the output description (see <see cref="T:SharpDX.DXGI.OutputDescription"/>).</para></param>	
            <returns>Returns a code that indicates success or failure. <see cref="F:SharpDX.Result.Ok"/> if successful, <see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/> if pDesc is passed in as <c>null</c>.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetDesc']/*"/>	
            <unmanaged>HRESULT IDXGIOutput::GetDesc([Out] DXGI_OUTPUT_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Output.GetDisplayModeList(SharpDX.DXGI.Format,System.Int32,System.Int32@,SharpDX.DXGI.ModeDescription[])">
            <summary>	
            [Starting with Direct3D 11.1, we recommend not to use GetDisplayModeList anymore to retrieve the matching display mode. Instead, use <see cref="M:SharpDX.DXGI.Output1.GetDisplayModeList1(SharpDX.DXGI.Format,System.Int32,System.Int32@,SharpDX.DXGI.ModeDescription1[])"/>, which supports stereo display mode.]	
            </summary>	
            <param name="enumFormat">No documentation.</param>	
            <param name="flags">No documentation.</param>	
            <param name="numModesRef">No documentation.</param>	
            <param name="descRef">No documentation.</param>	
            <returns>Returns one of the following DXGI_ERROR. It is rare, but possible, that the display modes available can change immediately after calling  this method, in which case <see cref="F:SharpDX.DXGI.DXGIError.MoreData"/> is returned (if there is not enough room for all the display modes).   If GetDisplayModeList is called from a Remote Desktop Services session (formerly Terminal Services session), <see cref="F:SharpDX.DXGI.DXGIError.NotCurrentlyAvailable"/> is returned.</returns>	
            <remarks>	
            In general, when switching from windowed to full-screen mode, a swap chain automatically chooses a display mode that meets (or exceeds) the resolution, color  depth and refresh rate of the swap chain. To exercise more control over the display mode, use this API to poll the set of display modes that are validated  against monitor capabilities, or all modes that match the desktop (if the desktop settings are not validated against the monitor).As shown, this API is designed to be called twice. First to get the number of modes available, and second to return a description of the modes.<code>	
             UINT num = 0;	
            <see cref="T:SharpDX.DXGI.Format"/> format = <see cref="F:SharpDX.DXGI.Format.R32G32B32A32_Float"/>;	
            UINT flags         = <see cref="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Interlaced"/>; pOutput-&gt;GetDisplayModeList( format, flags, &amp;num, 0); ... <see cref="T:SharpDX.DXGI.ModeDescription"/> * pDescs = new <see cref="T:SharpDX.DXGI.ModeDescription"/>[num];	
            pOutput-&gt;GetDisplayModeList( format, flags, &amp;num, pDescs); 	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetDisplayModeList']/*"/>	
            <unmanaged>HRESULT IDXGIOutput::GetDisplayModeList([In] DXGI_FORMAT EnumFormat,[In] unsigned int Flags,[InOut] unsigned int* pNumModes,[Out, Buffer, Optional] DXGI_MODE_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Output.FindClosestMatchingMode(SharpDX.DXGI.ModeDescription@,SharpDX.DXGI.ModeDescription@,SharpDX.ComObject)">
            <summary>	
            [Starting with Direct3D 11.1, we recommend not to use FindClosestMatchingMode anymore to find the display mode that most closely matches the requested display mode. Instead, use <see cref="M:SharpDX.DXGI.Output1.FindClosestMatchingMode1(SharpDX.DXGI.ModeDescription1@,SharpDX.DXGI.ModeDescription1@,SharpDX.ComObject)"/>, which supports stereo display mode.]	
            </summary>	
            <param name="modeToMatchRef">No documentation.</param>	
            <param name="closestMatchRef">No documentation.</param>	
            <param name="concernedDeviceRef">No documentation.</param>	
            <returns>Returns one of the following DXGI_ERROR.</returns>	
            <remarks>	
            FindClosestMatchingMode behaves similarly to the <see cref="M:SharpDX.DXGI.Output1.FindClosestMatchingMode1(SharpDX.DXGI.ModeDescription1@,SharpDX.DXGI.ModeDescription1@,SharpDX.ComObject)"/> except FindClosestMatchingMode considers only the mono display modes. <see cref="M:SharpDX.DXGI.Output1.FindClosestMatchingMode1(SharpDX.DXGI.ModeDescription1@,SharpDX.DXGI.ModeDescription1@,SharpDX.ComObject)"/> considers only stereo modes if you set the Stereo member in the <see cref="T:SharpDX.DXGI.ModeDescription1"/> structure that pModeToMatch points to, and considers only mono modes if Stereo is not set.<see cref="M:SharpDX.DXGI.Output1.FindClosestMatchingMode1(SharpDX.DXGI.ModeDescription1@,SharpDX.DXGI.ModeDescription1@,SharpDX.ComObject)"/> returns a matched display-mode set with only stereo modes or only mono modes.	
            FindClosestMatchingMode behaves as though you specified the input mode as mono.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::FindClosestMatchingMode']/*"/>	
            <unmanaged>HRESULT IDXGIOutput::FindClosestMatchingMode([In] const DXGI_MODE_DESC* pModeToMatch,[Out] DXGI_MODE_DESC* pClosestMatch,[In, Optional] IUnknown* pConcernedDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Output.WaitForVerticalBlank">
            <summary>	
            Halt a thread until the next vertical blank occurs.	
            </summary>	
            <returns>Returns one of the following DXGI_ERROR.</returns>	
            <remarks>	
            A vertical blank occurs when the raster moves from the lower right corner to the upper left corner to begin drawing the next frame.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::WaitForVBlank']/*"/>	
            <unmanaged>HRESULT IDXGIOutput::WaitForVBlank()</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Output.TakeOwnership(SharpDX.ComObject,System.Boolean)">
            <summary>	
            Takes ownership of an output.	
            </summary>	
            <param name="deviceRef"><para>A reference to the <see cref="T:SharpDX.ComObject"/> interface of a device (such as an <see cref="!:SharpDX.Direct3D10.Device"/>).</para></param>	
            <param name="exclusive"><para>Set to TRUE to enable other threads or applications to take ownership of the device; otherwise, set to <see cref="F:SharpDX.Result.False"/>.</para></param>	
            <returns>Returns one of the DXGI_ERROR values.</returns>	
            <remarks>	
            When you are finished with the output, call <see cref="M:SharpDX.DXGI.Output.ReleaseOwnership"/>.TakeOwnership should not be called directly by applications, since results will be unpredictable. It is called implicitly by the DXGI swap chain object during full-screen transitions, and should not be used as a substitute for swap-chain methods.Notes for Metro style appsIf a Metro style app uses TakeOwnership, it fails with <see cref="F:SharpDX.DXGI.DXGIError.NotCurrentlyAvailable"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::TakeOwnership']/*"/>	
            <unmanaged>HRESULT IDXGIOutput::TakeOwnership([In] IUnknown* pDevice,[In] BOOL Exclusive)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Output.ReleaseOwnership">
            <summary>	
            Releases ownership of the output.	
            </summary>	
            <remarks>	
            If you are not using a swap chain, get access to an output by calling <see cref="M:SharpDX.DXGI.Output.TakeOwnership(SharpDX.ComObject,System.Boolean)"/> and release it when you are finished by calling <see cref="M:SharpDX.DXGI.Output.ReleaseOwnership"/>. An application that uses a swap chain will typically not call either of these methods.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::ReleaseOwnership']/*"/>	
            <unmanaged>void IDXGIOutput::ReleaseOwnership()</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Output.GetGammaControlCapabilities(SharpDX.DXGI.GammaControlCapabilities@)">
            <summary>	
            Gets a description of the gamma-control capabilities.	
            </summary>	
            <param name="gammaCapsRef"><para>A reference to a  description of the gamma-control capabilities (see <see cref="T:SharpDX.DXGI.GammaControlCapabilities"/>).</para></param>	
            <returns>Returns one of the DXGI_ERROR values.</returns>	
            <remarks>	
            Note??Calling this method is only supported while in full-screen mode.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetGammaControlCapabilities']/*"/>	
            <unmanaged>HRESULT IDXGIOutput::GetGammaControlCapabilities([Out] DXGI_GAMMA_CONTROL_CAPABILITIES* pGammaCaps)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Output.SetGammaControl(SharpDX.DXGI.GammaControl@)">
            <summary>	
            Sets the gamma controls.	
            </summary>	
            <param name="arrayRef"><para>A reference to an array of gamma controls (see <see cref="T:SharpDX.DXGI.GammaControl"/>).</para></param>	
            <returns>Returns one of the DXGI_ERROR values.</returns>	
            <remarks>	
            Note??Calling this method is only supported while in full-screen mode.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::SetGammaControl']/*"/>	
            <unmanaged>HRESULT IDXGIOutput::SetGammaControl([In] const DXGI_GAMMA_CONTROL* pArray)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Output.GetGammaControl(SharpDX.DXGI.GammaControl@)">
            <summary>	
            Gets the gamma control settings.	
            </summary>	
            <param name="arrayRef"><para>An array of gamma control settings (see <see cref="T:SharpDX.DXGI.GammaControl"/>).</para></param>	
            <returns>Returns one of the DXGI_ERROR values.</returns>	
            <remarks>	
            Note??Calling this method is only supported while in full-screen mode.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetGammaControl']/*"/>	
            <unmanaged>HRESULT IDXGIOutput::GetGammaControl([Out] DXGI_GAMMA_CONTROL* pArray)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Output.SetDisplaySurface(SharpDX.DXGI.Surface)">
            <summary>	
            Changes the display mode.	
            </summary>	
            <param name="scanoutSurfaceRef"><para>A reference to a surface (see <see cref="T:SharpDX.DXGI.Surface"/>) used for rendering an image to the screen. The surface must have been created as a back buffer (DXGI_USAGE_BACKBUFFER).</para></param>	
            <returns>Returns one of the DXGI_ERROR values.</returns>	
            <remarks>	
            IDXGIOutput::SetDisplaySurface should not be called directly by applications, since results will be unpredictable. It is called implicitly by the DXGI swap chain object during full-screen transitions, and should not be used as a substitute for swap-chain methods.This method should only be called between <see cref="M:SharpDX.DXGI.Output.TakeOwnership(SharpDX.ComObject,System.Boolean)"/> and <see cref="M:SharpDX.DXGI.Output.ReleaseOwnership"/> calls.Notes for Metro style appsIf a Metro style app uses SetDisplaySurface, it fails with <see cref="F:SharpDX.DXGI.DXGIError.NotCurrentlyAvailable"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::SetDisplaySurface']/*"/>	
            <unmanaged>HRESULT IDXGIOutput::SetDisplaySurface([In] IDXGISurface* pScanoutSurface)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Output.CopyDisplaySurfaceTo(SharpDX.DXGI.Surface)">
            <summary>	
            [Starting with Direct3D 11.1, we recommend not to use GetDisplaySurfaceData anymore to retrieve the current display surface. Instead, use <see cref="M:SharpDX.DXGI.Output1.GetDisplaySurfaceData1(SharpDX.DXGI.Resource)"/>, which supports stereo display mode.]	
            </summary>	
            <param name="destinationRef">No documentation.</param>	
            <returns>Returns one of the DXGI_ERROR values.</returns>	
            <remarks>	
            IDXGIOutput::GetDisplaySurfaceData can only be called when an output is in full-screen mode. If the method succeeds, DXGI fills the destination surface.Use <see cref="M:SharpDX.DXGI.Output.GetDescription(SharpDX.DXGI.OutputDescription@)"/> to determine the size (width and height) of the output when you want to allocate space for the destination surface. This is true regardless of target monitor rotation. A destination surface created by a graphics component (such as Direct3D 10) must be created with CPU-write permission (see <see cref="!:SharpDX.Direct3D10.CpuAccessFlags.Write"/>). Other surfaces should be created with CPU read-write permission (see D3D10_CPU_ACCESS_READ_WRITE). This method will modify the surface data to fit the destination surface (stretch, shrink, convert format, rotate). The stretch and shrink is performed with point-sampling.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetDisplaySurfaceData']/*"/>	
            <unmanaged>HRESULT IDXGIOutput::GetDisplaySurfaceData([In] IDXGISurface* pDestination)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Output.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)">
            <summary>	
            Gets statistics about recently rendered frames.	
            </summary>	
            <param name="statsRef"><para>A reference to frame statistics (see <see cref="T:SharpDX.DXGI.FrameStatistics"/>).</para></param>	
            <returns>If this function succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it might return <see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/>.</returns>	
            <remarks>	
            This API is similar to <see cref="M:SharpDX.DXGI.SwapChain.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)"/>.Note??Calling this method is only supported while in full-screen mode.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetFrameStatistics']/*"/>	
            <unmanaged>HRESULT IDXGIOutput::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Output.GetClosestMatchingMode(SharpDX.ComObject,SharpDX.DXGI.ModeDescription,SharpDX.DXGI.ModeDescription@)">
            <summary>	
            Find the display mode that most closely matches the requested display mode.	
            </summary>	
            <remarks>	
            Direct3D devices require UNORM formats. This method finds the closest matching available display mode to the mode specified in pModeToMatch. Similarly ranked fields (ie. all specified, or all unspecified, etc) are resolved in the following order.  ScanlineOrdering Scaling Format Resolution RefreshRate  When determining the closest value for a particular field, previously matched fields are used to filter the display mode list choices, and  other fields are ignored. For example, when matching Resolution, the display mode list will have already been filtered by a certain ScanlineOrdering,  Scaling, and Format, while RefreshRate is ignored. This ordering doesn't define the absolute ordering for every usage scenario of FindClosestMatchingMode, because  the application can choose some values initially, effectively changing the order that fields are chosen. Fields of the display mode are matched one at a time, generally in a specified order. If a field is unspecified, FindClosestMatchingMode gravitates toward the values for the desktop related to this output.  If this output is not part of the desktop, then the default desktop output is used to find values. If an application uses a fully unspecified  display mode, FindClosestMatchingMode will typically return a display mode that matches the desktop settings for this output.   Unspecified fields are lower priority than specified fields and will be resolved later than specified fields. 	
            </remarks>	
            <param name="device">A reference to the Direct3D device interface. If this parameter is NULL, only modes whose format matches that of pModeToMatch will  be returned; otherwise, only those formats that are supported for scan-out by the device are returned. </param>
            <param name="modeToMatch">The desired display mode (see <see cref="T:SharpDX.DXGI.ModeDescription"/>). Members of DXGI_MODE_DESC can be unspecified indicating no preference for  that member.  A value of 0 for Width or Height indicates the value is unspecified.  If either Width or  Height are 0 both must be 0.  A numerator and denominator of 0 in RefreshRate indicate it is unspecified. Other members  of DXGI_MODE_DESC have enumeration values indicating the member is unspecified.  If pConnectedDevice is NULL Format cannot be DXGI_FORMAT_UNKNOWN. </param>
            <param name="closestMatch">The mode that most closely matches pModeToMatch. </param>
            <returns>Returns one of the following <see cref="T:SharpDX.DXGI.DXGIError"/>. </returns>
            <unmanaged>HRESULT IDXGIOutput::FindClosestMatchingMode([In] const DXGI_MODE_DESC* pModeToMatch,[Out] DXGI_MODE_DESC* pClosestMatch,[In, Optional] IUnknown* pConcernedDevice)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.Output.GetDisplayModeList(SharpDX.DXGI.Format,SharpDX.DXGI.DisplayModeEnumerationFlags)">
            <summary>	
            Gets the display modes that match the requested format and other input options.	
            </summary>	
            <remarks>	
            In general, when switching from windowed to full-screen mode, a swap chain automatically chooses a display mode that meets (or exceeds) the resolution, color  depth and refresh rate of the swap chain. To exercise more control over the display mode, use this API to poll the set of display modes that are validated  against monitor capabilities, or all modes that match the desktop (if the desktop settings are not validated against the monitor). As shown, this API is designed to be called twice. First to get the number of modes available, and second to return a description of the modes. 	
            <code> UINT num = 0;	
            DXGI_FORMAT format = DXGI_FORMAT_R32G32B32A32_FLOAT;	
            UINT flags         = DXGI_ENUM_MODES_INTERLACED; pOutput-&gt;GetDisplayModeList( format, flags, &amp;num, 0); ... DXGI_MODE_DESC * pDescs = new DXGI_MODE_DESC[num];	
            pOutput-&gt;GetDisplayModeList( format, flags, &amp;num, pDescs); </code>	
            	
             	
            </remarks>	
            <param name="format">The color format (see <see cref="T:SharpDX.DXGI.Format"/>). </param>
            <param name="flags">format for modes to include (see {{DXGI_ENUM_MODES}}). DXGI_ENUM_MODES_SCALING needs to be specified to expose the display modes that require scaling.  Centered modes, requiring no  scaling and corresponding directly to the display output, are enumerated by default. </param>
            <returns>Returns a list of display modes (see <see cref="T:SharpDX.DXGI.ModeDescription"/>); </returns>
            <unmanaged>HRESULT IDXGIOutput::GetDisplayModeList([None] DXGI_FORMAT EnumFormat,[None] int Flags,[InOut] int* pNumModes,[Out, Buffer, Optional] DXGI_MODE_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.Output.Description">
            <summary>	
            Get a description of the output.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetDesc']/*"/>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged>HRESULT IDXGIOutput::GetDesc([Out] DXGI_OUTPUT_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.Output.GammaControlCapabilities">
            <summary>	
            Gets a description of the gamma-control capabilities.	
            </summary>	
            <remarks>	
            Note??Calling this method is only supported while in full-screen mode.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetGammaControlCapabilities']/*"/>	
            <unmanaged>GetGammaControlCapabilities</unmanaged>	
            <unmanaged>HRESULT IDXGIOutput::GetGammaControlCapabilities([Out] DXGI_GAMMA_CONTROL_CAPABILITIES* pGammaCaps)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.Output.GammaControl">
            <summary>	
            Gets the gamma control settings.	
            </summary>	
            <remarks>	
            Note??Calling this method is only supported while in full-screen mode.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetGammaControl']/*"/>	
            <unmanaged>GetGammaControl</unmanaged>	
            <unmanaged>HRESULT IDXGIOutput::GetGammaControl([Out] DXGI_GAMMA_CONTROL* pArray)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.Output.FrameStatistics">
            <summary>	
            Gets statistics about recently rendered frames.	
            </summary>	
            <remarks>	
            This API is similar to <see cref="M:SharpDX.DXGI.SwapChain.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)"/>.Note??Calling this method is only supported while in full-screen mode.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetFrameStatistics']/*"/>	
            <unmanaged>GetFrameStatistics</unmanaged>	
            <unmanaged>HRESULT IDXGIOutput::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.Output1">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput1']/*"/>	
            <unmanaged>IDXGIOutput1</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Output1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Output1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Output1.GetDisplayModeList1(SharpDX.DXGI.Format,System.Int32,System.Int32@,SharpDX.DXGI.ModeDescription1[])">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="enumFormat"><para>A <see cref="T:SharpDX.DXGI.Format"/>-typed value for the color format.</para></param>	
            <param name="flags"><para>A combination of DXGI_ENUM_MODES-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for display modes to include. You must specify <see cref="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Scaling"/> to expose the display modes that require scaling.  Centered modes that require no  scaling and correspond directly to the display output are enumerated by default.</para></param>	
            <param name="numModesRef"><para>A reference to a variable that receives the number of display modes that GetDisplayModeList1 returns in the memory block to which pDesc points. Set pDesc to <c>null</c> so that pNumModes returns the number of display modes that match the format and the options. Otherwise, pNumModes returns the number of display modes returned in pDesc.</para></param>	
            <param name="descRef"><para>A reference to a list of display modes; set to <c>null</c> to get the number of display modes.</para></param>	
            <returns>Returns one of the error codes described in the DXGI_ERROR topic. It is rare, but possible, that the display modes available can change immediately after calling  this method, in which case <see cref="F:SharpDX.DXGI.DXGIError.MoreData"/> is returned (if there is not enough room for all the display modes).</returns>	
            <remarks>	
            GetDisplayModeList1 is updated from  GetDisplayModeList to return a list of <see cref="T:SharpDX.DXGI.ModeDescription1"/> structures, which are updated mode descriptions.  GetDisplayModeList behaves as though it calls GetDisplayModeList1 because  GetDisplayModeList can return all of the modes that are specified by DXGI_ENUM_MODES, including stereo mode.  However, GetDisplayModeList returns a list of <see cref="T:SharpDX.DXGI.ModeDescription"/> structures, which are the former mode descriptions and do not indicate stereo mode.The GetDisplayModeList1 method does not enumerate stereo modes unless you specify the <see cref="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Stereo"/> flag in the Flags parameter.  If you specify <see cref="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Stereo"/>, stereo modes are included in the list of returned modes that the pDesc parameter points to.  In other words, the method returns both stereo and mono modes.In general, when you switch from windowed to full-screen mode, a swap chain automatically chooses a display mode that meets (or exceeds) the resolution, color  depth, and refresh rate of the swap chain. To exercise more control over the display mode, use GetDisplayModeList1 to poll the set of display modes that are validated  against monitor capabilities, or all modes that match the desktop (if the desktop settings are not validated against the monitor).The following example code shows that you need to call GetDisplayModeList1 twice. First call GetDisplayModeList1 to get the number of modes available, and second call GetDisplayModeList1 to return a description of the modes.<code>	
             UINT num = 0;	
            <see cref="T:SharpDX.DXGI.Format"/> format = <see cref="F:SharpDX.DXGI.Format.R32G32B32A32_Float"/>;	
            UINT flags         = <see cref="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Interlaced"/>; pOutput-&gt;GetDisplayModeList1( format, flags, &amp;num, 0); ... <see cref="T:SharpDX.DXGI.ModeDescription1"/> * pDescs = new <see cref="T:SharpDX.DXGI.ModeDescription1"/>[num];	
            pOutput-&gt;GetDisplayModeList1( format, flags, &amp;num, pDescs); 	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput1::GetDisplayModeList1']/*"/>	
            <unmanaged>HRESULT IDXGIOutput1::GetDisplayModeList1([In] DXGI_FORMAT EnumFormat,[In] unsigned int Flags,[InOut] unsigned int* pNumModes,[Out, Buffer, Optional] DXGI_MODE_DESC1* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Output1.FindClosestMatchingMode1(SharpDX.DXGI.ModeDescription1@,SharpDX.DXGI.ModeDescription1@,SharpDX.ComObject)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="modeToMatchRef"><para>A reference to the <see cref="T:SharpDX.DXGI.ModeDescription1"/> structure that describes the display mode to match. Members of <see cref="T:SharpDX.DXGI.ModeDescription1"/> can be unspecified, which indicates no preference for  that member.  A value of 0 for Width or Height indicates that the value is unspecified.  If either Width or  Height is 0, both must be 0.  A numerator and denominator of 0 in RefreshRate indicate it is unspecified. Other members  of <see cref="T:SharpDX.DXGI.ModeDescription1"/> have enumeration values that indicate that the member is unspecified.  If pConcernedDevice is <c>null</c>, the Format member of <see cref="T:SharpDX.DXGI.ModeDescription1"/> cannot be <see cref="F:SharpDX.DXGI.Format.Unknown"/>.</para></param>	
            <param name="closestMatchRef"><para>A reference to the <see cref="T:SharpDX.DXGI.ModeDescription1"/> structure that receives a description of the display mode that most closely matches the display mode described at pModeToMatch.</para></param>	
            <param name="concernedDeviceRef"><para>A reference to the Direct3D device interface. If this parameter is <c>null</c>, FindClosestMatchingMode1 returns only modes whose format matches that of pModeToMatch; otherwise, FindClosestMatchingMode1 returns only those formats that are supported for scan-out by the device. For info about the formats that are supported for scan-out by the device at each feature level, see Hardware Support for Direct3D 10 Formats, Hardware Support for Direct3D 10.1 Formats, Hardware Support for Direct3D 10Level9 Formats, Hardware Support for Direct3D 11 Formats, and Hardware Support for Direct3D 11.1 Formats.</para></param>	
            <returns>Returns one of the error codes described in the DXGI_ERROR topic.</returns>	
            <remarks>	
            Direct3D devices require UNORM formats.FindClosestMatchingMode1 finds the closest matching available display mode to the mode that you specify in pModeToMatch.If you set the Stereo member in the <see cref="T:SharpDX.DXGI.ModeDescription1"/> structure to which pModeToMatch points to specify a stereo mode as input, FindClosestMatchingMode1 considers only stereo modes. FindClosestMatchingMode1 considers only mono modes if Stereo is not set.FindClosestMatchingMode1 resolves similarly ranked members of display modes (that is, all specified, or all unspecified, and so on) in the following order:ScanlineOrdering Scaling Format Resolution RefreshRateWhen FindClosestMatchingMode1 determines the closest value for a particular member, it uses previously matched members to filter the display mode list choices, and  ignores other members. For example, when FindClosestMatchingMode1 matches Resolution, it already filtered the display mode list by a certain ScanlineOrdering,  Scaling, and Format, while it ignores RefreshRate. This ordering doesn't define the absolute ordering for every usage scenario of FindClosestMatchingMode1, because  the application can choose some values initially, which effectively changes the order of resolving members.FindClosestMatchingMode1 matches members of the display mode one at a time, generally in a specified order.If a member is unspecified, FindClosestMatchingMode1 gravitates toward the values for the desktop related to this output.  If this output is not part of the desktop, FindClosestMatchingMode1 uses the default desktop output to find values. If an application uses a fully unspecified  display mode, FindClosestMatchingMode1 typically returns a display mode that matches the desktop settings for this output.   Because unspecified members are lower priority than specified members, FindClosestMatchingMode1 resolves unspecified members later than specified members.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput1::FindClosestMatchingMode1']/*"/>	
            <unmanaged>HRESULT IDXGIOutput1::FindClosestMatchingMode1([In] const DXGI_MODE_DESC1* pModeToMatch,[Out] DXGI_MODE_DESC1* pClosestMatch,[In, Optional] IUnknown* pConcernedDevice)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Output1.GetDisplaySurfaceData1(SharpDX.DXGI.Resource)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="destinationRef"><para>A reference to a resource interface that represents the resource to which GetDisplaySurfaceData1 copies the display surface.</para></param>	
            <returns>Returns one of the error codes described in the DXGI_ERROR topic.</returns>	
            <remarks>	
            GetDisplaySurfaceData1 is similar to <see cref="M:SharpDX.DXGI.Output.CopyDisplaySurfaceTo(SharpDX.DXGI.Surface)"/> except GetDisplaySurfaceData1 takes an <see cref="T:SharpDX.DXGI.Resource"/> and <see cref="M:SharpDX.DXGI.Output.CopyDisplaySurfaceTo(SharpDX.DXGI.Surface)"/> takes an <see cref="T:SharpDX.DXGI.Surface"/>.GetDisplaySurfaceData1 returns an error if the input resource is not a 2D texture (represented by the <see cref="!:SharpDX.Direct3D11.Texture2D"/> interface) with an array size (ArraySize member of the <see cref="!:SharpDX.Direct3D11.Texture2DDescription"/> structure) that is equal to the swap chain buffers.The original <see cref="M:SharpDX.DXGI.Output.CopyDisplaySurfaceTo(SharpDX.DXGI.Surface)"/> and the updated GetDisplaySurfaceData1 behave exactly the same. GetDisplaySurfaceData1 was required because textures with an array size equal to 2 (ArraySize = 2) do not implement <see cref="T:SharpDX.DXGI.Surface"/>.You can call GetDisplaySurfaceData1 only when an output is in full-screen mode. If GetDisplaySurfaceData1 succeeds, it fills the destination resource.Use <see cref="M:SharpDX.DXGI.Output.GetDescription(SharpDX.DXGI.OutputDescription@)"/> to determine the size (width and height) of the output when you want to allocate space for the destination resource. This is true regardless of target monitor rotation. A destination resource created by a graphics component (such as Direct3D 11) must be created with CPU write permission (see <see cref="!:SharpDX.Direct3D11.CpuAccessFlags.Write"/>). Other surfaces can be created with CPU read-write permission (<see cref="!:SharpDX.Direct3D11.CpuAccessFlags.Read"/> | <see cref="!:SharpDX.Direct3D11.CpuAccessFlags.Write"/>). GetDisplaySurfaceData1 modifies the surface data to fit the destination resource (stretch, shrink, convert format, rotate). GetDisplaySurfaceData1 performs the stretch and shrink with point sampling.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput1::GetDisplaySurfaceData1']/*"/>	
            <unmanaged>HRESULT IDXGIOutput1::GetDisplaySurfaceData1([In] IDXGIResource* pDestination)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Output1.DuplicateOutput(SharpDX.ComObject,SharpDX.DXGI.OutputDuplication@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="outputDuplicationOut">No documentation.</param>	
            <returns>DuplicateOutput returns:<see cref="F:SharpDX.Result.Ok"/> if DuplicateOutput successfully created the desktop duplication interface. E_INVALIDARG for one of the following reasons:  The specified device (pDevice) is invalid, was not created on the correct adapter, or was not created from <see cref="T:SharpDX.DXGI.Factory1"/> (or a later version of a DXGI factory interface that inherits from <see cref="T:SharpDX.DXGI.Factory1"/>). The calling application is already duplicating this desktop output. For more information about this error, see Remarks. E_ACCESSDENIED if the application does not have access privilege  to the current desktop image.  For example, only an application that runs at LOCAL_SYSTEM can access the secure desktop. <see cref="F:SharpDX.DXGI.DXGIError.Unsupported"/> if the created <see cref="T:SharpDX.DXGI.OutputDuplication"/> interface does not support the current desktop mode or scenario.  For example, 8bpp and non-DWM desktop modes are not supported. <see cref="F:SharpDX.DXGI.DXGIError.NotCurrentlyAvailable"/> if DXGI reached the limit on the maximum number of concurrent duplication applications (default of four). Therefore, the calling application cannot create any desktop duplication interfaces until the other applications close. <see cref="F:SharpDX.DXGI.DXGIError.SessionDisconnected"/> if DuplicateOutput failed because the session is currently disconnected. Other error codes are described in the DXGI_ERROR topic.</returns>	
            <remarks>	
            If an application wants to duplicate the entire desktop, it must create a desktop duplication interface on each active output on the desktop. This interface does not provide an explicit way to synchronize the timing of each output image. Instead, the application must use the time stamp of each output, and then determine how to combine the images.For DuplicateOutput to succeed, you must create pDevice from <see cref="T:SharpDX.DXGI.Factory1"/> or a later version of a DXGI factory interface that inherits from <see cref="T:SharpDX.DXGI.Factory1"/>.If the current mode is a stereo mode, the desktop duplication interface provides the image for the left stereo image only.By default, only four processes can use a <see cref="T:SharpDX.DXGI.OutputDuplication"/> interface at the same time within a single session. A process can have only one desktop duplication interface on a single desktop output; however, that process can have a desktop duplication interface for each output that is part of the desktop.If DuplicateOutput fails with <see cref="F:SharpDX.DXGI.DXGIError.Unsupported"/>, the application can wait for system notification of desktop switches and mode changes and then call DuplicateOutput again after such a notification occurs.  For more information, see information in desktop switch (EVENT_SYSTEM_DESKTOPSWITCH) and mode change notification (WM_DISPLAYCHANGE).	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput1::DuplicateOutput']/*"/>	
            <unmanaged>HRESULT IDXGIOutput1::DuplicateOutput([In] IUnknown* pDevice,[Out] IDXGIOutputDuplication** ppOutputDuplication)</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.OutputDuplication">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutputDuplication']/*"/>	
            <unmanaged>IDXGIOutputDuplication</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.OutputDuplication.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.OutputDuplication"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.OutputDuplication.GetDescription(SharpDX.DXGI.OutduplDescription@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="descRef"><para>A reference to a <see cref="T:SharpDX.DXGI.OutduplDescription"/> structure that describes the duplicated output. This parameter must not be <c>null</c>.</para></param>	
            <remarks>	
            After an application creates an <see cref="T:SharpDX.DXGI.OutputDuplication"/> interface, it calls GetDesc to retrieve the dimensions of the surface that contains the desktop image. The format of the desktop image is always <see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutputDuplication::GetDesc']/*"/>	
            <unmanaged>void IDXGIOutputDuplication::GetDesc([Out] DXGI_OUTDUPL_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.OutputDuplication.AcquireNextFrame(System.Int32,SharpDX.DXGI.OutduplFrameInformation@,SharpDX.DXGI.Resource@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="timeoutInMilliseconds"><para>The time-out interval, in milliseconds. This interval specifies the amount of time that this method waits for a new frame before it returns to the caller.  This method returns if the interval elapses, and a new desktop image is not available.</para> <para>For more information about the time-out interval, see Remarks.</para></param>	
            <param name="frameInfoRef"><para>A reference to a memory location that receives the <see cref="T:SharpDX.DXGI.OutduplFrameInformation"/> structure that describes timing and presentation statistics for a frame.</para></param>	
            <param name="desktopResourceOut"><para>A reference to a variable that receives the <see cref="T:SharpDX.DXGI.Resource"/> interface of the surface that contains the desktop bitmap.</para></param>	
            <returns>AcquireNextFrame returns:<see cref="F:SharpDX.Result.Ok"/> if it successfully received the next desktop image. <see cref="F:SharpDX.DXGI.DXGIError.AccessLost"/> if the desktop duplication interface is invalid. The desktop duplication interface typically becomes invalid when a different type of image is displayed on the desktop.  Examples of this situation are:  Desktop switch Mode change Switch from DWM on, DWM off, or other full-screen application In this situation, the application must release the <see cref="T:SharpDX.DXGI.OutputDuplication"/> interface and create a new <see cref="T:SharpDX.DXGI.OutputDuplication"/> for the new content. <see cref="F:SharpDX.DXGI.DXGIError.WaitTimeout"/> if the time-out interval elapsed before the next desktop frame was available. <see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/> if the application called AcquireNextFrame without releasing the previous frame. E_INVALIDARG if one of the parameters to AcquireNextFrame is incorrect; for example, if pFrameInfo is <c>null</c>. Possibly other error codes that are described in the DXGI_ERROR topic.</returns>	
            <remarks>	
            When AcquireNextFrame returns successfully, the calling application can access the desktop image that AcquireNextFrame returns in the variable at ppDesktopResource.	
            If the caller specifies a zero time-out interval in the TimeoutInMilliseconds parameter, AcquireNextFrame verifies whether there is a new desktop image available, returns immediately, and indicates its outcome with the return value.  If the caller specifies an INFINITE time-out interval in the TimeoutInMilliseconds parameter, the time-out interval never elapses.Note??You cannot cancel the wait that you specified in the TimeoutInMilliseconds parameter. Therefore, if you must periodically check for other conditions (for example, a terminate signal), you should specify a non-INFINITE time-out interval. After the time-out interval elapses, you can check for these other conditions and then call AcquireNextFrame again to wait for the next frame.AcquireNextFrame acquires a new desktop frame when the operating system either updates the desktop bitmap image or changes the shape or position of a hardware reference.  The new frame that AcquireNextFrame acquires might have only the desktop image updated, only the reference shape or position updated, or both.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutputDuplication::AcquireNextFrame']/*"/>	
            <unmanaged>HRESULT IDXGIOutputDuplication::AcquireNextFrame([In] unsigned int TimeoutInMilliseconds,[Out] DXGI_OUTDUPL_FRAME_INFO* pFrameInfo,[Out] IDXGIResource** ppDesktopResource)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.OutputDuplication.GetFrameDirtyRects(System.Int32,SharpDX.Rectangle[],System.Int32@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="dirtyRectsBufferSize"><para>The size in bytes of the buffer that the caller passed to the  pDirtyRectsBuffer parameter.</para></param>	
            <param name="dirtyRectsBufferRef"><para>A reference to an array of <see cref="T:SharpDX.Rectangle"/> structures  that identifies the dirty rectangle regions for the desktop frame.</para></param>	
            <param name="dirtyRectsBufferSizeRequiredRef"><para>Pointer to a variable that receives the number of bytes that  GetFrameDirtyRects needs to store information about dirty regions in the buffer at  pDirtyRectsBuffer.</para> <para>For more information about returning the required buffer size, see Remarks.</para></param>	
            <returns>GetFrameDirtyRects returns:<see cref="F:SharpDX.Result.Ok"/> if it successfully retrieved information about dirty rectangles. <see cref="F:SharpDX.DXGI.DXGIError.AccessLost"/> if the desktop duplication interface is invalid. The desktop duplication  interface typically becomes invalid when a different type of image is displayed on the desktop. Examples of  this situation are:   Desktop switch Mode change Switch from DWM on, DWM off, or other full-screen application  In this situation, the application must release the  <see cref="T:SharpDX.DXGI.OutputDuplication"/> interface and  create a new  <see cref="T:SharpDX.DXGI.OutputDuplication"/> for the new  content. <see cref="F:SharpDX.DXGI.DXGIError.MoreData"/> if the buffer that the calling application provided was not big enough. <see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/> if the application called  GetFrameDirtyRects without owning the desktop image. E_INVALIDARG if one of the parameters to  GetFrameDirtyRects is incorrect; for example, if pDirtyRectsBuffer is <c>null</c>. Possibly other error codes that are described in the DXGI_ERROR topic.</returns>	
            <remarks>	
            GetFrameDirtyRects stores a size value in the variable at pDirtyRectsBufferSizeRequired. This  value specifies the number of bytes that GetFrameDirtyRects needs to store information about dirty regions. You can use this value  in the following situations to determine the amount of memory to allocate for future buffers that you pass to pDirtyRectsBuffer:GetFrameDirtyRects fails with <see cref="F:SharpDX.DXGI.DXGIError.MoreData"/> because the buffer is not big enough. GetFrameDirtyRects supplies a buffer that is bigger than necessary. The size value returned at  pDirtyRectsBufferSizeRequired informs the caller how much buffer space was actually  used compared to how much buffer space the caller allocated and specified in the  DirtyRectsBufferSize parameter.The caller can also use the value returned at pDirtyRectsBufferSizeRequired to  determine the number of RECTs returned in the pDirtyRectsBuffer array.The buffer contains the list of dirty RECTs for the current frame.Note??To produce a visually accurate copy of the desktop, an application must first process all move RECTs before  it processes dirty RECTs.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutputDuplication::GetFrameDirtyRects']/*"/>	
            <unmanaged>HRESULT IDXGIOutputDuplication::GetFrameDirtyRects([In] unsigned int DirtyRectsBufferSize,[Out, Buffer] RECT* pDirtyRectsBuffer,[Out] unsigned int* pDirtyRectsBufferSizeRequired)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.OutputDuplication.GetFrameMoveRects(System.Int32,SharpDX.DXGI.OutduplMoveRect[],System.Int32@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="moveRectsBufferSize"><para>The size in bytes of the buffer that the caller passed to the  pMoveRectBuffer parameter.</para></param>	
            <param name="moveRectBufferRef"><para>A reference to an array of  <see cref="T:SharpDX.DXGI.OutduplMoveRect"/> structures  that identifies the moved rectangle regions for the desktop frame.</para></param>	
            <param name="moveRectsBufferSizeRequiredRef"><para>Pointer to a variable that receives the number of bytes that  GetFrameMoveRects needs to store information about moved regions in the buffer at pMoveRectBuffer.</para> <para>For more information about returning the required buffer size, see Remarks.</para></param>	
            <returns>GetFrameMoveRects returns:<see cref="F:SharpDX.Result.Ok"/> if it successfully retrieved information about moved rectangles. <see cref="F:SharpDX.DXGI.DXGIError.AccessLost"/> if the desktop duplication interface is invalid. The desktop duplication interface typically becomes invalid when a different type of image is displayed on the desktop.  Examples of this situation are:   Desktop switch Mode change Switch from DWM on, DWM off, or other full-screen application  In this situation, the application must release the  <see cref="T:SharpDX.DXGI.OutputDuplication"/> interface and  create a new <see cref="T:SharpDX.DXGI.OutputDuplication"/> for the new content. <see cref="F:SharpDX.DXGI.DXGIError.MoreData"/> if the buffer that the calling application provided  is not big enough. <see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/> if the application called  GetFrameMoveRects without owning the desktop image. E_INVALIDARG if one of the parameters to  GetFrameMoveRects is incorrect; for example, if  pMoveRectBuffer is <c>null</c>. Possibly other error codes that are described in the  DXGI_ERROR topic.</returns>	
            <remarks>	
            GetFrameMoveRects stores a size value in the variable at pMoveRectsBufferSizeRequired. This  value specifies the number of bytes that GetFrameMoveRects needs to store information about moved regions. You can use  this value in the following situations to determine the amount of memory to allocate for future buffers that you pass to pMoveRectBuffer:GetFrameMoveRects fails with <see cref="F:SharpDX.DXGI.DXGIError.MoreData"/> because the buffer is not big enough. GetFrameMoveRects supplies a buffer that is bigger than necessary. The size value returned at pMoveRectsBufferSizeRequired informs the caller how much buffer space was actually used compared to how much buffer space the caller allocated and specified in the  MoveRectsBufferSize parameter.The caller can also use the value returned at pMoveRectsBufferSizeRequired to determine the number of <see cref="T:SharpDX.DXGI.OutduplMoveRect"/> structures returned.The buffer contains the list of move RECTs for the current frame.Note??To produce a visually accurate copy of the desktop, an application must first process all move RECTs before it processes dirty RECTs.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutputDuplication::GetFrameMoveRects']/*"/>	
            <unmanaged>HRESULT IDXGIOutputDuplication::GetFrameMoveRects([In] unsigned int MoveRectsBufferSize,[Out, Buffer] DXGI_OUTDUPL_MOVE_RECT* pMoveRectBuffer,[Out] unsigned int* pMoveRectsBufferSizeRequired)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.OutputDuplication.GetFramePointerShape(System.Int32,System.IntPtr,System.Int32@,SharpDX.DXGI.OutduplPointerShapeInformation@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="pointerShapeBufferSize"><para>The size in bytes of the buffer that the caller passed to the  pPointerShapeBuffer parameter.</para></param>	
            <param name="pointerShapeBufferRef"><para>A reference to a buffer to which GetFramePointerShape copies and returns pixel data for the new reference shape.</para></param>	
            <param name="pointerShapeBufferSizeRequiredRef"><para>Pointer to a variable that receives the number of bytes that GetFramePointerShape needs to store the new reference shape pixel data in the buffer at pPointerShapeBuffer.</para> <para>For more information about returning the required buffer size, see Remarks.</para></param>	
            <param name="pointerShapeInfoRef"><para>Pointer to a <see cref="T:SharpDX.DXGI.OutduplPointerShapeInformation"/> structure that receives the reference shape information.</para></param>	
            <returns>GetFramePointerShape returns:<see cref="F:SharpDX.Result.Ok"/> if it successfully retrieved information about the new reference shape. <see cref="F:SharpDX.DXGI.DXGIError.AccessLost"/> if the desktop duplication interface is invalid. The desktop duplication interface typically becomes invalid when a different type of image is displayed on the desktop.  Examples of this situation are:  Desktop switch Mode change Switch from DWM on, DWM off, or other full-screen application In this situation, the application must release the <see cref="T:SharpDX.DXGI.OutputDuplication"/> interface and create a new <see cref="T:SharpDX.DXGI.OutputDuplication"/> for the new content. <see cref="F:SharpDX.DXGI.DXGIError.MoreData"/> if the buffer that the calling application provided was not big enough. <see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/> if the application called GetFramePointerShape without owning the desktop image. E_INVALIDARG if one of the parameters to GetFramePointerShape is incorrect; for example, if pPointerShapeInfo is <c>null</c>. Possibly other error codes that are described in the DXGI_ERROR topic.</returns>	
            <remarks>	
            GetFramePointerShape stores a size value in the variable at pPointerShapeBufferSizeRequired. This  value specifies the number of bytes that pPointerShapeBufferSizeRequired needs to store the new reference shape pixel data. You can use the value in the following situations to determine the amount of memory to allocate for future buffers that you pass to pPointerShapeBuffer:GetFramePointerShape fails with <see cref="F:SharpDX.DXGI.DXGIError.MoreData"/> because the buffer is not big enough. GetFramePointerShape supplies a bigger than necessary buffer. The size value returned at pPointerShapeBufferSizeRequired informs the caller how much buffer space was actually used compared to how much buffer space the caller allocated and specified in the  PointerShapeBufferSize parameter.The pPointerShapeInfo parameter describes the new reference shape.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutputDuplication::GetFramePointerShape']/*"/>	
            <unmanaged>HRESULT IDXGIOutputDuplication::GetFramePointerShape([In] unsigned int PointerShapeBufferSize,[Out, Buffer] void* pPointerShapeBuffer,[Out] unsigned int* pPointerShapeBufferSizeRequired,[Out] DXGI_OUTDUPL_POINTER_SHAPE_INFO* pPointerShapeInfo)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.OutputDuplication.MapDesktopSurface(SharpDX.DXGI.MappedRect@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="lockedRectRef"><para>A reference to a <see cref="T:SharpDX.DXGI.MappedRect"/> structure that receives the surface data that the CPU needs to directly access the surface data. </para></param>	
            <returns>MapDesktopSurface returns:<see cref="F:SharpDX.Result.Ok"/> if it successfully retrieved the surface data. <see cref="F:SharpDX.DXGI.DXGIError.AccessLost"/> if the desktop duplication interface is invalid. The desktop duplication interface typically becomes invalid when a different type of image is displayed on the desktop.  Examples of this situation are:  Desktop switch Mode change Switch from DWM on, DWM off, or other full-screen application In this situation, the application must release the <see cref="T:SharpDX.DXGI.OutputDuplication"/> interface and create a new <see cref="T:SharpDX.DXGI.OutputDuplication"/> for the new content. <see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/> if the application already has an outstanding map on the desktop image.  The application must call UnMapDesktopSurface before it calls MapDesktopSurface again. <see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/> is also returned if the application did not own the desktop image when it called MapDesktopSurface. <see cref="F:SharpDX.DXGI.DXGIError.Unsupported"/> if the desktop image is not in system memory. In this situation, the application must first transfer the image to a staging surface and then lock the image by calling the <see cref="M:SharpDX.DXGI.Surface.Map(SharpDX.DXGI.MappedRect@,System.Int32)"/> method. E_INVALIDARG if the pLockedRect parameter is incorrect; for example, if pLockedRect is <c>null</c>. Possibly other error codes that are described in the DXGI_ERROR topic.</returns>	
            <remarks>	
            You can successfully call MapDesktopSurface if the  DesktopImageInSystemMemeory member of the <see cref="T:SharpDX.DXGI.OutduplDescription"/> structure is set to TRUE. If DesktopImageInSystemMemeory is <see cref="F:SharpDX.Result.False"/>, MapDesktopSurface returns <see cref="F:SharpDX.DXGI.DXGIError.Unsupported"/>. Call <see cref="M:SharpDX.DXGI.OutputDuplication.GetDescription(SharpDX.DXGI.OutduplDescription@)"/> to retrieve the <see cref="T:SharpDX.DXGI.OutduplDescription"/> structure.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutputDuplication::MapDesktopSurface']/*"/>	
            <unmanaged>HRESULT IDXGIOutputDuplication::MapDesktopSurface([Out] DXGI_MAPPED_RECT* pLockedRect)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.OutputDuplication.UnMapDesktopSurface">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <returns>UnMapDesktopSurface returns:<see cref="F:SharpDX.Result.Ok"/> if it successfully completed. <see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/> if the application did not map the desktop surface by calling <see cref="M:SharpDX.DXGI.OutputDuplication.MapDesktopSurface(SharpDX.DXGI.MappedRect@)"/>. Possibly other error codes that are described in the DXGI_ERROR topic.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutputDuplication::UnMapDesktopSurface']/*"/>	
            <unmanaged>HRESULT IDXGIOutputDuplication::UnMapDesktopSurface()</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.OutputDuplication.ReleaseFrame">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <returns>ReleaseFrame returns:<see cref="F:SharpDX.Result.Ok"/> if it successfully completed. <see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/> if the application already released the frame. <see cref="F:SharpDX.DXGI.DXGIError.AccessLost"/> if the desktop duplication interface is invalid. The desktop duplication interface typically becomes invalid when a different type of image is displayed on the desktop.  Examples of this situation are:  Desktop switch Mode change Switch from DWM on, DWM off, or other full-screen application In this situation, the application must release the <see cref="T:SharpDX.DXGI.OutputDuplication"/> interface and create a new <see cref="T:SharpDX.DXGI.OutputDuplication"/> for the new content. Possibly other error codes that are described in the DXGI_ERROR topic.</returns>	
            <remarks>	
            The application must release the frame before it acquires the next frame.  After the frame is released, the surface that contains the desktop bitmap becomes invalid; you will not be able to use the surface in a DirectX graphics operation.For performance reasons, we recommend that you release the frame just before you call the <see cref="M:SharpDX.DXGI.OutputDuplication.AcquireNextFrame(System.Int32,SharpDX.DXGI.OutduplFrameInformation@,SharpDX.DXGI.Resource@)"/> method to acquire the next frame.  When the client does not own the frame, the operating system copies all desktop updates to the surface. This can result in wasted GPU cycles if the operating system updates the same region for each frame that occurs.  When the client acquires the frame, the client is aware of only the final update to this region; therefore, any overlapping updates during previous frames are wasted. When the client acquires a frame, the client owns the surface; therefore, the operating system can track only the updated regions and cannot copy desktop updates to the surface. Because of this behavior, we recommend that you minimize the time between the call to release the current frame and the call to acquire the next frame.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutputDuplication::ReleaseFrame']/*"/>	
            <unmanaged>HRESULT IDXGIOutputDuplication::ReleaseFrame()</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.OutputDuplication.MapDesktopSurface">
            <unmanaged>HRESULT IDXGIOutputDuplication::MapDesktopSurface([Out] DXGI_MAPPED_RECT* pLockedRect)</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.OutputDuplication.Description">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            After an application creates an <see cref="T:SharpDX.DXGI.OutputDuplication"/> interface, it calls GetDesc to retrieve the dimensions of the surface that contains the desktop image. The format of the desktop image is always <see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutputDuplication::GetDesc']/*"/>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged>void IDXGIOutputDuplication::GetDesc([Out] DXGI_OUTDUPL_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.Resource">
            <summary>	
            An <see cref="T:SharpDX.DXGI.Resource"/> interface allows resource sharing and identifies the memory that a resource resides in.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource']/*"/>	
            <unmanaged>IDXGIResource</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Resource.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Resource"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Resource.GetSharedHandle(System.IntPtr@)">
            <summary>	
            [Starting with Direct3D 11.1, we recommend not to use GetSharedHandle anymore to retrieve the handle to a shared resource. Instead, use <see cref="M:SharpDX.DXGI.Resource1.CreateSharedHandle(System.Nullable{SharpDX.Win32.SecurityAttributes},System.Int32,System.String,System.IntPtr@)"/> to get a handle for sharing. To use <see cref="M:SharpDX.DXGI.Resource1.CreateSharedHandle(System.Nullable{SharpDX.Win32.SecurityAttributes},System.Int32,System.String,System.IntPtr@)"/>, you  must create the resource as shared and specify that it uses NT handles (that is, you set the <see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.SharedNthandle"/> flag). We also recommend that you create shared resources that use NT handles so you can use CloseHandle, DuplicateHandle, and so on on those shared resources.]	
            </summary>	
            <param name="sharedHandleRef">No documentation.</param>	
            <returns>Returns one of the DXGI_ERROR values.</returns>	
            <remarks>	
            You can pass the handle that  GetSharedHandle returns in a call to the <see cref="!:SharpDX.Direct3D11.Device.OpenSharedResource"/> method to give a device access to a shared resource that you created on a different device.GetSharedHandle doesn't always return a handle. GetSharedHandle only returns the handle when you  created the resource as shared (that is, you set the <see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.Shared"/> or <see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.SharedKeyedmutex"/> flag).The handle that  GetSharedHandle returns is not an NT handle. Therefore, don't use the handle with CloseHandle, DuplicateHandle, and so on. The creator of a shared resource must not destroy the resource until all entities that  opened the resource have destroyed the resource. The validity of the handle is tied to the lifetime of the underlying video memory. If no resource objects exist on any devices that refer to this resource, the handle is no longer valid. To extend the lifetime of the handle and video memory, you must open the shared resource on a device.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource::GetSharedHandle']/*"/>	
            <unmanaged>HRESULT IDXGIResource::GetSharedHandle([Out] void** pSharedHandle)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Resource.GetUsage(System.Int32@)">
            <summary>	
            Get the expected resource usage.	
            </summary>	
            <param name="usageRef"><para>A reference to a usage flag (see DXGI_USAGE). For Direct3D 10, a surface can be used as a shader input or a render-target output.</para></param>	
            <returns>Returns one of the following DXGI_ERROR.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource::GetUsage']/*"/>	
            <unmanaged>HRESULT IDXGIResource::GetUsage([Out] unsigned int* pUsage)</unmanaged>	
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpDX.DXGI.Resource.SetEvictionPriority(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:SharpDX.DXGI.Resource.GetEvictionPriority(System.Int32@)" -->
        <member name="P:SharpDX.DXGI.Resource.SharedHandle">
            <summary>	
            [Starting with Direct3D 11.1, we recommend not to use GetSharedHandle anymore to retrieve the handle to a shared resource. Instead, use <see cref="M:SharpDX.DXGI.Resource1.CreateSharedHandle(System.Nullable{SharpDX.Win32.SecurityAttributes},System.Int32,System.String,System.IntPtr@)"/> to get a handle for sharing. To use <see cref="M:SharpDX.DXGI.Resource1.CreateSharedHandle(System.Nullable{SharpDX.Win32.SecurityAttributes},System.Int32,System.String,System.IntPtr@)"/>, you  must create the resource as shared and specify that it uses NT handles (that is, you set the <see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.SharedNthandle"/> flag). We also recommend that you create shared resources that use NT handles so you can use CloseHandle, DuplicateHandle, and so on on those shared resources.]	
            </summary>	
            <remarks>	
            You can pass the handle that  GetSharedHandle returns in a call to the <see cref="!:SharpDX.Direct3D11.Device.OpenSharedResource"/> method to give a device access to a shared resource that you created on a different device.GetSharedHandle doesn't always return a handle. GetSharedHandle only returns the handle when you  created the resource as shared (that is, you set the <see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.Shared"/> or <see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.SharedKeyedmutex"/> flag).The handle that  GetSharedHandle returns is not an NT handle. Therefore, don't use the handle with CloseHandle, DuplicateHandle, and so on. The creator of a shared resource must not destroy the resource until all entities that  opened the resource have destroyed the resource. The validity of the handle is tied to the lifetime of the underlying video memory. If no resource objects exist on any devices that refer to this resource, the handle is no longer valid. To extend the lifetime of the handle and video memory, you must open the shared resource on a device.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource::GetSharedHandle']/*"/>	
            <unmanaged>GetSharedHandle</unmanaged>	
            <unmanaged>HRESULT IDXGIResource::GetSharedHandle([Out] void** pSharedHandle)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.Resource.Usage">
            <summary>	
            Get the expected resource usage.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource::GetUsage']/*"/>	
            <unmanaged>GetUsage</unmanaged>	
            <unmanaged>HRESULT IDXGIResource::GetUsage([Out] unsigned int* pUsage)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.Resource.EvictionPriority">
            <summary>	
            Get the eviction priority.	
            </summary>	
            <remarks>	
            The eviction priority is a memory-management variable that is used by DXGI to determine how to manage overcommitted memory.Priority levels other than the defined values are used when appropriate. For example, a resource with a priority level of 0x78000001 indicates that the resource is slightly above normal.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource::GetEvictionPriority']/*"/>	
            <unmanaged>GetEvictionPriority</unmanaged>	
            <unmanaged>HRESULT IDXGIResource::GetEvictionPriority([Out] unsigned int* pEvictionPriority)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.Resource1">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource1']/*"/>	
            <unmanaged>IDXGIResource1</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Resource1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Resource1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Resource1.CreateSubresourceSurface(System.Int32,SharpDX.DXGI.Surface2@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="index"><para>The index of the subresource surface object to enumerate.</para></param>	
            <param name="surfaceOut"><para>The address of a reference to a <see cref="T:SharpDX.DXGI.Surface2"/> interface that represents the created subresource surface object at the position specified by the index parameter.</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the following values:<see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/> if the index is out of range or if the subresource is not a valid surface. E_OUTOFMEMORY if insufficient memory is available to create the subresource surface object.A subresource is a valid surface if the original resource would have been a valid surface had its array size been equal to 1.</returns>	
            <remarks>	
            Subresource surface objects implement the <see cref="T:SharpDX.DXGI.Surface2"/> interface, which inherits from  <see cref="T:SharpDX.DXGI.Surface1"/> and indirectly <see cref="T:SharpDX.DXGI.Surface"/>.  Therefore, the GDI-interoperable methods of <see cref="T:SharpDX.DXGI.Surface1"/> work if the original resource interface object was created with the GDI-interoperable flag (<see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.GdiCompatible"/>).CreateSubresourceSurface creates a subresource surface that is based on the resource interface on which CreateSubresourceSurface is called. For example, if the original resource interface object is a 2D texture, the created subresource surface is also a 2D texture.You can use CreateSubresourceSurface to create parts of  a stereo resource so you can use Direct2D on either the left or right part of the stereo resource.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource1::CreateSubresourceSurface']/*"/>	
            <unmanaged>HRESULT IDXGIResource1::CreateSubresourceSurface([In] unsigned int index,[Out] IDXGISurface2** ppSurface)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Resource1.CreateSharedHandle(System.Nullable{SharpDX.Win32.SecurityAttributes},System.Int32,System.String,System.IntPtr@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="attributesRef"><para>A reference to a <see cref="T:SharpDX.Win32.SecurityAttributes"/> structure that contains two separate but related data members: an optional security descriptor, and a Boolean  value that determines whether child processes can inherit the returned handle.</para> <para>Set this parameter to <c>null</c> if you want child processes that the  application might create to not  inherit  the handle returned by  CreateSharedHandle, and if you want the resource that is associated with the returned handle to get a default security  descriptor.</para> <para>The lpSecurityDescriptor member of the structure specifies a  SECURITY_DESCRIPTOR for the resource. Set  this member to <c>null</c> if you want the runtime to assign a default security descriptor to the resource that is associated with the returned handle.</para></param>	
            <param name="dwAccess"><para>The requested access rights to the resource.  In addition to the generic access rights, DXGI defines the following values:</para>  DXGI_SHARED_RESOURCE_READ ( 0x80000000L ) - specifies read access to the resource. DXGI_SHARED_RESOURCE_WRITE ( 1 ) - specifies  write access to the resource.  <para>You can combine these values by using a bitwise OR operation.</para></param>	
            <param name="lpName"><para>The name of the resource to share. You will need the  resource name if you  call the <see cref="!:SharpDX.Direct3D11.Device1.OpenSharedResourceByName"/> method to access the shared resource by name. If you instead  call the <see cref="!:SharpDX.Direct3D11.Device1.OpenSharedResource1"/> method to access the shared resource by handle, set this parameter to <c>null</c>.</para></param>	
            <param name="handleRef"><para>A reference to a variable that receives the NT HANDLE value to the resource to share.  You can  use this handle in calls to access the resource.</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the following values:<see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/> if one of the parameters is invalid. E_OUTOFMEMORY if sufficient memory is not available to create the handle. Possibly other error codes that are described in the DXGI_ERROR topic.</returns>	
            <remarks>	
            If you  created the resource as shared and specified that it uses NT handles (that is, you set the <see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.SharedNthandle"/> flag), you must use CreateSharedHandle to get a handle for sharing.  In this situation, you cannot use the <see cref="M:SharpDX.DXGI.Resource.GetSharedHandle(System.IntPtr@)"/> method because it will fail.  Similarly, if you  created the resource as shared and did not specify that it uses NT handles, you cannot use CreateSharedHandle to get a handle for sharing because CreateSharedHandle will fail.You can pass the handle that  CreateSharedHandle returns in a call to the <see cref="!:SharpDX.Direct3D11.Device1.OpenSharedResourceByName"/> or <see cref="!:SharpDX.Direct3D11.Device1.OpenSharedResource1"/> method to give a device access to a shared resource that you created on a different device.CreateSharedHandle only returns the NT handle when you  created the resource as shared (that is, you set the <see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.SharedNthandle"/> and <see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.SharedKeyedmutex"/> flags).Because the handle that  CreateSharedHandle returns is an NT handle, you can use the handle with CloseHandle, DuplicateHandle, and so on. You can call CreateSharedHandle only once for a shared resource; later calls fail.  If you need more handles to the same shared resource, call DuplicateHandle. When you no longer need the shared resource handle, call CloseHandle to close the handle, in order to avoid memory leaks.The creator of a shared resource must not destroy the resource until all entities that  opened the resource have destroyed the resource. The validity of the handle is tied to the lifetime of the underlying video memory. If no resource objects exist on any devices that refer to this resource, the handle is no longer valid. To extend the lifetime of the handle and video memory, you must open the shared resource on a device.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource1::CreateSharedHandle']/*"/>	
            <unmanaged>HRESULT IDXGIResource1::CreateSharedHandle([In, Optional] const SECURITY_ATTRIBUTES* pAttributes,[In] unsigned int dwAccess,[In, Optional] const wchar_t* lpName,[Out] void** pHandle)</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.Surface">
            <summary>	
            The  <see cref="T:SharpDX.DXGI.Surface"/> interface implements methods for image-data objects.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface']/*"/>	
            <unmanaged>IDXGISurface</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Surface.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Surface"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Surface.GetDescription(SharpDX.DXGI.SurfaceDescription@)">
            <summary>	
            Get a description of the surface.	
            </summary>	
            <param name="descRef"><para>A reference to the surface description (see <see cref="T:SharpDX.DXGI.SurfaceDescription"/>).</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the error codes that are described in the DXGI_ERROR topic.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface::GetDesc']/*"/>	
            <unmanaged>HRESULT IDXGISurface::GetDesc([Out] DXGI_SURFACE_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Surface.Map(SharpDX.DXGI.MappedRect@,System.Int32)">
            <summary>	
            Get a reference to the data contained in the surface, and deny GPU access to the surface.	
            </summary>	
            <param name="lockedRectRef"><para>A reference to the surface data (see <see cref="T:SharpDX.DXGI.MappedRect"/>).</para></param>	
            <param name="mapFlags"><para>CPU read-write flags. These flags can be combined with a logical OR. </para>  <see cref="F:SharpDX.DXGI.MapFlags.Read"/> - Allow CPU read access. <see cref="F:SharpDX.DXGI.MapFlags.Write"/> - Allow CPU write access. <see cref="F:SharpDX.DXGI.MapFlags.Discard"/> - Discard the previous contents of a resource when it is mapped.</param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the error codes that are described in the DXGI_ERROR topic.</returns>	
            <remarks>	
            Use <see cref="M:SharpDX.DXGI.Surface.Map(SharpDX.DXGI.MappedRect@,System.Int32)"/> to access a surface from the CPU. To release a mapped surface (and allow GPU access) call <see cref="M:SharpDX.DXGI.Surface.Unmap"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface::Map']/*"/>	
            <unmanaged>HRESULT IDXGISurface::Map([Out] DXGI_MAPPED_RECT* pLockedRect,[In] unsigned int MapFlags)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Surface.Unmap">
            <summary>	
            Invalidate the reference to the surface retrieved by <see cref="M:SharpDX.DXGI.Surface.Map(SharpDX.DXGI.MappedRect@,System.Int32)"/> and re-enable GPU access to the resource.	
            </summary>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the error codes that are described in the DXGI_ERROR topic.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface::Unmap']/*"/>	
            <unmanaged>HRESULT IDXGISurface::Unmap()</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Surface.Map(SharpDX.DXGI.MapFlags)">
            <summary>
            Acquires access to the surface data.
            </summary>
            <param name="flags">Flags specifying CPU access permissions.</param>
            <returns>A <see cref="T:SharpDX.DataRectangle" /> for accessing the mapped data, or <c>null</c> on failure.</returns>.
        </member>
        <member name="M:SharpDX.DXGI.Surface.Map(SharpDX.DXGI.MapFlags,SharpDX.DataStream@)">
            <summary>
            Acquires access to the surface data.
            </summary>
            <param name="flags">Flags specifying CPU access permissions.</param>
            <returns>A <see cref="T:SharpDX.DataRectangle" /> for accessing the mapped data, or <c>null</c> on failure.</returns>.
        </member>
        <member name="M:SharpDX.DXGI.Surface.FromSwapChain(SharpDX.DXGI.SwapChain,System.Int32)">
            <summary>
            Gets a swap chain back buffer.
            </summary>
            <param name="swapChain">The swap chain to get the buffer from.</param>
            <param name="index">The index of the desired buffer.</param>
            <returns>The buffer interface, or <c>null</c> on failure.</returns>
        </member>
        <member name="P:SharpDX.DXGI.Surface.Description">
            <summary>	
            Get a description of the surface.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface::GetDesc']/*"/>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged>HRESULT IDXGISurface::GetDesc([Out] DXGI_SURFACE_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.Surface1">
            <summary>	
            The <see cref="T:SharpDX.DXGI.Surface1"/> interface extends the <see cref="T:SharpDX.DXGI.Surface"/> by adding support for using Windows Graphics Device Interface (GDI) to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface1']/*"/>	
            <unmanaged>IDXGISurface1</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Surface1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Surface1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Surface1.GetDC(System.Boolean)">
            <summary>	
            Returns a device context (DC) that allows you to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface using Windows Graphics Device Interface (GDI).	
            </summary>	
            <param name="discard"><para>A Boolean value that specifies whether to preserve Direct3D contents in the GDI DC. TRUE directs the runtime not to preserve Direct3D contents in the GDI DC; that is, the runtime discards the Direct3D contents. <see cref="F:SharpDX.Result.False"/> guarantees that Direct3D contents are available in the GDI DC.</para></param>	
            <returns><para>A reference to an <see cref="T:System.IntPtr"/> handle that represents the current device context for GDI rendering.</para></returns>	
            <remarks>	
            This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).After you use the GetDC method to retrieve a DC, you can render to the DXGI surface by using GDI.   The GetDC method readies the surface for GDI rendering and allows inter-operation between DXGI and GDI technologies.Keep the following in mind when using this method:You must create the surface by using the <see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.GdiCompatible"/> flag for a surface or by using the <see cref="F:SharpDX.DXGI.SwapChainFlags.GdiCompatible"/> flag for swap chains,  otherwise this method fails. You must release the device and call the <see cref="M:SharpDX.DXGI.Surface1.ReleaseDC_(System.Nullable{SharpDX.Rectangle})"/> method before you issue any new Direct3D commands. This method fails if an outstanding DC has already been created by this method. The format for the surface or swap chain must be <see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb"/> or <see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/>. On GetDC, the render target in the output merger of the Direct3D pipeline is unbound from the surface.   You must call the <see cref="!:SharpDX.Direct3D11.OutputMergerStage.SetRenderTargets"/> method on the device prior to Direct3D rendering after GDI rendering. Prior to resizing buffers you must release all outstanding DCs.You can also call GetDC on the back buffer at index 0 of a swap chain by obtaining an <see cref="T:SharpDX.DXGI.Surface1"/> from the swap chain.   The following code illustrates the process.<code>	
             <see cref="T:SharpDX.DXGI.SwapChain"/>* g_pSwapChain = <c>null</c>;	
            <see cref="T:SharpDX.DXGI.Surface1"/>* g_pSurface1 = <c>null</c>;	
            ...	
            //Setup the device and and swapchain	
            g_pSwapChain-&gt;GetBuffer(0, __uuidof(<see cref="T:SharpDX.DXGI.Surface1"/>), (void**) &amp;g_pSurface1);	
            g_pSurface1-&gt;GetDC( <see cref="F:SharpDX.Result.False"/>, &amp;g_hDC );	
            ...      	
            //Draw on the DC using GDI	
            ...	
            //When finish drawing release the DC	
            g_pSurface1-&gt;ReleaseDC( <c>null</c> ); 	
            </code>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface1::GetDC']/*"/>	
            <unmanaged>HRESULT IDXGISurface1::GetDC([In] BOOL Discard,[Out] HDC* phdc)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Surface1.ReleaseDC_(System.Nullable{SharpDX.Rectangle})">
            <summary>	
            Releases the GDI device context (DC) that is associated with the current surface and allows you to use Direct3D to render.	
            </summary>	
            <param name="dirtyRectRef"><para>A reference to a <see cref="T:SharpDX.Rectangle"/> structure that identifies the dirty region of the surface.   A dirty region is any part of the surface that you used for GDI rendering and that you want to preserve.  This area is used as a performance hint to graphics subsystem in certain scenarios.  Do not use this parameter to restrict rendering to the specified rectangular region.  If you pass in <c>null</c>, ReleaseDC considers the whole surface as dirty.  Otherwise, ReleaseDC uses the area specified by the <see cref="T:SharpDX.Rectangle"/> as a performance hint to indicate what areas have been manipulated by GDI rendering.</para> <para>You can pass a reference to an empty <see cref="T:SharpDX.Rectangle"/> structure (a rectangle with no position or area) if you didn't change any content.</para></param>	
            <returns>If this method succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it returns an <see cref="T:SharpDX.Result"/> error code.</returns>	
            <remarks>	
            This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).Use the ReleaseDC method to release the DC and indicate that your application finished all GDI rendering to this surface.   You must call the ReleaseDC method before you can use Direct3D to perform additional rendering.Prior to resizing buffers you must release all outstanding DCs.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface1::ReleaseDC']/*"/>	
            <unmanaged>HRESULT IDXGISurface1::ReleaseDC([In, Optional] RECT* pDirtyRect)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Surface1.ReleaseDC">
            <summary>	
            Releases the GDI device context (DC) associated with the current surface and allows rendering using Direct3D. The whole surface to be considered dirty.
            </summary>	
            <remarks>	
            Use the ReleaseDC method to release the DC and indicate that your application has finished all GDI rendering to this surface.   You must call the ReleaseDC method before you perform addition rendering using Direct3D. Prior to resizing buffers all outstanding DCs must be released. 	
            </remarks>	
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDXGISurface1::ReleaseDC([In, Optional] RECT* pDirtyRect)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.Surface1.ReleaseDC(SharpDX.Rectangle)">
            <summary>	
            Releases the GDI device context (DC) associated with the current surface and allows rendering using Direct3D.	
            </summary>	
            <remarks>	
            Use the ReleaseDC method to release the DC and indicate that your application has finished all GDI rendering to this surface.   You must call the ReleaseDC method before you perform addition rendering using Direct3D. Prior to resizing buffers all outstanding DCs must be released. 	
            </remarks>	
            <param name="dirtyRect">A reference to a <see cref="T:SharpDX.Rectangle"/> structure that identifies the dirty region of the surface.   A dirty region is any part of the surface that you have used for GDI rendering and that you want to preserve.  This is used as a performance hint to graphics subsystem in certain scenarios.  Do not use this parameter to restrict rendering to the specified rectangular region. The area specified by the <see cref="T:SharpDX.Rectangle"/> will be used as a performance hint to indicate what areas have been manipulated by GDI rendering. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDXGISurface1::ReleaseDC([In, Optional] RECT* pDirtyRect)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.Surface2">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface2']/*"/>	
            <unmanaged>IDXGISurface2</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Surface2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Surface2"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Surface2.GetResource(System.Guid,System.IntPtr@,System.Int32@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="riid"><para>The globally unique identifier (<see cref="T:System.Guid"/>)  of the requested interface type.</para></param>	
            <param name="parentResourceOut"><para>A reference to a buffer that receives a reference to the parent resource object for the subresource surface.</para></param>	
            <param name="subresourceIndexRef"><para>A reference to a variable that receives the index of the subresource surface.</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the following values:E_NOINTERFACE if the object does not implement the <see cref="T:System.Guid"/> that the riid parameter specifies. Possibly other error codes that are described in the DXGI_ERROR topic.</returns>	
            <remarks>	
            For subresource surface objects that the <see cref="M:SharpDX.DXGI.Resource1.CreateSubresourceSurface(System.Int32,SharpDX.DXGI.Surface2@)"/> method creates, GetResource simply returns the values that were used to create the subresource surface.Current objects that implement <see cref="T:SharpDX.DXGI.Surface"/> are either resources or views.  GetResource for these objects returns ?this? or the resource that supports the view respectively.  In this situation, the subresource index is 0.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface2::GetResource']/*"/>	
            <unmanaged>HRESULT IDXGISurface2::GetResource([In] const GUID&amp; riid,[Out] void** ppParentResource,[Out] unsigned int* pSubresourceIndex)</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.SwapChain">
            <summary>	
            An <see cref="T:SharpDX.DXGI.SwapChain"/> interface implements one or more surfaces for storing rendered data before presenting it to an output.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain']/*"/>	
            <unmanaged>IDXGISwapChain</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.SwapChain"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)">
            <summary>	
            [Starting with Direct3D 11.1, we recommend not to use Present anymore to present a rendered image. Instead, use <see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,System.Int32,SharpDX.DXGI.PresentParameters)"/>.]	
            </summary>	
            <param name="syncInterval">No documentation.</param>	
            <param name="flags">No documentation.</param>	
            <returns>Possible return values include: <see cref="F:SharpDX.Result.Ok"/>, <see cref="F:SharpDX.DXGI.DXGIError.DeviceReset"/> or <see cref="F:SharpDX.DXGI.DXGIError.DeviceRemoved"/> (see DXGI_ERROR), <see cref="F:SharpDX.DXGI.DXGIStatus.Occluded"/> (see <see cref="T:SharpDX.DXGI.DXGIStatus"/>), or D3DDDIERR_DEVICEREMOVED.Note??The Present method can return either <see cref="F:SharpDX.DXGI.DXGIError.DeviceRemoved"/> or D3DDDIERR_DEVICEREMOVED if a video card has been physically removed from the computer, or a driver upgrade for the video card has occurred.</returns>	
            <remarks>	
            For the best performance when flipping swap-chain buffers in a full-screen application, see Full-Screen Application Performance Hints.Because calling Present might cause the render thread to wait on the message-pump thread, be careful when calling this method in an application that uses multiple threads. For more details, see Multithreading Considerations.<para>Differences between Direct3D 9 and Direct3D 10:</para>	
             <para>Specifying <see cref="F:SharpDX.DXGI.PresentFlags.Test"/> in the Flags parameter is analogous to IDirect3DDevice9::TestCooperativeLevel in Direct3D 9.</para>?For flip presentation model swap chains that you create with the <see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/> value set, a successful presentation unbinds back buffer 0 from the graphics pipeline, except for when you pass the <see cref="F:SharpDX.DXGI.PresentFlags.DoNotSequence"/> flag in the Flags parameter.Flip presentation model queueSuppose the following frames with sync-interval values are queued from oldest (A) to newest (E) before you call Present.A: 3, B: 0, C: 0, D: 1, E: 0When you call Present, the runtime shows frame A for 3 vertical blank intervals, then frame D for 1 vertical blank interval, and then frame E until you submit a new presentation. The runtime discards frames C and D.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::Present']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain::Present([In] unsigned int SyncInterval,[In] DXGI_PRESENT_FLAGS Flags)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.GetBuffer(System.Int32,System.Guid,System.IntPtr@)">
            <summary>	
            Accesses one of the swap-chain's back buffers.	
            </summary>	
            <param name="buffer"><para>A zero-based buffer index. </para> <para>If the swap chain's swap effect is <see cref="F:SharpDX.DXGI.SwapEffect.Discard"/>, this method can only access the first buffer; for this situation, set the index to zero.</para> <para>If the swap chain's swap effect is either <see cref="F:SharpDX.DXGI.SwapEffect.Sequential"/> or <see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/>, this method can only access read-only buffers with indexes greater than zero. Read-only back buffers have the BufferUsage member of the <see cref="T:SharpDX.DXGI.SwapChainDescription"/> or <see cref="T:SharpDX.DXGI.SwapChainDescription1"/> structure set to <see cref="F:SharpDX.DXGI.Usage.ReadOnly"/>.</para></param>	
            <param name="riid"><para>The type of interface used to manipulate the buffer. See remarks.</para></param>	
            <param name="surfaceOut"><para>A reference to a back-buffer interface.</para></param>	
            <returns>Returns one of the following DXGI_ERROR.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetBuffer']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain::GetBuffer([In] unsigned int Buffer,[In] const GUID&amp; riid,[Out] void** ppSurface)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.SetFullscreenState(System.Boolean,SharpDX.DXGI.Output)">
            <summary>	
            Sets the display state to windowed or full screen.	
            </summary>	
            <param name="fullscreen"><para>A Boolean value that specifies whether to set the display state to windowed or full screen. TRUE for full screen, and <see cref="F:SharpDX.Result.False"/> for windowed.</para></param>	
            <param name="targetRef"><para>If you pass TRUE to the Fullscreen parameter to set the display state to full screen, you can optionally set this parameter to a reference to an <see cref="T:SharpDX.DXGI.Output"/> interface for the output target that contains the swap chain. If you set this parameter to <c>null</c>, DXGI will choose the output based on the swap-chain's device and the output window's  placement. If you pass <see cref="F:SharpDX.Result.False"/> to Fullscreen, you must set this parameter to <c>null</c>.</para></param>	
            <returns>This methods returns:<see cref="F:SharpDX.Result.Ok"/> if the action succeeded and the swap chain was placed in the requested state. <see cref="F:SharpDX.DXGI.DXGIError.NotCurrentlyAvailable"/> if the action failed. There are many reasons why a windowed-mode swap chain cannot switch to full-screen mode. For instance:  The application is running over Terminal Server. The output window is occluded. The output window does not have keyboard focus. Another application is already in full-screen mode.  <para>When this error is returned, an application can continue to run in windowed mode and try to switch to full-screen mode later.</para>  <see cref="F:SharpDX.DXGI.DXGIStatus.ModeChangeInProgress"/> is returned if a fullscreen/windowed mode transition is occurring when this API is called. Other error codes if you run out of memory or encounter another unexpected fault; these codes may be treated as hard, non-continuable errors.</returns>	
            <remarks>	
            DXGI may change the display state of a swap chain in response to end user or system requests.We recommend that you create a windowed swap chain and allow the end user to change the swap chain to full screen through SetFullscreenState; that is, do not set the Windowed member of <see cref="T:SharpDX.DXGI.SwapChainDescription"/> to <see cref="F:SharpDX.Result.False"/> to force the swap chain to be full screen. However, if you create the swap chain as full screen, also provide the end user with a list of supported display modes because a swap chain that is created with an unsupported display mode might cause the display to go black and prevent the end user from seeing anything. Also, we recommend that you have a time-out confirmation screen or other fallback mechanism when you allow the end user to change display modes.Notes for Metro style appsIf a Metro style app calls SetFullscreenState to set the display state to full screen, SetFullscreenState fails with <see cref="F:SharpDX.DXGI.DXGIError.NotCurrentlyAvailable"/>.You cannot call SetFullscreenState on a windowless swap chain that you created with <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCompositionSurface(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/>.For the flip presentation model, after you transition the display state to full screen, you must call ResizeBuffers to ensure that your call to <see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,System.Int32,SharpDX.DXGI.PresentParameters)"/> succeeds.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::SetFullscreenState']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain::SetFullscreenState([In] BOOL Fullscreen,[In, Optional] IDXGIOutput* pTarget)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.GetFullscreenState(System.Boolean@,SharpDX.DXGI.Output@)">
            <summary>	
            Get the state associated with full-screen mode.	
            </summary>	
            <param name="fullscreenRef"><para>A reference to a boolean whose value is either:</para>  TRUE if the swap chain is in full-screen mode <see cref="F:SharpDX.Result.False"/> if the swap chain is in windowed mode</param>	
            <param name="targetOut"><para>A reference to the output target (see <see cref="T:SharpDX.DXGI.Output"/>) when the mode is full screen; otherwise <c>null</c>.</para></param>	
            <returns>Returns one of the following DXGI_ERROR.</returns>	
            <remarks>	
            When the swap chain is in full-screen mode, a reference to the  target output will be returned and its reference count will be incremented.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetFullscreenState']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain::GetFullscreenState([Out, Optional] BOOL* pFullscreen,[Out, Optional] IDXGIOutput** ppTarget)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.GetDescription(SharpDX.DXGI.SwapChainDescription@)">
            <summary>	
            [Starting with Direct3D 11.1, we recommend not to use GetDesc anymore to get a description of the swap chain. Instead, use <see cref="M:SharpDX.DXGI.SwapChain1.GetDescription1(SharpDX.DXGI.SwapChainDescription1@)"/>.]	
            </summary>	
            <param name="descRef">No documentation.</param>	
            <returns>Returns one of the following DXGI_ERROR.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetDesc']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain::GetDesc([Out] DXGI_SWAP_CHAIN_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,System.Int32)">
            <summary>	
            Changes the swap chain's back buffer size, format, and number of buffers. This should be called when the application window is resized.	
            </summary>	
            <param name="bufferCount"><para>The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain. This number can't be greater than DXGI_MAX_SWAP_CHAIN_BUFFERS. Set this number to zero to preserve the existing number of buffers in the swap chain. You can't specify greater than two buffers for the flip presentation model.</para></param>	
            <param name="width"><para>New width of the back buffer. If you specify zero, DXGI will use the width of the client area of the target window. You can't specify the width as zero if you called the <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCompositionSurface(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/> method to create the swap chain for a composition surface.</para></param>	
            <param name="height"><para>New height of the back buffer. If you specify zero, DXGI will use the height of the client area of the target window. You can't specify the height as zero if you called the <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCompositionSurface(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/> method to create the swap chain for a composition surface.</para></param>	
            <param name="newFormat"><para>A <see cref="T:SharpDX.DXGI.Format"/>-typed value for the new format of the back buffer. Set this value to <see cref="F:SharpDX.DXGI.Format.Unknown"/> to preserve the existing format of the back buffer. The flip presentation model supports a more restricted set of formats than the bit-block transfer (bitblt) model.</para></param>	
            <param name="swapChainFlags"><para>A combination of <see cref="T:SharpDX.DXGI.SwapChainFlags"/>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for swap-chain behavior.</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR.</returns>	
            <remarks>	
            You can't resize a swap chain unless you release all outstanding references to its back buffers. You must release all of its direct and indirect references on the back buffers in order for ResizeBuffers to succeed.Direct references are held by the application after it calls AddRef on a resource.Indirect references are held by views to a resource, binding a view of the resource to a device context,  a command list that used the resource, a command list that used a view to that resource, a command list that executed another command list that used the  resource, and so on.Before you call ResizeBuffers, ensure that the application releases all references (by calling the appropriate number of Release invocations)  on the resources, any views to the resource, and any command lists that use either the resources or views, and ensure that neither the resource nor a view is  still bound to a device context.  You can use <see cref="!:SharpDX.Direct3D11.DeviceContext.ClearState"/> to ensure that all references are released. If a view is bound to a deferred context, you must discard the partially built command list as well (by calling ClearState, <see cref="!:SharpDX.Direct3D11.DeviceContext.FinishCommandListInternal"/>, then Release on the command list).   After you call ResizeBuffers, you can re-query interfaces via <see cref="M:SharpDX.DXGI.SwapChain.GetBuffer(System.Int32,System.Guid,System.IntPtr@)"/>.For swap chains that you created with <see cref="F:SharpDX.DXGI.SwapChainFlags.GdiCompatible"/>, before you call ResizeBuffers, also call <see cref="M:SharpDX.DXGI.Surface1.ReleaseDC_(System.Nullable{SharpDX.Rectangle})"/> on the swap chain's back-buffer surface to ensure that you have no outstanding GDI device contexts (DCs) open.We recommend that you call ResizeBuffers when a client window is resized (that is, when an application receives a WM_SIZE message).The only difference between ResizeBuffers in Windows Developer Preview and ResizeBuffers in Windows?7 is with flip presentation model swap chains that you create with the <see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/> value set. In Windows Developer Preview, you must call ResizeBuffers to realize a transition between full-screen mode and windowed mode; otherwise, your next call to the Present method fails.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::ResizeBuffers']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain::ResizeBuffers([In] unsigned int BufferCount,[In] unsigned int Width,[In] unsigned int Height,[In] DXGI_FORMAT NewFormat,[In] unsigned int SwapChainFlags)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.ResizeTarget(SharpDX.DXGI.ModeDescription@)">
            <summary>	
            Resizes the output target.	
            </summary>	
            <param name="newTargetParametersRef"><para>A reference to a <see cref="T:SharpDX.DXGI.ModeDescription"/> structure that describes the mode, which specifies the new width, height, format, and refresh rate of the target.  If the format is <see cref="F:SharpDX.DXGI.Format.Unknown"/>, ResizeTarget uses the existing format. We only recommend that you use <see cref="F:SharpDX.DXGI.Format.Unknown"/> when the swap chain is in full-screen  mode as this method is not thread safe.</para></param>	
            <returns>Returns a code that indicates success or failure. <see cref="F:SharpDX.DXGI.DXGIStatus.ModeChangeInProgress"/> is returned if a fullscreen/windowed mode transition is occurring  when this API is called. See DXGI_ERROR for additional DXGI error codes.</returns>	
            <remarks>	
            ResizeTarget resizes the target window when the swap chain is in windowed mode, and changes the display mode on the target output when the swap  chain is in full-screen mode. Therefore, applications can call ResizeTarget to resize the target window (rather than a Microsoft Win32API such as SetWindowPos)  without knowledge of the swap chain display mode.If a Metro style app calls ResizeTarget, it fails with <see cref="F:SharpDX.DXGI.DXGIError.NotCurrentlyAvailable"/>.You cannot call ResizeTarget on a windowless swap chain that you created with <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCompositionSurface(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::ResizeTarget']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain::ResizeTarget([In] const DXGI_MODE_DESC* pNewTargetParameters)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.GetContainingOutput(SharpDX.DXGI.Output@)">
            <summary>	
            Get the output (the display monitor) that contains the majority of the client area of the target window.	
            </summary>	
            <param name="outputOut"><para>A reference to the output interface (see <see cref="T:SharpDX.DXGI.Output"/>).</para></param>	
            <returns>Returns one of the following DXGI_ERROR.</returns>	
            <remarks>	
            If the method succeeds, the output interface will be filled and its reference count incremented. When you are finished with it, be sure to release the interface to avoid a memory leak.The output is also owned by the adapter on which the swap chain's device was created.You cannot call GetContainingOutput on a windowless swap chain that you created with <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCompositionSurface(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetContainingOutput']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain::GetContainingOutput([Out] IDXGIOutput** ppOutput)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)">
            <summary>	
            Gets performance statistics about the last render frame.	
            </summary>	
            <param name="statsRef"><para>A reference to a <see cref="T:SharpDX.DXGI.FrameStatistics"/> structure for the frame statistics.</para></param>	
            <returns>Returns one of the DXGI_ERROR values.</returns>	
            <remarks>	
            You cannot use GetFrameStatistics for swap chains that both use the bit-block transfer (bitblt) presentation model and draw in windowed mode.You can only use GetFrameStatistics for swap chains that either use the flip presentation model or draw in full-screen mode. You set the <see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/> value in the SwapEffect member of the <see cref="T:SharpDX.DXGI.SwapChainDescription1"/> structure to specify that the swap chain uses the flip presentation model.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetFrameStatistics']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.GetLastPresentCount(System.Int32@)">
            <summary>	
            Gets the number of times  that <see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/> or <see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,System.Int32,SharpDX.DXGI.PresentParameters)"/> has been called.	
            </summary>	
            <param name="lastPresentCountRef">No documentation.</param>	
            <returns>Returns one of the DXGI_ERROR values.</returns>	
            <remarks>	
            For info about presentation statistics for a frame, see <see cref="T:SharpDX.DXGI.FrameStatistics"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetLastPresentCount']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain::GetLastPresentCount([Out] unsigned int* pLastPresentCount)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.#ctor(SharpDX.DXGI.Factory,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription)">
            <summary>	
            Creates a swap chain.	
            </summary>	
            <remarks>	
            If you attempt to create a swap chain in full-screen mode, and full-screen mode is unavailable, the swap chain will be created in windowed mode and DXGI_STATUS_OCCLUDED will be returned. If the buffer width or the buffer height are zero, the sizes will be inferred from the output window size in the swap-chain description. Since the target output cannot be chosen explicitly when the swap-chain is created, you should not create a full-screen swap chain. This can reduce presentation performance if the swap chain size and the output window size do not match. Here are two ways to ensure the sizes match:  Create a windowed swap chain and then set it full-screen using <see cref="M:SharpDX.DXGI.SwapChain.SetFullscreenState(System.Boolean,SharpDX.DXGI.Output)"/>. Save a reference to the swap-chain immediately after creation, and use it to get the output window size during a WM_SIZE event. Then resize the swap chain buffers (with <see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,System.Int32)"/>) during the transition from windowed to full-screen.  If the swap chain is in full-screen mode, before you release it, you must use {{SetFullscreenState}} to switch it to windowed mode. For more information about releasing a swap chain, see the Destroying a Swap Chain section of {{DXGI Overview}}. 	
            </remarks>	
            <param name="factory">a reference to a <see cref="T:SharpDX.DXGI.Factory"/>.</param>
            <param name="device">A reference to the device that will write 2D images to the swap chain. </param>
            <param name="description">A reference to the swap-chain description (see <see cref="T:SharpDX.DXGI.SwapChainDescription"/>).</param>
            <unmanaged>HRESULT IDXGIFactory::CreateSwapChain([In] IUnknown* pDevice,[In] DXGI_SWAP_CHAIN_DESC* pDesc,[Out] IDXGISwapChain** ppSwapChain)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.GetBackBuffer``1(System.Int32)">
            <summary>
            Access one of the swap-chain back buffers.
            </summary>
            <typeparam name="T">The interface of the surface to resolve from the back buffer</typeparam>
            <param name="index">A zero-based buffer index. If the swap effect is not DXGI_SWAP_EFFECT_SEQUENTIAL, this method only has access to the first buffer; for this case, set the index to zero.</param>
            <returns>
            Returns a reference to a back-buffer interface.
            </returns>
            <unmanaged>HRESULT IDXGISwapChain::GetBuffer([None] int Buffer,[In] GUID* riid,[Out] void** ppSurface)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain.Description">
            <summary>	
            [Starting with Direct3D 11.1, we recommend not to use GetDesc anymore to get a description of the swap chain. Instead, use <see cref="M:SharpDX.DXGI.SwapChain1.GetDescription1(SharpDX.DXGI.SwapChainDescription1@)"/>.]	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetDesc']/*"/>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged>HRESULT IDXGISwapChain::GetDesc([Out] DXGI_SWAP_CHAIN_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain.ContainingOutput">
            <summary>	
            Get the output (the display monitor) that contains the majority of the client area of the target window.	
            </summary>	
            <remarks>	
            If the method succeeds, the output interface will be filled and its reference count incremented. When you are finished with it, be sure to release the interface to avoid a memory leak.The output is also owned by the adapter on which the swap chain's device was created.You cannot call GetContainingOutput on a windowless swap chain that you created with <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCompositionSurface(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetContainingOutput']/*"/>	
            <unmanaged>GetContainingOutput</unmanaged>	
            <unmanaged>HRESULT IDXGISwapChain::GetContainingOutput([Out] IDXGIOutput** ppOutput)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain.FrameStatistics">
            <summary>	
            Gets performance statistics about the last render frame.	
            </summary>	
            <remarks>	
            You cannot use GetFrameStatistics for swap chains that both use the bit-block transfer (bitblt) presentation model and draw in windowed mode.You can only use GetFrameStatistics for swap chains that either use the flip presentation model or draw in full-screen mode. You set the <see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/> value in the SwapEffect member of the <see cref="T:SharpDX.DXGI.SwapChainDescription1"/> structure to specify that the swap chain uses the flip presentation model.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetFrameStatistics']/*"/>	
            <unmanaged>GetFrameStatistics</unmanaged>	
            <unmanaged>HRESULT IDXGISwapChain::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain.LastPresentCount">
            <summary>	
            Gets the number of times  that <see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/> or <see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,System.Int32,SharpDX.DXGI.PresentParameters)"/> has been called.	
            </summary>	
            <remarks>	
            For info about presentation statistics for a frame, see <see cref="T:SharpDX.DXGI.FrameStatistics"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetLastPresentCount']/*"/>	
            <unmanaged>GetLastPresentCount</unmanaged>	
            <unmanaged>HRESULT IDXGISwapChain::GetLastPresentCount([Out] unsigned int* pLastPresentCount)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain.IsFullScreen">
            <summary>
            Gets or sets a value indicating whether the swapchain is in fullscreen.
            </summary>
            <value>
            	<c>true</c> if this swapchain is in fullscreen; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SharpDX.DXGI.SwapChain1">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1']/*"/>	
            <unmanaged>IDXGISwapChain1</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.SwapChain1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.GetDescription1(SharpDX.DXGI.SwapChainDescription1@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="descRef"><para>A reference to a <see cref="T:SharpDX.DXGI.SwapChainDescription1"/> structure that describes the swap chain.</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise.  For a list of error codes, see DXGI_ERROR.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetDesc1']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain1::GetDesc1([Out] DXGI_SWAP_CHAIN_DESC1* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.GetFullscreenDescription(SharpDX.DXGI.SwapChainFullscreenDescription@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="descRef"><para>A reference to a <see cref="T:SharpDX.DXGI.SwapChainFullscreenDescription"/> structure that describes the full-screen swap chain.</para></param>	
            <returns>GetFullscreenDesc returns:<see cref="F:SharpDX.Result.Ok"/> if it successfully retrieved the description of the full-screen swap chain.  <see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/> for non-<see cref="T:System.IntPtr"/> swap chains or if pDesc is <c>null</c>. Possibly other error codes that are described in the DXGI_ERROR topic.</returns>	
            <remarks>	
            The semantics of GetFullscreenDesc are identical to that of the IDXGISwapchain::GetDesc method for <see cref="T:System.IntPtr"/>-based swap chains.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetFullscreenDesc']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain1::GetFullscreenDesc([Out] DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pDesc)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.GetHwnd(System.IntPtr@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="hwndRef">No documentation.</param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise.  For a list of error codes, see DXGI_ERROR.If pHwnd receives <c>null</c> (that is, the swap chain is not <see cref="T:System.IntPtr"/>-based), GetHwnd returns <see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/>.</returns>	
            <remarks>	
            Applications call the  <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullscreenDescription},SharpDX.DXGI.Output)"/> method to create a swap chain that is associated with an <see cref="T:System.IntPtr"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetHwnd']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain1::GetHwnd([Out] HWND* pHwnd)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.GetImmersiveWindow(System.Guid,System.IntPtr@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="refiid"><para>A reference to the globally unique identifier (<see cref="T:System.Guid"/>) of the IWindow object that is referenced by  the ppUnk parameter.</para></param>	
            <param name="unkOut"><para>A reference to a variable that receives a reference to the IWindow object.</para></param>	
            <returns>GetImmersiveWindow returns:<see cref="F:SharpDX.Result.Ok"/> if it successfully retrieved the underlying IWindow object.  <see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/> if ppUnk is <c>null</c>; that is, the swap chain is not associated with a IWindow object. Any <see cref="T:SharpDX.Result"/> that a call to QueryInterface to query for an IWindow object might typically return. Possibly other error codes that are described in the DXGI_ERROR topic.</returns>	
            <remarks>	
            Applications call the <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForImmersiveWindow(SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/> method to create a swap chain that is associated with an IWindow object.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetImmersiveWindow']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain1::GetImmersiveWindow([In] const GUID&amp; refiid,[Out] void** ppUnk)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.GetCompositionSurface(System.IntPtr@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="surfaceRef"><para>A reference to a variable that receives the handle to the composition windowless surface that is associated with this swap chain.  If the swap chain is not for a composition windowless surface, GetCompositionSurface returns <c>null</c>.</para></param>	
            <returns>GetCompositionSurface returns:<see cref="F:SharpDX.Result.Ok"/> if it successfully retrieved the underlying composition surface handle.  <see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/> if pSurface is <c>null</c>; that is, the swap chain is not associated with a composition surface handle. GetCompositionSurface also returns this value if the swap chain is not a windowless swap chain. E_OUTOFMEMORY if insufficient memory is available to complete the operation. Because GetCompositionSurface creates a duplicate handle, it might run out of memory and return E_OUTOFMEMORY. Possibly other error codes that are described in the DXGI_ERROR topic.</returns>	
            <remarks>	
            Applications call the <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCompositionSurface(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/> method to create a windowless swap chain.The handle that GetCompositionSurface returns is not necessarily the same as the handle that you passed to the <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCompositionSurface(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/> method.The handle that GetCompositionSurface returns has the same access attributes as the handle that DXGI owns.Note??After the calling application is finished with the pSurface handle, it must call CloseHandle to close the handle.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetCompositionSurface']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain1::GetCompositionSurface([Out] void** pSurface)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,System.Int32,SharpDX.DXGI.PresentParameters)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="syncInterval"><para>An integer that specifies how to synchronize presentation of a frame with the vertical blank.</para> <para>For the bit-block transfer (bitblt) model, values are:</para>  0 - The presentation occurs immediately, there is no synchronization. 1,2,3,4 - Synchronize presentation after the nth vertical blank.  <para>For the flip model, values are:</para>  0 - Discard this frame if you submitted a more recent presentation. n &gt; 0 - Synchronize presentation for at least n vertical blanks.  <para>For an example that shows how sync-interval values affect a flip presentation queue, see Remarks.</para> <para>If the update region straddles more than one output (each represented by <see cref="T:SharpDX.DXGI.Output1"/>), Present1 performs the synchronization to the output that contains the largest subrectangle of the target window's client area.</para></param>	
            <param name="presentFlags"><para>An integer value that contains swap-chain presentation options. These options are defined by the DXGI_PRESENT constants.</para></param>	
            <param name="presentParametersRef"><para>A reference to a <see cref="T:SharpDX.DXGI.PresentParameters"/> structure that describes updated rectangles and scroll information of the frame to present.</para></param>	
            <returns>Possible return values include: <see cref="F:SharpDX.Result.Ok"/>, <see cref="F:SharpDX.DXGI.DXGIError.DeviceRemoved"/> , <see cref="F:SharpDX.DXGI.DXGIStatus.Occluded"/>, <see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/>, or E_OUTOFMEMORY.</returns>	
            <remarks>	
            An application can use Present1 to optimize presentation by specifying scroll and dirty rectangles. When the runtime has information about these rectangles, the runtime can then perform necessary bitblts during presentation more efficiently and pass this metadata to the Desktop Window Manager (DWM). The DWM can then use the metadata to optimize presentation and pass the metadata to indirect displays and terminal servers to optimize traffic over the wire. An application must confine its modifications to only the dirty regions that it passes to Present1, as well as modify the entire dirty region to avoid undefined resource contents from being exposed.For flip presentation model swap chains that you create with the <see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/> value set, a successful presentation results in an unbind of back buffer 0 from the graphics pipeline, except for when you pass the <see cref="F:SharpDX.DXGI.PresentFlags.DoNotSequence"/> flag in the Flags parameter.Flip presentation model queueSuppose the following frames with sync-interval values are queued from oldest (A) to newest (E) before you call Present1.A: 3, B: 0, C: 0, D: 1, E: 0When you call Present1, the runtime shows frame A for 3 vertical blank intervals, then frame D for 1 vertical blank interval, and then frame E until you submit a new presentation. The runtime discards frames C and D.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::Present1']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain1::Present1([In] unsigned int SyncInterval,[In] unsigned int PresentFlags,[In] const DXGI_PRESENT_PARAMETERS* pPresentParameters)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.IsTemporaryMonoSupported_">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <returns>Indicates whether to use the swap chain in temporary mono mode. TRUE indicates that you can use temporary-mono mode; otherwise, <see cref="F:SharpDX.Result.False"/>.</returns>	
            <remarks>	
            Temporary mono is a feature where a stereo swap chain can be presented using only the content in the left buffer.  To present using the left buffer as a mono buffer, an application calls the  <see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,System.Int32,SharpDX.DXGI.PresentParameters)"/> method with the <see cref="F:SharpDX.DXGI.PresentFlags.StereoTemporaryMono"/> flag.  All windowed swap chains support temporary mono. However, full-screen swap chains optionally support temporary mono because not all hardware supports temporary mono on full-screen swap chains efficiently.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::IsTemporaryMonoSupported']/*"/>	
            <unmanaged>BOOL IDXGISwapChain1::IsTemporaryMonoSupported()</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.GetRestrictToOutput(SharpDX.DXGI.Output@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="restrictToOutputOut"><para> A reference to a buffer that receives a reference to the <see cref="T:SharpDX.DXGI.Output"/> interface for the restrict-to output. An application passes this reference to <see cref="T:SharpDX.DXGI.Output"/> in a call to the  <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullscreenDescription},SharpDX.DXGI.Output)"/>, <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForImmersiveWindow(SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/>, or  <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCompositionSurface(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/> method to create the swap chain.</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if the restrict-to output was successfully retrieved; otherwise, returns E_INVALIDARG if the reference is invalid.</returns>	
            <remarks>	
            If the method succeeds, the runtime fills the buffer at ppRestrictToOutput with a reference to the restrict-to output interface. This restrict-to output interface has its reference count incremented. When you are finished with it, be sure to release the interface to avoid a memory leak.The output is also owned by the adapter on which the swap chain's device was created.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetRestrictToOutput']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain1::GetRestrictToOutput([Out] IDXGIOutput** ppRestrictToOutput)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.SetBackgroundColor(SharpDX.Color4)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="colorRef"><para>A reference to a DXGI_RGBA structure that specifies the background color to set.</para></param>	
            <returns>SetBackgroundColor returns:<see cref="F:SharpDX.Result.Ok"/> if it successfully set the background color. E_INVALIDARG if the pColor parameter is incorrect, for example, pColor is <c>null</c> or any of the floating-point values of the members of DXGI_RGBA to which pColor points are outside the range from 0.0 through 1.0. Possibly other error codes that are described in the DXGI_ERROR topic.</returns>	
            <remarks>	
            The background color affects only swap chains that you create with <see cref="F:SharpDX.DXGI.Scaling.None"/> in windowed mode. You pass this value in a call to <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullscreenDescription},SharpDX.DXGI.Output)"/>, <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForImmersiveWindow(SharpDX.ComObject,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/>, or  <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCompositionSurface(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/>. Typically, the background color is not visible unless the swap-chain contents are smaller than the destination window.When you set the background color, it is not immediately realized. It takes effect in conjunction with your next call to the <see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,System.Int32,SharpDX.DXGI.PresentParameters)"/> method. The DXGI_PRESENT flags that you pass to <see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,System.Int32,SharpDX.DXGI.PresentParameters)"/> can help achieve the effect that you require. For example, if you call SetBackgroundColor and then call <see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,System.Int32,SharpDX.DXGI.PresentParameters)"/> with the Flags parameter set to <see cref="F:SharpDX.DXGI.PresentFlags.DoNotSequence"/>, you change only the background color without changing the displayed contents of the swap chain.When you call the <see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,System.Int32,SharpDX.DXGI.PresentParameters)"/> method to display contents of the swap chain, <see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,System.Int32,SharpDX.DXGI.PresentParameters)"/> uses the <see cref="T:SharpDX.DXGI.AlphaMode"/> value that is specified in the AlphaMode member of the <see cref="T:SharpDX.DXGI.SwapChainDescription1"/> structure to determine how to handle the a member of the DXGI_RGBA structure, the alpha value of the background color, that achieves window transparency. For example, if AlphaMode is <see cref="F:SharpDX.DXGI.AlphaMode.Ignore"/>, <see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,System.Int32,SharpDX.DXGI.PresentParameters)"/> ignores the a member of DXGI_RGBA.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::SetBackgroundColor']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain1::SetBackgroundColor([In] const D3DCOLORVALUE* pColor)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.GetBackgroundColor(SharpDX.Color4@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="colorRef"><para>A reference to a DXGI_RGBA structure that receives the background color of the swap chain.</para></param>	
            <returns>GetBackgroundColor returns:<see cref="F:SharpDX.Result.Ok"/> if it successfully retrieves the background color.  <see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/> if the pColor parameter is invalid, for example, pColor is <c>null</c>. Possibly other error codes that are described in the DXGI_ERROR topic.</returns>	
            <remarks>	
            Note??The background color that GetBackgroundColor retrieves does not indicate what the screen currently displays. The background color indicates what the screen will display with your next call to the <see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,System.Int32,SharpDX.DXGI.PresentParameters)"/> method. The default value of the background color is black with full opacity: 0,0,0,1.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetBackgroundColor']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain1::GetBackgroundColor([Out] D3DCOLORVALUE* pColor)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.SetRotation(SharpDX.DXGI.DisplayModeRotation)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="rotation"><para>A <see cref="T:SharpDX.DXGI.DisplayModeRotation"/>-typed value that specifies how to set the rotation of the back buffers for the swap chain.</para></param>	
            <returns>SetRotation returns:<see cref="F:SharpDX.Result.Ok"/> if it successfully set the rotation. <see cref="F:SharpDX.DXGI.DXGIError.InvalidCall"/> if the swap chain is bit-block transfer (bitblt) model. The swap chain must be flip model to successfully call SetRotation. Possibly other error codes that are described in the DXGI_ERROR topic.</returns>	
            <remarks>	
            You can only use SetRotation to rotate the back buffers for flip-model swap chains that you present in windowed mode.SetRotation isn't supported for rotating the back buffers for flip-model swap chains that you present in full-screen mode. In this situation, SetRotation doesn't fail, but you must ensure that you specify no rotation (<see cref="F:SharpDX.DXGI.DisplayModeRotation.Identity"/>) for the swap chain. Otherwise, when you call <see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,System.Int32,SharpDX.DXGI.PresentParameters)"/> or <see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/> to present a frame,  the presentation fails.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::SetRotation']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain1::SetRotation([In] DXGI_MODE_ROTATION Rotation)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain1.GetRotation(SharpDX.DXGI.DisplayModeRotation@)">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <param name="rotationRef"><para>A reference to a variable that receives a <see cref="T:SharpDX.DXGI.DisplayModeRotation"/>-typed value that specifies the rotation of the back buffers for the swap chain.</para></param>	
            <returns>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise.  For a list of error codes, see DXGI_ERROR.</returns>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetRotation']/*"/>	
            <unmanaged>HRESULT IDXGISwapChain1::GetRotation([Out] DXGI_MODE_ROTATION* pRotation)</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.SwapChain1.Description1">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetDesc1']/*"/>	
            <unmanaged>GetDesc1</unmanaged>	
            <unmanaged>HRESULT IDXGISwapChain1::GetDesc1([Out] DXGI_SWAP_CHAIN_DESC1* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain1.FullscreenDescription">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            The semantics of GetFullscreenDesc are identical to that of the IDXGISwapchain::GetDesc method for <see cref="T:System.IntPtr"/>-based swap chains.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetFullscreenDesc']/*"/>	
            <unmanaged>GetFullscreenDesc</unmanaged>	
            <unmanaged>HRESULT IDXGISwapChain1::GetFullscreenDesc([Out] DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain1.Hwnd">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            Applications call the  <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullscreenDescription},SharpDX.DXGI.Output)"/> method to create a swap chain that is associated with an <see cref="T:System.IntPtr"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetHwnd']/*"/>	
            <unmanaged>GetHwnd</unmanaged>	
            <unmanaged>HRESULT IDXGISwapChain1::GetHwnd([Out] HWND* pHwnd)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain1.CompositionSurface">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            Applications call the <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCompositionSurface(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/> method to create a windowless swap chain.The handle that GetCompositionSurface returns is not necessarily the same as the handle that you passed to the <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCompositionSurface(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/> method.The handle that GetCompositionSurface returns has the same access attributes as the handle that DXGI owns.Note??After the calling application is finished with the pSurface handle, it must call CloseHandle to close the handle.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetCompositionSurface']/*"/>	
            <unmanaged>GetCompositionSurface</unmanaged>	
            <unmanaged>HRESULT IDXGISwapChain1::GetCompositionSurface([Out] void** pSurface)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain1.IsTemporaryMonoSupported">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            Temporary mono is a feature where a stereo swap chain can be presented using only the content in the left buffer.  To present using the left buffer as a mono buffer, an application calls the  <see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,System.Int32,SharpDX.DXGI.PresentParameters)"/> method with the <see cref="F:SharpDX.DXGI.PresentFlags.StereoTemporaryMono"/> flag.  All windowed swap chains support temporary mono. However, full-screen swap chains optionally support temporary mono because not all hardware supports temporary mono on full-screen swap chains efficiently.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::IsTemporaryMonoSupported']/*"/>	
            <unmanaged>IsTemporaryMonoSupported</unmanaged>	
            <unmanaged>BOOL IDXGISwapChain1::IsTemporaryMonoSupported()</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain1.RestrictToOutput">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            If the method succeeds, the runtime fills the buffer at ppRestrictToOutput with a reference to the restrict-to output interface. This restrict-to output interface has its reference count incremented. When you are finished with it, be sure to release the interface to avoid a memory leak.The output is also owned by the adapter on which the swap chain's device was created.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetRestrictToOutput']/*"/>	
            <unmanaged>GetRestrictToOutput</unmanaged>	
            <unmanaged>HRESULT IDXGISwapChain1::GetRestrictToOutput([Out] IDXGIOutput** ppRestrictToOutput)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain1.BackgroundColor">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            Note??The background color that GetBackgroundColor retrieves does not indicate what the screen currently displays. The background color indicates what the screen will display with your next call to the <see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,System.Int32,SharpDX.DXGI.PresentParameters)"/> method. The default value of the background color is black with full opacity: 0,0,0,1.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetBackgroundColor']/*"/>	
            <unmanaged>GetBackgroundColor</unmanaged>	
            <unmanaged>HRESULT IDXGISwapChain1::GetBackgroundColor([Out] D3DCOLORVALUE* pColor)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain1.Rotation">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain1::GetRotation']/*"/>	
            <unmanaged>GetRotation</unmanaged>	
            <unmanaged>HRESULT IDXGISwapChain1::GetRotation([Out] DXGI_MODE_ROTATION* pRotation)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.AdapterDesc2">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            The <see cref="T:SharpDX.DXGI.AdapterDesc2"/> structure provides a DXGI 1.2 description of an adapter.  This structure is initialized by using the <see cref="M:SharpDX.DXGI.Adapter2.GetDesc2(SharpDX.DXGI.AdapterDesc2@)"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2']/*"/>	
            <unmanaged>DXGI_ADAPTER_DESC2</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDesc2.Description">
            <summary>	
            <para>A string that contains the adapter description.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::Description']/*"/>	
            <unmanaged>wchar_t Description[128]</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDesc2.VendorId">
            <summary>	
            <para>The PCI ID of the hardware vendor.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::VendorId']/*"/>	
            <unmanaged>unsigned int VendorId</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDesc2.DeviceId">
            <summary>	
            <para>The PCI ID of the hardware device.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::DeviceId']/*"/>	
            <unmanaged>unsigned int DeviceId</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDesc2.SubSysId">
            <summary>	
            <para>The PCI ID of the sub system.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::SubSysId']/*"/>	
            <unmanaged>unsigned int SubSysId</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDesc2.Revision">
            <summary>	
            <para>The PCI ID of the revision number of the adapter.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::Revision']/*"/>	
            <unmanaged>unsigned int Revision</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDesc2.DedicatedVideoMemory">
            <summary>	
            <para>The number of bytes of dedicated video memory that are not shared with the CPU.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::DedicatedVideoMemory']/*"/>	
            <unmanaged>SIZE_T DedicatedVideoMemory</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDesc2.DedicatedSystemMemory">
            <summary>	
            <para>The number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::DedicatedSystemMemory']/*"/>	
            <unmanaged>SIZE_T DedicatedSystemMemory</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDesc2.SharedSystemMemory">
            <summary>	
            <para>The number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::SharedSystemMemory']/*"/>	
            <unmanaged>SIZE_T SharedSystemMemory</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDesc2.AdapterLuid">
            <summary>	
            <para>A unique value that identifies the adapter. See <see cref="T:System.Int64"/> for a definition of the structure. <see cref="T:System.Int64"/> is defined in dxgi.h.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::AdapterLuid']/*"/>	
            <unmanaged>LUID AdapterLuid</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDesc2.Flags">
            <summary>	
            <para>A value of the <see cref="T:SharpDX.DXGI.AdapterFlags"/> enumerated type that describes the adapter type.  The <see cref="F:SharpDX.DXGI.AdapterFlags.Remote"/> flag is reserved.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::Flags']/*"/>	
            <unmanaged>unsigned int Flags</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDesc2.GraphicsPreemptionGranularity">
            <summary>	
            <para>A value of the <see cref="T:SharpDX.DXGI.GraphicsPreemptionGranularity"/> enumerated type that describes the granularity level at which the GPU can be preempted from performing its current graphics rendering task.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::GraphicsPreemptionGranularity']/*"/>	
            <unmanaged>DXGI_GRAPHICS_PREEMPTION_GRANULARITY GraphicsPreemptionGranularity</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDesc2.ComputePreemptionGranularity">
            <summary>	
            <para>A value of the <see cref="T:SharpDX.DXGI.ComputePreemptionGranularity"/> enumerated type that describes the granularity level at which the GPU can be preempted from performing its current compute task.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC2::ComputePreemptionGranularity']/*"/>	
            <unmanaged>DXGI_COMPUTE_PREEMPTION_GRANULARITY ComputePreemptionGranularity</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.AdapterDescription">
            <summary>	
            Describes an adapter (or video card) by using DXGI 1.0.	
            </summary>	
            <remarks>	
            The <see cref="T:SharpDX.DXGI.AdapterDescription"/> structure provides a description of an adapter.  This structure is initialized by using the <see cref="M:SharpDX.DXGI.Adapter.GetDescription(SharpDX.DXGI.AdapterDescription@)"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC']/*"/>	
            <unmanaged>DXGI_ADAPTER_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.Description">
            <summary>	
            <para>A string that contains the adapter description.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::Description']/*"/>	
            <unmanaged>wchar_t Description[128]</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.VendorId">
            <summary>	
            <para>The PCI ID of the hardware vendor.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::VendorId']/*"/>	
            <unmanaged>unsigned int VendorId</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.DeviceId">
            <summary>	
            <para>The PCI ID of the hardware device.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::DeviceId']/*"/>	
            <unmanaged>unsigned int DeviceId</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.SubsystemId">
            <summary>	
            <para>The PCI ID of the sub system.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::SubSysId']/*"/>	
            <unmanaged>unsigned int SubSysId</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.Revision">
            <summary>	
            <para>The PCI ID of the revision number of the adapter.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::Revision']/*"/>	
            <unmanaged>unsigned int Revision</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.DedicatedVideoMemory">
            <summary>	
            <para>The number of bytes of dedicated video memory that are not shared with the CPU.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::DedicatedVideoMemory']/*"/>	
            <unmanaged>SIZE_T DedicatedVideoMemory</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.DedicatedSystemMemory">
            <summary>	
            <para>The number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::DedicatedSystemMemory']/*"/>	
            <unmanaged>SIZE_T DedicatedSystemMemory</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.SharedSystemMemory">
            <summary>	
            <para>The number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::SharedSystemMemory']/*"/>	
            <unmanaged>SIZE_T SharedSystemMemory</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.Luid">
            <summary>	
            <para>A unique value that identifies the adapter. See <see cref="T:System.Int64"/> for a definition of the structure. <see cref="T:System.Int64"/> is defined in dxgi.h.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::AdapterLuid']/*"/>	
            <unmanaged>LUID AdapterLuid</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.AdapterDescription1">
            <summary>	
            Describes an adapter (or video card) using DXGI 1.1.	
            </summary>	
            <remarks>	
            The <see cref="T:SharpDX.DXGI.AdapterDescription1"/> structure provides a DXGI 1.1 description of an adapter.  This structure is initialized by using the <see cref="M:SharpDX.DXGI.Adapter1.GetDescription1(SharpDX.DXGI.AdapterDescription1@)"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1']/*"/>	
            <unmanaged>DXGI_ADAPTER_DESC1</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.Description">
            <summary>	
            <para>A string that contains the adapter description.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::Description']/*"/>	
            <unmanaged>wchar_t Description[128]</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.VendorId">
            <summary>	
            <para>The PCI ID of the hardware vendor.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::VendorId']/*"/>	
            <unmanaged>unsigned int VendorId</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.DeviceId">
            <summary>	
            <para>The PCI ID of the hardware device.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::DeviceId']/*"/>	
            <unmanaged>unsigned int DeviceId</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.SubsystemId">
            <summary>	
            <para>The PCI ID of the sub system.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::SubSysId']/*"/>	
            <unmanaged>unsigned int SubSysId</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.Revision">
            <summary>	
            <para>The PCI ID of the revision number of the adapter.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::Revision']/*"/>	
            <unmanaged>unsigned int Revision</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.DedicatedVideoMemory">
            <summary>	
            <para>The number of bytes of dedicated video memory that are not shared with the CPU.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::DedicatedVideoMemory']/*"/>	
            <unmanaged>SIZE_T DedicatedVideoMemory</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.DedicatedSystemMemory">
            <summary>	
            <para>The number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::DedicatedSystemMemory']/*"/>	
            <unmanaged>SIZE_T DedicatedSystemMemory</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.SharedSystemMemory">
            <summary>	
            <para>The number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::SharedSystemMemory']/*"/>	
            <unmanaged>SIZE_T SharedSystemMemory</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.Luid">
            <summary>	
            <para>A unique value that identifies the adapter. See <see cref="T:System.Int64"/> for a definition of the structure. <see cref="T:System.Int64"/> is defined in dxgi.h.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::AdapterLuid']/*"/>	
            <unmanaged>LUID AdapterLuid</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.Flags">
            <summary>	
            <para>A value of the <see cref="T:SharpDX.DXGI.AdapterFlags"/> enumerated type that describes the adapter type.  The <see cref="F:SharpDX.DXGI.AdapterFlags.Remote"/> flag is reserved.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::Flags']/*"/>	
            <unmanaged>DXGI_ADAPTER_FLAG Flags</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.FrameStatistics">
            <summary>	
            Describes timing and presentation statistics for a frame.	
            </summary>	
            <remarks>	
            You initialize the <see cref="T:SharpDX.DXGI.FrameStatistics"/> structure with the <see cref="M:SharpDX.DXGI.Output.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)"/> or <see cref="M:SharpDX.DXGI.SwapChain.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)"/> method.You can only use <see cref="M:SharpDX.DXGI.SwapChain.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)"/> for swap chains that either use the flip presentation model or draw in full-screen mode. You set the <see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/> value in the SwapEffect member of the <see cref="T:SharpDX.DXGI.SwapChainDescription1"/> structure to specify that the swap chain uses the flip presentation model.The values in the PresentCount and PresentRefreshCount members indicate information about when a frame was presented on the display screen. You can use these values to determine whether a glitch occurred. The values in the SyncRefreshCount and SyncQPCTime members indicate timing information that you can use for audio and video synchronization or very precise animation. If the swap chain draws in full-screen mode, these values are based on when the computer booted. 	
            If the swap chain draws in windowed mode, these values are based on when the swap chain is created.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS']/*"/>	
            <unmanaged>DXGI_FRAME_STATISTICS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatistics.PresentCount">
            <summary>	
            <para>A value that represents the running total count of times that an image was presented to the monitor since the computer booted.</para>	
             <para>Note??The number of times that an image was presented to the monitor is not necessarily the same as the number of times  that you called <see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/> or <see cref="M:SharpDX.DXGI.SwapChain1.Present1(System.Int32,System.Int32,SharpDX.DXGI.PresentParameters)"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS::PresentCount']/*"/>	
            <unmanaged>unsigned int PresentCount</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatistics.PresentRefreshCount">
            <summary>	
            <para>A value that represents  the running total count of v-blanks at which the last image was presented to the monitor and that have happened since the computer booted (for windowed mode, since the swap chain was created).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS::PresentRefreshCount']/*"/>	
            <unmanaged>unsigned int PresentRefreshCount</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatistics.SyncRefreshCount">
            <summary>	
            <para>A value that represents  the running total count of v-blanks when the scheduler last sampled the machine time by calling QueryPerformanceCounter and that have happened since the computer booted (for windowed mode, since the swap chain was created).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS::SyncRefreshCount']/*"/>	
            <unmanaged>unsigned int SyncRefreshCount</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatistics.SyncQPCTime">
            <summary>	
            <para>A value that represents the high-resolution performance counter timer.  This value is the same as the value returned by the QueryPerformanceCounter function.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS::SyncQPCTime']/*"/>	
            <unmanaged>LARGE_INTEGER SyncQPCTime</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatistics.SyncGPUTime">
            <summary>	
            <para>Reserved. Always returns 0.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS::SyncGPUTime']/*"/>	
            <unmanaged>LARGE_INTEGER SyncGPUTime</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.GammaControl">
            <summary>	
            Controls the settings of a gamma curve.	
            </summary>	
            <remarks>	
            The <see cref="T:SharpDX.DXGI.GammaControl"/> structure is used by the <see cref="M:SharpDX.DXGI.Output.SetGammaControl(SharpDX.DXGI.GammaControl@)"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL']/*"/>	
            <unmanaged>DXGI_GAMMA_CONTROL</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.GammaControl.Scale">
            <summary>	
            <para>A <see cref="T:SharpDX.Color4"/> structure with scalar values that are applied to rgb values before being sent to the gamma look up table.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL::Scale']/*"/>	
            <unmanaged>DXGI_RGB Scale</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.GammaControl.Offset">
            <summary>	
            <para>A <see cref="T:SharpDX.Color4"/> structure with offset values that are applied to the rgb values before being sent to the gamma look up table.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL::Offset']/*"/>	
            <unmanaged>DXGI_RGB Offset</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.GammaControl.GammaCurve">
            <summary>	
            <para>An array of <see cref="T:SharpDX.Color4"/> structures that control the points of a gamma curve.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL::GammaCurve']/*"/>	
            <unmanaged>DXGI_RGB GammaCurve[1025]</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.GammaControlCapabilities">
            <summary>	
            Controls the gamma capabilities of an adapter.	
            </summary>	
            <remarks>	
            To get a list of the capabilities for controlling gamma correction, call <see cref="M:SharpDX.DXGI.Output.GetGammaControlCapabilities(SharpDX.DXGI.GammaControlCapabilities@)"/>.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES']/*"/>	
            <unmanaged>DXGI_GAMMA_CONTROL_CAPABILITIES</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.GammaControlCapabilities.MaximumConvertedValue">
            <summary>	
            <para>A value describing the maximum range of the control-point positions.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES::MaxConvertedValue']/*"/>	
            <unmanaged>float MaxConvertedValue</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.GammaControlCapabilities.MinimumConvertedValue">
            <summary>	
            <para>A value describing the minimum range of the control-point positions.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES::MinConvertedValue']/*"/>	
            <unmanaged>float MinConvertedValue</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.GammaControlCapabilities.ControlPointsCount">
            <summary>	
            <para>A value describing the number of control points in the array.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES::NumGammaControlPoints']/*"/>	
            <unmanaged>unsigned int NumGammaControlPoints</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.GammaControlCapabilities.IsScaleAndOffsetSupported">
            <summary>	
            <para>True if scaling and offset operations are supported during gamma correction; otherwise, false.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES::ScaleAndOffsetSupported']/*"/>	
            <unmanaged>BOOL ScaleAndOffsetSupported</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.GammaControlCapabilities.ControlPoints">
            <summary>	
            <para>An array of values describing control points; the maximum length of control points is 1025.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES::ControlPointPositions']/*"/>	
            <unmanaged>float ControlPointPositions[1025]</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.MappedRect">
            <summary>	
            Describes a mapped rectangle that is used to access a surface.	
            </summary>	
            <remarks>	
            The <see cref="T:SharpDX.DXGI.MappedRect"/> structure is initialized by the <see cref="M:SharpDX.DXGI.Surface.Map(SharpDX.DXGI.MappedRect@,System.Int32)"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MAPPED_RECT']/*"/>	
            <unmanaged>DXGI_MAPPED_RECT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.MappedRect.Pitch">
            <summary>	
            <para>A value that describes the width, in bytes, of the surface.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MAPPED_RECT::Pitch']/*"/>	
            <unmanaged>int Pitch</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.MappedRect.PBits">
            <summary>	
            <para>A reference to the image buffer of the surface.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MAPPED_RECT::pBits']/*"/>	
            <unmanaged>unsigned char* pBits</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.ModeDescription">
            <summary>	
            Describes a display mode.	
            </summary>	
            <remarks>	
            The following format values are valid for display modes and when you create a bit-block transfer (bitblt) model swap chain. The valid values depend on the feature level that you are working with.<para>Feature level &gt;= 9.1</para>	
               <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/>  <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm_SRgb"/>  <see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/> (except 10.x on Windows?Vista) <see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb"/> (except 10.x on Windows?Vista)    <para>Feature level &gt;= 10.0</para>	
               <see cref="F:SharpDX.DXGI.Format.R16G16B16A16_Float"/>  <see cref="F:SharpDX.DXGI.Format.R10G10B10A2_UNorm"/>    <para>Feature level &gt;= 11.0</para>	
              <see cref="F:SharpDX.DXGI.Format.R10G10B10_Xr_Bias_A2_UNorm"/>You can pass one of these format values to <see cref="!:SharpDX.Direct3D11.Device.CheckFormatSupport"/> to determine if it is a valid format for displaying on screen. If <see cref="!:SharpDX.Direct3D11.Device.CheckFormatSupport"/> returns <see cref="!:SharpDX.Direct3D11.FormatSupport.Display"/> in the bit field to which the pFormatSupport parameter points, the format is valid for displaying on screen.Starting with Windows Developer Preview for a flip model swap chain (that is, a swap chain that has the <see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/> value set in the SwapEffect member of <see cref="T:SharpDX.DXGI.SwapChainDescription"/>), you must set the Format member of <see cref="T:SharpDX.DXGI.ModeDescription"/> to <see cref="F:SharpDX.DXGI.Format.R16G16B16A16_Float"/>, <see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/>, or <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/>.Because of the relaxed render target creation rules that Direct3D 11 has for back buffers, applications can create a <see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb"/> render target view from a <see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/> swap chain so they can use automatic color space conversion when they render the swap chain.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC']/*"/>	
            <unmanaged>DXGI_MODE_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription.Width">
            <summary>	
            <para>A value that describes the resolution width. If you specify the width as zero when you call the  <see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/> method to create a swap chain, the runtime obtains the width from the output window and assigns this width value to the swap-chain description. You can subsequently call the <see cref="M:SharpDX.DXGI.SwapChain.GetDescription(SharpDX.DXGI.SwapChainDescription@)"/> method to retrieve the assigned width value.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC::Width']/*"/>	
            <unmanaged>unsigned int Width</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription.Height">
            <summary>	
            <para>A value describing the resolution height. If you specify the height as zero when you call the  <see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/> method to create a swap chain, the runtime obtains the height from the output window and assigns this height value to the swap-chain description. You can subsequently call the <see cref="M:SharpDX.DXGI.SwapChain.GetDescription(SharpDX.DXGI.SwapChainDescription@)"/> method to retrieve the assigned height value.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC::Height']/*"/>	
            <unmanaged>unsigned int Height</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription.RefreshRate">
            <summary>	
            <para>A <see cref="T:SharpDX.DXGI.Rational"/> structure describing the refresh rate in hertz</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC::RefreshRate']/*"/>	
            <unmanaged>DXGI_RATIONAL RefreshRate</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription.Format">
            <summary>	
            <para>A <see cref="T:SharpDX.DXGI.Format"/> structure describing the display format.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC::Format']/*"/>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription.ScanlineOrdering">
            <summary>	
            <para>A member of the <see cref="T:SharpDX.DXGI.DisplayModeScanlineOrder"/> enumerated type describing the scanline drawing mode.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC::ScanlineOrdering']/*"/>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER ScanlineOrdering</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription.Scaling">
            <summary>	
            <para>A member of the <see cref="T:SharpDX.DXGI.DisplayModeScaling"/> enumerated type describing the scaling mode.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC::Scaling']/*"/>	
            <unmanaged>DXGI_MODE_SCALING Scaling</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.ModeDescription.#ctor(System.Int32,System.Int32,SharpDX.DXGI.Rational,SharpDX.DXGI.Format)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.DXGI.ModeDescription" /> structure.
            </summary>
            <param name = "width">The width.</param>
            <param name = "height">The height.</param>
            <param name = "refreshRate">The refresh rate.</param>
            <param name = "format">The format.</param>
        </member>
        <member name="T:SharpDX.DXGI.ModeDescription1">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            DXGI_MODE_DESC1 is identical to <see cref="T:SharpDX.DXGI.ModeDescription"/> except that <see cref="T:SharpDX.DXGI.ModeDescription1"/> includes the Stereo member.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC1']/*"/>	
            <unmanaged>DXGI_MODE_DESC1</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription1.Width">
            <summary>	
            <para>A value that describes the resolution width.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC1::Width']/*"/>	
            <unmanaged>unsigned int Width</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription1.Height">
            <summary>	
            <para>A value that describes the resolution height.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC1::Height']/*"/>	
            <unmanaged>unsigned int Height</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription1.RefreshRate">
            <summary>	
            <para>A <see cref="T:SharpDX.DXGI.Rational"/> structure that describes the refresh rate in hertz.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC1::RefreshRate']/*"/>	
            <unmanaged>DXGI_RATIONAL RefreshRate</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription1.Format">
            <summary>	
            <para>A <see cref="T:SharpDX.DXGI.Format"/>-typed value that describes the display format.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC1::Format']/*"/>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription1.ScanlineOrdering">
            <summary>	
            <para>A <see cref="T:SharpDX.DXGI.DisplayModeScanlineOrder"/>-typed value that describes the scan-line drawing mode.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC1::ScanlineOrdering']/*"/>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER ScanlineOrdering</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription1.Scaling">
            <summary>	
            <para>A <see cref="T:SharpDX.DXGI.DisplayModeScaling"/>-typed value that describes the scaling mode.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC1::Scaling']/*"/>	
            <unmanaged>DXGI_MODE_SCALING Scaling</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.ModeDescription1.Stereo">
            <summary>	
            <para>Specifies whether the full-screen display mode is stereo. TRUE if stereo; otherwise, <see cref="F:SharpDX.Result.False"/>. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC1::Stereo']/*"/>	
            <unmanaged>BOOL Stereo</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.OutduplDescription">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_DESC']/*"/>	
            <unmanaged>DXGI_OUTDUPL_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutduplDescription.ModeDescription">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_DESC::ModeDesc']/*"/>	
            <unmanaged>DXGI_MODE_DESC ModeDesc</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutduplDescription.Rotation">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_DESC::Rotation']/*"/>	
            <unmanaged>DXGI_MODE_ROTATION Rotation</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.OutduplDescription.DesktopImageInSystemMemeory">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_DESC::DesktopImageInSystemMemeory']/*"/>	
            <unmanaged>BOOL DesktopImageInSystemMemeory</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.OutduplFrameInformation">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            A non-zero LastMouseUpdateTime indicates an update to either a mouse reference position or a mouse reference position and shape. That is, the mouse reference position is always valid for a non-zero LastMouseUpdateTime; however, the application must check the value of the PointerShapeBufferSize member to determine whether the shape was updated too.If only the reference was updated (that is, the desktop image was not updated), the AccumulatedFrames, TotalMetadataBufferSize, and LastPresentTime members are set to zero.An AccumulatedFrames value of one indicates that the application completed processing the last frame before a new desktop image was presented.  If the AccumulatedFrames value is greater than one, more desktop image updates have occurred while the application processed the last desktop update. In this situation, the operating system accumulated the update regions. For more information about desktop updates, see Desktop Update Data.A non-zero TotalMetadataBufferSize indicates the total size of the buffers that are required to store all the desktop update metadata.  An application cannot determine the size of each type of metadata.  The application must call the <see cref="M:SharpDX.DXGI.OutputDuplication.GetFrameDirtyRects(System.Int32,SharpDX.Rectangle[],System.Int32@)"/>, <see cref="M:SharpDX.DXGI.OutputDuplication.GetFrameMoveRects(System.Int32,SharpDX.DXGI.OutduplMoveRect[],System.Int32@)"/>, or <see cref="M:SharpDX.DXGI.OutputDuplication.GetFramePointerShape(System.Int32,System.IntPtr,System.Int32@,SharpDX.DXGI.OutduplPointerShapeInformation@)"/> method to obtain information about each type of metadata.Note??To correct visual effects, an application must process the move region data before it processes the dirty rectangles.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO']/*"/>	
            <unmanaged>DXGI_OUTDUPL_FRAME_INFO</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutduplFrameInformation.LastPresentTime">
            <summary>	
            <para>The time stamp of the last update of the desktop image.  The operating system calls the QueryPerformanceCounter function to obtain the value. A zero value indicates that the desktop image was not updated since an application last called the <see cref="M:SharpDX.DXGI.OutputDuplication.AcquireNextFrame(System.Int32,SharpDX.DXGI.OutduplFrameInformation@,SharpDX.DXGI.Resource@)"/> method to acquire the next frame of the desktop image.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::LastPresentTime']/*"/>	
            <unmanaged>LARGE_INTEGER LastPresentTime</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutduplFrameInformation.LastMouseUpdateTime">
            <summary>	
            <para>The time stamp of the last update to the mouse.  The operating system calls the QueryPerformanceCounter function to obtain the value. A zero value indicates that the position or shape of the mouse was not updated since an application last called the <see cref="M:SharpDX.DXGI.OutputDuplication.AcquireNextFrame(System.Int32,SharpDX.DXGI.OutduplFrameInformation@,SharpDX.DXGI.Resource@)"/> method to acquire the next frame of the desktop image.  The mouse position is always supplied for a mouse update. A new reference shape is indicated by a non-zero value in the PointerShapeBufferSize member.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::LastMouseUpdateTime']/*"/>	
            <unmanaged>LARGE_INTEGER LastMouseUpdateTime</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutduplFrameInformation.AccumulatedFrames">
            <summary>	
            <para>The number of frames that the operating system accumulated in the desktop image surface since the calling application processed the last desktop image.  For more information about this number, see Remarks.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::AccumulatedFrames']/*"/>	
            <unmanaged>unsigned int AccumulatedFrames</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutduplFrameInformation.PointerPosition">
            <summary>	
            <para>A <see cref="T:SharpDX.DXGI.OutduplPointerPosition"/> structure that describes the most recent mouse position if the LastMouseUpdateTime member is a non-zero value; otherwise, this value is ignored. This value provides the coordinates of the location where the top-left-hand corner of the reference shape is drawn; this value is not the desktop position of the hot spot.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::PointerPosition']/*"/>	
            <unmanaged>DXGI_OUTDUPL_POINTER_POSITION PointerPosition</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutduplFrameInformation.TotalMetadataBufferSize">
            <summary>	
            <para>Size in bytes of the buffers to store all the desktop update metadata for this frame. For more information about this size, see Remarks.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::TotalMetadataBufferSize']/*"/>	
            <unmanaged>unsigned int TotalMetadataBufferSize</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutduplFrameInformation.PointerShapeBufferSize">
            <summary>	
            <para>Size in bytes of the buffer to hold the new pixel data for the mouse shape. For more information about this size, see Remarks.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::PointerShapeBufferSize']/*"/>	
            <unmanaged>unsigned int PointerShapeBufferSize</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.OutduplFrameInformation.RectsCoalesced">
            <summary>	
            <para>Specifies whether the operating system accumulated updates by coalescing dirty regions. Therefore,  the dirty regions might contain unmodified pixels. TRUE if dirty regions were accumulated; otherwise, <see cref="F:SharpDX.Result.False"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::RectsCoalesced']/*"/>	
            <unmanaged>BOOL RectsCoalesced</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.OutduplFrameInformation.ProtectedContentMaskedOut">
            <summary>	
            <para>Specifies whether the desktop image might contain protected content that was already blacked out in the desktop image.  TRUE if protected content was already blacked; otherwise, <see cref="F:SharpDX.Result.False"/>. The application can use this information to notify the remote user that some of the desktop content might be protected and therefore not visible.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::ProtectedContentMaskedOut']/*"/>	
            <unmanaged>BOOL ProtectedContentMaskedOut</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.OutduplMoveRect">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_MOVE_RECT']/*"/>	
            <unmanaged>DXGI_OUTDUPL_MOVE_RECT</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutduplMoveRect.SourcePoint">
            <summary>	
            <para>The starting position of a rectangle.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_MOVE_RECT::SourcePoint']/*"/>	
            <unmanaged>POINT SourcePoint</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutduplMoveRect.DestinationRect">
            <summary>	
            <para>The target region to which to move a rectangle.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_MOVE_RECT::DestinationRect']/*"/>	
            <unmanaged>RECT DestinationRect</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.OutduplPointerPosition">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            The Position member is valid only if the Visible member?s value is set to TRUE.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_POSITION']/*"/>	
            <unmanaged>DXGI_OUTDUPL_POINTER_POSITION</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutduplPointerPosition.Position">
            <summary>	
            <para>The position of the hardware cursor relative to the top-left of the adapter output.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_POSITION::Position']/*"/>	
            <unmanaged>POINT Position</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.OutduplPointerPosition.Visible">
            <summary>	
            <para>Specifies whether the hardware cursor is visible. TRUE if visible; otherwise, <see cref="F:SharpDX.Result.False"/>. If the hardware cursor is not visible, the calling application does not display the cursor in the client.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_POSITION::Visible']/*"/>	
            <unmanaged>BOOL Visible</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.OutduplPointerShapeInformation">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            An application draws the cursor shape with the top-left-hand corner drawn at the position that the Position member of the  <see cref="T:SharpDX.DXGI.OutduplPointerPosition"/> structure specifies; the application does not use the hot spot to draw the cursor shape.An application calls the  <see cref="M:SharpDX.DXGI.OutputDuplication.GetFramePointerShape(System.Int32,System.IntPtr,System.Int32@,SharpDX.DXGI.OutduplPointerShapeInformation@)"/> method to retrieve cursor shape information in a  <see cref="T:SharpDX.DXGI.OutduplPointerShapeInformation"/> structure.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_INFO']/*"/>	
            <unmanaged>DXGI_OUTDUPL_POINTER_SHAPE_INFO</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutduplPointerShapeInformation.Type">
            <summary>	
            <para>A <see cref="T:SharpDX.DXGI.OutduplPointerShapeType"/>-typed value that specifies the type of cursor shape. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_INFO::Type']/*"/>	
            <unmanaged>unsigned int Type</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutduplPointerShapeInformation.Width">
            <summary>	
            <para>The width in pixels of the mouse cursor.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_INFO::Width']/*"/>	
            <unmanaged>unsigned int Width</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutduplPointerShapeInformation.Height">
            <summary>	
            <para>The height in scan lines of the mouse cursor.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_INFO::Height']/*"/>	
            <unmanaged>unsigned int Height</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutduplPointerShapeInformation.Pitch">
            <summary>	
            <para>The width in bytes of the mouse cursor.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_INFO::Pitch']/*"/>	
            <unmanaged>unsigned int Pitch</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutduplPointerShapeInformation.HotSpot">
            <summary>	
            <para>The position of the cursor's hot spot relative to its upper-left pixel. An application does not use the hot spot when it determines where to draw the cursor shape.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_INFO::HotSpot']/*"/>	
            <unmanaged>POINT HotSpot</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.OutputDescription">
            <summary>	
            Describes an output or physical connection between the adapter (video card) and a device.	
            </summary>	
            <remarks>	
            The <see cref="T:SharpDX.DXGI.OutputDescription"/> structure is initialized by the <see cref="M:SharpDX.DXGI.Output.GetDescription(SharpDX.DXGI.OutputDescription@)"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTPUT_DESC']/*"/>	
            <unmanaged>DXGI_OUTPUT_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDescription.DeviceName">
            <summary>	
            <para>A string that contains the name of the output device.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTPUT_DESC::DeviceName']/*"/>	
            <unmanaged>wchar_t DeviceName[32]</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDescription.DesktopBounds">
            <summary>	
            <para>A <see cref="T:SharpDX.Rectangle"/> structure containing the bounds of the output in desktop coordinates.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTPUT_DESC::DesktopCoordinates']/*"/>	
            <unmanaged>RECT DesktopCoordinates</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDescription.Rotation">
            <summary>	
            <para>A member of the <see cref="T:SharpDX.DXGI.DisplayModeRotation"/> enumerated type describing on how an image is rotated by the output.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTPUT_DESC::Rotation']/*"/>	
            <unmanaged>DXGI_MODE_ROTATION Rotation</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDescription.MonitorHandle">
            <summary>	
            <para>An <see cref="T:System.IntPtr"/> handle that represents the display monitor. For more information, see <see cref="T:System.IntPtr"/> and the Device Context.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTPUT_DESC::Monitor']/*"/>	
            <unmanaged>HMONITOR Monitor</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.OutputDescription.IsAttachedToDesktop">
            <summary>	
            <para>True if the output is attached to the desktop; otherwise, false.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTPUT_DESC::AttachedToDesktop']/*"/>	
            <unmanaged>BOOL AttachedToDesktop</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.PresentParameters">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            The scroll rectangle and the list of dirty rectangles could overlap.  In this situation, the dirty rectangles take priority. Applications can then have pieces of dynamic content on top of a scrolled area. For example, an application could scroll a page and play video at the same time.The following diagram and coordinates illustrate this example.DirtyRectsCount = 2	
            pDirtyRects[ 0 ] = { 10, 30, 40, 50 } // Video	
            pDirtyRects[ 1 ] = { 0, 70, 50, 80 } // New line	
            *pScrollRect = { 0, 0, 50, 70 }	
            *pScrollOffset = { 0, -10 }Parts of the previous frame and content that the application renders are combined to produce the final frame that the operating system presents on the display screen. Most of the window is scrolled from the previous frame. The  application must update the video frame with the new chunk of content that appears due to scrolling.The dashed rectangle shows the scroll rectangle in the current frame. The scroll rectangle is  specified by the pScrollRect member.	
            The arrow shows the scroll offset. The scroll offset is specified by the pScrollOffset member.	
            Filled rectangles show dirty rectangles that the application updated with new content. The filled rectangles are specified by the DirtyRectsCount and pDirtyRects members.The scroll rectangle and offset are not supported for the <see cref="F:SharpDX.DXGI.SwapEffect.Discard"/> or <see cref="F:SharpDX.DXGI.SwapEffect.Sequential"/> present option. Dirty rectangles and scroll rectangle are not supported for multisampled swap chains.The actual implementation of composition and necessary bitblts is different for the bitblt model and the flip model.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_PARAMETERS']/*"/>	
            <unmanaged>DXGI_PRESENT_PARAMETERS</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.PresentParameters.DirtyRectsCount">
            <summary>	
            <para>The number of updated rectangles that you update in the back buffer for the presented frame. The operating system uses this information to optimize presentation. You can set this member to 0 to indicate that you update the whole frame.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_PARAMETERS::DirtyRectsCount']/*"/>	
            <unmanaged>unsigned int DirtyRectsCount</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.PresentParameters.PDirtyRects">
            <summary>	
            <para>A list of updated rectangles that you update in the back buffer for the presented frame. An application must update every single pixel in each rectangle that it reports to the runtime; the application cannot assume that the pixels are saved from the previous frame. For more information about updating dirty rectangles, see Remarks. You can set this member to <c>null</c> if DirtyRectsCount is 0. An application must not update any pixel outside of the dirty rectangles.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_PARAMETERS::pDirtyRects']/*"/>	
            <unmanaged>RECT* pDirtyRects</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.PresentParameters.PScrollRect">
            <summary>	
            <para> A reference to the scrolled rectangle. The scrolled rectangle is the rectangle of the previous frame from which the runtime bit-block transfers (bitblts) content. The runtime also uses the scrolled rectangle to optimize presentation in terminal server and indirect display scenarios.</para>	
             <para>The scrolled rectangle also describes the destination rectangle, that is, the region on the current frame that is filled with scrolled content. You can set this member to <c>null</c> to indicate that no content is scrolled from the previous frame.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_PARAMETERS::pScrollRect']/*"/>	
            <unmanaged>RECT* pScrollRect</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.PresentParameters.PScrollOffset">
            <summary>	
            <para>A reference to the offset of the scrolled area that goes from the source rectangle (of previous frame) to the destination rectangle (of current frame). You can set this member to <c>null</c> to indicate no offset.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_PARAMETERS::pScrollOffset']/*"/>	
            <unmanaged>POINT* pScrollOffset</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.Rational">
            <summary>	
            Represents a rational number.	
            </summary>	
            <remarks>	
            The <see cref="T:SharpDX.DXGI.Rational"/> structure operates under the following rules:0/0 is legal and will be interpreted as 0/1. 0/anything is interpreted as zero. If you are representing a whole number, the denominator should be 1.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RATIONAL']/*"/>	
            <unmanaged>DXGI_RATIONAL</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Rational.Numerator">
            <summary>	
            <para>An unsigned integer value representing the top of the rational number.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RATIONAL::Numerator']/*"/>	
            <unmanaged>unsigned int Numerator</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.Rational.Denominator">
            <summary>	
            <para>An unsigned integer value representing the bottom of the rational number.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RATIONAL::Denominator']/*"/>	
            <unmanaged>unsigned int Denominator</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Rational.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.DXGI.Rational" /> structure.
            </summary>
            <param name = "numerator">The numerator of the rational pair.</param>
            <param name = "denominator">The denominator of the rational pair.</param>
        </member>
        <member name="T:SharpDX.DXGI.SampleDescription">
            <summary>	
            Describes multi-sampling parameters for a resource.	
            </summary>	
            <remarks>	
            The default sampler mode, with no anti-aliasing, has a count of 1 and a quality level of 0.If multi-sample antialiasing is being used, all bound render targets and depth buffers must have the same sample counts and quality levels.<para>Differences between Direct3D 10.0 and Direct3D 10.1 and between Direct3D 10.0 and Direct3D 11:</para>	
             <para>Direct3D 10.1 has defined two standard quality levels:   <see cref="!:SharpDX.Direct3D10.StandardMultisampleQualityLevels.StandardMultisamplePattern"/> and <see cref="!:SharpDX.Direct3D10.StandardMultisampleQualityLevels.CenterMultisamplePattern"/> in the <see cref="!:SharpDX.Direct3D10.StandardMultisampleQualityLevels"/> enumeration in D3D10_1.h.</para>	
             <para>Direct3D 11 has defined two standard quality levels:   <see cref="!:SharpDX.Direct3D11.StandardMultisampleQualityLevels.StandardMultisamplePattern"/> and <see cref="!:SharpDX.Direct3D11.StandardMultisampleQualityLevels.CenterMultisamplePattern"/> in the <see cref="!:SharpDX.Direct3D11.StandardMultisampleQualityLevels"/> enumeration in D3D11.h.</para>?	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SAMPLE_DESC']/*"/>	
            <unmanaged>DXGI_SAMPLE_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SampleDescription.Count">
            <summary>	
            <para>The number of multisamples per pixel.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SAMPLE_DESC::Count']/*"/>	
            <unmanaged>unsigned int Count</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SampleDescription.Quality">
            <summary>	
            <para>The image quality level. The higher the quality, the lower the performance. The valid range is between zero and one less than the level returned  by <see cref="!:SharpDX.Direct3D10.Device.CheckMultisampleQualityLevels"/> for Direct3D 10 or <see cref="!:SharpDX.Direct3D11.Device.CheckMultisampleQualityLevels"/> for Direct3D 11.</para>	
             <para>For Direct3D 10.1 and Direct3D 11, you can use two special quality level values. For more information about these quality level values, see Remarks.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SAMPLE_DESC::Quality']/*"/>	
            <unmanaged>unsigned int Quality</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.SampleDescription.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.DXGI.SampleDescription" /> structure.
            </summary>
            <param name = "count">The sample count.</param>
            <param name = "quality">The sample quality.</param>
        </member>
        <member name="T:SharpDX.DXGI.SharedResource">
            <summary>	
            Represents a handle to a shared resource.	
            </summary>	
            <remarks>	
            To create a shared surface, pass a shared-resource handle into the <see cref="M:SharpDX.DXGI.Device.CreateSurface(SharpDX.DXGI.SurfaceDescription@,System.Int32,System.Int32,System.Nullable{SharpDX.DXGI.SharedResource},SharpDX.DXGI.Surface@)"/> method.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SHARED_RESOURCE']/*"/>	
            <unmanaged>DXGI_SHARED_RESOURCE</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SharedResource.Handle">
            <summary>	
            <para>A handle to a shared resource.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SHARED_RESOURCE::Handle']/*"/>	
            <unmanaged>void* Handle</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.SurfaceDescription">
            <summary>	
            Describes a surface.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SURFACE_DESC']/*"/>	
            <unmanaged>DXGI_SURFACE_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SurfaceDescription.Width">
            <summary>	
            <para>A value describing the surface width.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SURFACE_DESC::Width']/*"/>	
            <unmanaged>unsigned int Width</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SurfaceDescription.Height">
            <summary>	
            <para>A value describing the surface height.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SURFACE_DESC::Height']/*"/>	
            <unmanaged>unsigned int Height</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SurfaceDescription.Format">
            <summary>	
            <para>A member of the <see cref="T:SharpDX.DXGI.Format"/> enumerated type that describes the surface format.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SURFACE_DESC::Format']/*"/>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SurfaceDescription.SampleDescription">
            <summary>	
            <para>A member of the <see cref="T:SharpDX.DXGI.SampleDescription"/> structure that describes multi-sampling parameters for the surface.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SURFACE_DESC::SampleDesc']/*"/>	
            <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.SwapChainDescription">
            <summary>	
            Describes a swap chain.	
            </summary>	
            <remarks>	
            In full-screen mode, there is a dedicated front buffer; in windowed mode, the desktop is the front buffer.If you create a swap chain with one buffer, specifying <see cref="F:SharpDX.DXGI.SwapEffect.Sequential"/> does not cause the contents of the single  buffer to be swapped with the front buffer.For performance information about flipping swap-chain buffers in full-screen application,  see Full-Screen Application Performance Hints.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC']/*"/>	
            <unmanaged>DXGI_SWAP_CHAIN_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.ModeDescription">
            <summary>	
            <para>A <see cref="T:SharpDX.DXGI.ModeDescription"/> structure that describes the backbuffer display mode.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::BufferDesc']/*"/>	
            <unmanaged>DXGI_MODE_DESC BufferDesc</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.SampleDescription">
            <summary>	
            <para>A <see cref="T:SharpDX.DXGI.SampleDescription"/> structure that describes multi-sampling parameters.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::SampleDesc']/*"/>	
            <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.Usage">
            <summary>	
            <para>A member of the DXGI_USAGE enumerated type that describes the surface usage and CPU access options for the back buffer. The back buffer can  be used for shader input or render-target output.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::BufferUsage']/*"/>	
            <unmanaged>DXGI_USAGE_ENUM BufferUsage</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.BufferCount">
            <summary>	
            <para>A value that describes the number of buffers in the swap chain. When you call  <see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/> to create a full-screen swap chain, you typically include the front buffer in this value. For more information about swap-chain buffers, see Remarks.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::BufferCount']/*"/>	
            <unmanaged>unsigned int BufferCount</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.OutputHandle">
            <summary>	
            <para>An <see cref="T:System.IntPtr"/> handle to the output window. This member must not be <c>null</c>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::OutputWindow']/*"/>	
            <unmanaged>HWND OutputWindow</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.SwapEffect">
            <summary>	
            <para>A member of the <see cref="T:SharpDX.DXGI.SwapEffect"/> enumerated type that describes options for handling the contents of the presentation buffer after  presenting a surface.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::SwapEffect']/*"/>	
            <unmanaged>DXGI_SWAP_EFFECT SwapEffect</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.Flags">
            <summary>	
            <para>A member of the <see cref="T:SharpDX.DXGI.SwapChainFlags"/> enumerated type that describes options for swap-chain behavior.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::Flags']/*"/>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG Flags</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.SwapChainDescription.IsWindowed">
            <summary>	
            <para>A Boolean value that specifies whether the output is in windowed mode. TRUE if the output is in windowed mode; otherwise, <see cref="F:SharpDX.Result.False"/>. </para>	
             <para>We recommend that you create a windowed swap chain and allow the end user to change the swap chain to full screen through <see cref="M:SharpDX.DXGI.SwapChain.SetFullscreenState(System.Boolean,SharpDX.DXGI.Output)"/>; that is, do not set this member to <see cref="F:SharpDX.Result.False"/> to force the swap chain to be full screen. However, if you create the swap chain as full screen, also provide the end user with a list of supported display modes through the BufferDesc member because a swap chain that is created with an unsupported display mode might cause the display to go black and prevent the end user from seeing anything. </para>	
             <para>For more information about choosing windowed verses full screen, see <see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/>.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::Windowed']/*"/>	
            <unmanaged>BOOL Windowed</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.SwapChainDescription1">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <remarks>	
            Note??You cannot cast a <see cref="T:SharpDX.DXGI.SwapChainDescription1"/> to a <see cref="T:SharpDX.DXGI.SwapChainDescription"/> and vice versa. An application must explicitly use the <see cref="M:SharpDX.DXGI.SwapChain1.GetDescription1(SharpDX.DXGI.SwapChainDescription1@)"/> method to retrieve the newer version of the swap-chain description structure.In full-screen mode, there is a dedicated front buffer; in windowed mode, the desktop is the front buffer.For a flip-model swap chain (that is, a swap chain that has the <see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/> value set in the SwapEffect member), you must set the Format member to <see cref="F:SharpDX.DXGI.Format.R16G16B16A16_Float"/>, <see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/>, or <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/>; you must set the Count member of the <see cref="T:SharpDX.DXGI.SampleDescription"/> structure that the SampleDesc member specifies to one and the Quality member of <see cref="T:SharpDX.DXGI.SampleDescription"/> to zero because multiple sample antialiasing (MSAA) is not supported; you must set the BufferCount member to from two to sixteen.	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1']/*"/>	
            <unmanaged>DXGI_SWAP_CHAIN_DESC1</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription1.Width">
            <summary>	
            <para>A value that describes the resolution width. If you specify the width as zero when you call the <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullscreenDescription},SharpDX.DXGI.Output)"/> method to create a swap chain, the runtime obtains the width from the output window and assigns this width value to the swap-chain description. You can subsequently call the <see cref="M:SharpDX.DXGI.SwapChain1.GetDescription1(SharpDX.DXGI.SwapChainDescription1@)"/> method to retrieve the assigned width value. You cannot specify the width as zero when you call the <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCompositionSurface(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/> method.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::Width']/*"/>	
            <unmanaged>unsigned int Width</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription1.Height">
            <summary>	
            <para>A value that describes the resolution height. If you specify the height as zero when you call the <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForHwnd(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,System.Nullable{SharpDX.DXGI.SwapChainFullscreenDescription},SharpDX.DXGI.Output)"/> method to create a swap chain, the runtime obtains the height from the output window and assigns this height value to the swap-chain description. You can subsequently call the <see cref="M:SharpDX.DXGI.SwapChain1.GetDescription1(SharpDX.DXGI.SwapChainDescription1@)"/> method to retrieve the assigned height value. You cannot specify the height as zero when you call the <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCompositionSurface(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/> method.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::Height']/*"/>	
            <unmanaged>unsigned int Height</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription1.Format">
            <summary>	
            <para>A <see cref="T:SharpDX.DXGI.Format"/> structure that describes the display format.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::Format']/*"/>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription1.SampleDescription">
            <summary>	
            <para>A <see cref="T:SharpDX.DXGI.SampleDescription"/> structure that describes multi-sampling parameters. This member is valid only with bit-block transfer (bitblt) model swap chains.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::SampleDesc']/*"/>	
            <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription1.Usage">
            <summary>	
            <para>A DXGI_USAGE-typed value that describes the surface usage and CPU access options for the back buffer. The back buffer can  be used for shader input or render-target output.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::BufferUsage']/*"/>	
            <unmanaged>DXGI_USAGE_ENUM BufferUsage</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription1.BufferCount">
            <summary>	
            <para>A value that describes the number of buffers in the swap chain. When you create a full-screen swap chain, you typically include the front buffer in this value.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::BufferCount']/*"/>	
            <unmanaged>unsigned int BufferCount</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription1.Scaling">
            <summary>	
            <para>A <see cref="T:SharpDX.DXGI.Scaling"/>-typed value that identifies resize behavior if the size of the back buffer is not equal to the target output. </para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::Scaling']/*"/>	
            <unmanaged>DXGI_SCALING Scaling</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription1.SwapEffect">
            <summary>	
            <para>A <see cref="T:SharpDX.DXGI.SwapEffect"/>-typed value that describes the presentation model that is used by the swap chain and options for handling the contents of the presentation buffer after  presenting a surface. You must specify the <see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/> value when you call the <see cref="M:SharpDX.DXGI.Factory2.CreateSwapChainForCompositionSurface(SharpDX.ComObject,System.IntPtr,SharpDX.DXGI.SwapChainDescription1@,SharpDX.DXGI.Output)"/> method.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::SwapEffect']/*"/>	
            <unmanaged>DXGI_SWAP_EFFECT SwapEffect</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription1.AlphaMode">
            <summary>	
            <para>A <see cref="T:SharpDX.DXGI.AlphaMode"/>-typed value that identifies the transparency behavior of the swap-chain back buffer.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::AlphaMode']/*"/>	
            <unmanaged>DXGI_ALPHA_MODE AlphaMode</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription1.Flags">
            <summary>	
            <para>A combination of  <see cref="T:SharpDX.DXGI.SwapChainFlags"/>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for swap-chain behavior.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::Flags']/*"/>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG Flags</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.SwapChainDescription1.Stereo">
            <summary>	
            <para>Specifies whether the full-screen display mode or the swap-chain back buffer is stereo. TRUE if stereo; otherwise, <see cref="F:SharpDX.Result.False"/>. If you specify stereo, you must also specify a flip-model swap chain (that is, a swap chain that has the <see cref="F:SharpDX.DXGI.SwapEffect.FlipSequential"/> value set in the SwapEffect member).</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::Stereo']/*"/>	
            <unmanaged>BOOL Stereo</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.SwapChainFullscreenDescription">
            <summary>	
            [This documentation is preliminary and is subject to change.]	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FULLSCREEN_DESC']/*"/>	
            <unmanaged>DXGI_SWAP_CHAIN_FULLSCREEN_DESC</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFullscreenDescription.RefreshRate">
            <summary>	
            <para>A <see cref="T:SharpDX.DXGI.Rational"/> structure that describes the refresh rate in hertz.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FULLSCREEN_DESC::RefreshRate']/*"/>	
            <unmanaged>DXGI_RATIONAL RefreshRate</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFullscreenDescription.ScanlineOrdering">
            <summary>	
            <para>A member of the <see cref="T:SharpDX.DXGI.DisplayModeScanlineOrder"/> enumerated type that describes the scan-line drawing mode.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FULLSCREEN_DESC::ScanlineOrdering']/*"/>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER ScanlineOrdering</unmanaged>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFullscreenDescription.Scaling">
            <summary>	
            <para>A member of the <see cref="T:SharpDX.DXGI.DisplayModeScaling"/> enumerated type that describes the scaling mode.</para>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FULLSCREEN_DESC::Scaling']/*"/>	
            <unmanaged>DXGI_MODE_SCALING Scaling</unmanaged>	
        </member>
    </members>
</doc>
